© 2018, Aaron Sami Abassi
All rights reserved

                                       C++
                       Relational Association Programming 
                             Basic Template Library

                          
ABSTRACT

    This source code is intended as an example to demonstrate a C++ (2014) 
syntax intended for use in systems programming.  Template metaprogramming is a 
powerful tool which allows programmers to express source code
multi-dimensionally.  Contained in this example are broad abstractions of common
programmatic goals (hence Basic Template Library).  The included example
demonstration uses compile time determinable evaluations offering compilers the 
opportunity to optimize the resulting binary code into trivially displaying a 
constant string output.


PREAMBLE

	Though I have performed some testing on this template library, it is not
intended for use in critical systems.  Use at your own risk, this project is an
academic effort of demonstrating why C++ systems metaprogramming versus C 
systems programming should be reviewed in light of advances in the C++ language
specification.


DEMONSTRATION

    Compiling "example.cpp" in the root source directory with C++14 syntax
enabled if not by default will produce an executable which displays some output.
This source file demonstrates how a library user might use template instances 
for specific needs, such as a linked list of characters.


PERFORMANCE

    Testing was conducted on an x86 32-bit (i686) GNU/Linux virtual machine
based system.  The tested GNU Compiler Collection C++ compiler version was
7.2.0, the LLVM Compiler Infrastructure C++ compiler version was 5.0.0 and the
GNU Project Debugger version was 7.11.1.  The compiler option to specify the
language standard was used "-std=c++14", optimization was not specified and the
compiled source file was "example.cpp" in both cases.  When the resulting
executable binary image produced by LLVM was executed from the debugger, all of
the program's output was displayed before the third instruction executed.  The 
total number of instructions in main was 10 and 2 more were executed in 
__libc_start_main(). When the resulting executable binary image produced by GNU
C++ was executed from the debugger, all of the program's output was displayed
before the third instruction executed.  The total number of instructions in main
was 12 and 2 more were executed in __libc_start_main().  


CONCLUSION

	Both compilers are able to reduce the "example.cpp" source code through
inline candidacy preservations across compile time determinate referencing and 
code optimizations to the point of being able to determine the invariability of
the program output and simply reduce the complete algorithm, including template
argument based behavioral delegations, to trivially generating a standard output
signal at instruction 2 with a predetermined single output string.  Making use
of C++ template based programming in order to promote source code reusability 
does not introduce any observable compiler inefficiencies.  Procedural syntax is
greatly augmented by the dimensions of template parametric spaces where the 
resulting source code can become vastly more expressive. 


COPYRIGHT

    The GNU Compiler Collection
        Copyright (C) 2017 Free Software Foundation, Inc.
    The LLVM Compiler Infrastructure
    	© Copyright 2003-2018, LLVM Project
    The GNU Project Debugger
        Copyright Free Software Foundation, Inc.

--------------------------------------------------------------------------------


                            C++ RAP-BTL DOCUMENTATION

                            
--------------------------------------------------------------------------------


                                    Location


                                    NAMESPACE


::location

                                 TYPE TEMPLATES


::location::Locational (type alias)

    Template Parameters:
        typename Subjective

    Aliased Type:
        Subjective*

    Description:
        Pointer location type template.  Increases the legibility of array and 
        function pointer parameter definitions where type and identifier both 
        appear.


::location::Referential (type alias)

    Template Parameters:
        typename Subjective

    Aliased Type:
        Subjective&

    Description:
        Reference type template.  Increases the legibility of array and function
        reference parameter definitions where type and identifier both appear.

        
::location::Positive (struct)

    Template Parameters:
        typename Subjective

    Members:
        Locational< Subjective >
            at
            
    Description:

        Single location type struct template.  Useful when possibly returning a
        function pointer from a function, syntactically preventing directly 
        chained function invocations.

        Subjective:  Type of the subject at location.
        
        at:  Location of the subject.


::location::Conferential (struct)

    Template Parameters:
        typename Subjective

    Members:
        Referential< Subjective >
            to
            
    Description:

        Single reference type struct template.  Useful when possibly returning a
        function reference from a function, syntactically preventing directly 
        chained function invocations.

        Subjective:  Type of the subject to reference.
        
        to:  Reference to the subject.


                               FUNCTION TEMPLATES


::location::Locate

    Template Parameters:
        typename Subjective

    Return Type:
        Positive< Subjective >

    Parameters:
        Referential< Subjective >
            subject
            
    Description:
        Given a reference to a subjective type subject, returns a positive
        location of the subject.  Makes order of operations syntactically 
        clearer when compared to it's equivalent operator syntax.  Also useful
        when writing functions templates which may return function pointers, 
        syntactically preventing directly chained function invocations.


::location::Confer

    Template Parameters:
        typename Subjective

    Return Type:
        Conferential< Subjective >

    Parameters:
        Referential< Subjective >
            subject
            
    Description:
        Given a reference to a subjective type subject, returns a conferential
        reference to the subject.  Useful when writing function templates which 
        may return function references, syntactically preventing directly 
        chained function invocations.


::location::Defer

    Template Parameters:
        typename Subjective

    Return Type:
        Conferential< const Subjective >

    Parameters:
        Referential< Subjective >
            subject
            
    Description:
         Given a reference to a subjective type subject, returns a conferential
         reference to the subject as a constant.  Useful when writing function
         templates which may return constant data references or function
         references, syntactically preventing directly chained function 
         invocations.


::location::Refer

    Template Parameters:
        typename Subjective

    Return Type:
        Conferential< Subjective >

    Parameters:
        Locational< Subjective >
            location
            
    Description:
        Given a subjective type memory location, returns a conferential
        reference to the subject.  Makes order of operations syntactically 
        clearer when compared to it's equivalent operator syntax, syntactically
        preventing directly chained function invocations.


--------------------------------------------------------------------------------


                                   Allocation


                                    NAMESPACE


::allocation


                                TYPE TEMPLATES


::allocation::Allocative (struct)

    Template Parameters:
        typename Claimable
        typename Disclaimable

    Members:
        Referential< Claimable >
            claim
        Referential< Disclaimable >
            disclaim
            
    Description:

        Allocation and deallocation function reference table type template.
        Facilitates the consistent naming of member elements for all
        allocative function reference tables.

        Claimable:  Allocation function prototype.
        Disclaimable:  Deallocation function prototype.
        
        claim:  Allocation function reference.
        disclaim:  Deallocation function reference.

        
::allocation::DefaultClaimable (prototype alias)

    Template Parameters:
        typename Subjective

    Return Type:
        void
    
    Parameter Types:
        Referential< Locational< Subjective > >

    Description:
    
        Default allocation function prototype template.  Given a reference to an
        assignable subjective type memory location, assign the resulting memory
        pointer to the location.


::allocation::DefaultDisclaimable (prototype alias)

    Template Parameters:
        typename Subjective

    Return Type:
        void
    
    Parameter Types:
        Referential< Locational< Subjective > >

    Description:

        Default deallocation function prototype template.  Given a reference to
        an assignable subjective type memory location, free the memory pointed 
        to by the location.  May or may not assign null to the location.


::allocation::ArrayClaimable (prototype alias)

    Template Parameters:
        typename Subjective
        typename Natural

    Return Type:
        void
    
    Parameter Types:
        Referential< Locational< Subjective > >
        Referential< const Natural >

    Description:

        Array allocation function prototype template.  Given a reference to an
        assignable subjective memory location type and a reference to a natural 
        integer constant element count, assign the resulting memory pointer to
        the location.


::allocation::CopyClaimable (prototype alias)

    Template Parameters:
        typename Subjective

    Return Type:
        void
    
    Parameter Types:
        Referential< Locational< Subjective > >
        Referential< const Subjective >

    Description:

        Copy allocation function prototype template.  Given a reference to an
        assignable subjective memory location type and a reference to a constant
        subject, assign the resulting pointer to initialized memory to the
        location.


::allocation::DefaultAllocative (type alias)

    Template Parameters:
        typename Subjective

    Aliased Type:
        Allocative< 
            DefaultClaimable< Subjective >, 
            DefaultDisclaimable< Subjective >
        >

    Description:
        Default allocation and default deallocation function reference table
        type template.


::allocation::ArrayAllocative (type alias)

    Template Parameters:
        typename Subjective
        typename Natural

    Aliased Type:
        Allocative<
            ArrayClaimable< Subjective, Natural >,
            DefaultDisclaimable< Subjective >
        >

    Description:
        Array allocation and default deallocation function reference table type
        template.


::allocation::CopyAllocative (type alias)

    Template Parameters:
        typename Subjective

    Aliased Type:
        Allocative<
            CopyClaimable< Subjective >,
            DefaultDisclaimable< Subjective >
        >

    Description:
        Copy allocation and default deallocation function reference table type
        template.


                               FUNCTION TEMPLATES


::allocation::New

    Template Parameters:
        typename Subjective

    Return Type:
        void

    Parameters:
        Referential< Locational< Subjective > >
            location
            
    Description:
        Given a reference to a subjective type memory location, assign the 
        memory pointer result of the new default constructor to location. 


::allocation::NewArray

    Template Parameters:
        typename Subjective
        typename Natural

    Return Type:
        void

    Parameters:
        Referential< Locational< Subjective > >
            location
        Referential< const Natural >
            count
            
    Description:
        Given a reference to a subjective memory location type and a reference
        to a natural integer constant element count, assign the memory pointer
        result of the new array constructor to location. 


::allocation::NewCopy

    Template Parameters:
        typename Subjective

    Return Type:
        void

    Parameters:
        Referential< Locational< Subjective > >
            location
        Referential< const Subjective >
            subject
            
    Description:
        Given a reference to a subjective memory location type and a reference 
        to a constant subject, assign the memory pointer result of the new copy
        constructor to location. 

        
::allocation::SetNull

    Template Parameters:
        typename Subjective

    Return Type:
        void

    Parameters:
        Referential< Locational< Subjective > >
            location
            
    Description:
        Given a reference to a subjective type memory location, assign the null
        pointer to location. 


::allocation::Delete

    Template Parameters:
        typename Subjective

    Return Type:
        void

    Parameters:
        Referential< Locational< Subjective > >
            location
            
    Description:
        Given a reference to a subjective type memory location, delete the 
        memory pointed to by location and do nothing else. 


::allocation::DeleteAndNull

    Template Parameters:
        typename Subjective

    Return Type:
        void

    Parameters:
        Referential< Locational< Subjective > >
            location
            
    Description:
        Given a reference to a subjective type memory location, delete the
        memory pointed to by location and assign the null pointer to location. 


::allocation::DeleteArray

    Template Parameters:
        typename Subjective

    Return Type:
        void

    Parameters:
        Referential< Locational< Subjective > >
            location
            
    Description:
        Given a reference to a subjective type memory location, delete the array
        in memory pointed to by location and do nothing else. 


::allocation::DeleteArrayAndNull

    Template Parameters:
        typename Subjective

    Return Type:
        void

    Parameters:
        Referential< Locational< Subjective > >
            location
            
    Description:
        Given a reference to a subjective type memory location, delete the array
        in memory pointed to by location and assign the null pointer to 
        location. 

        
                               VARIABLE TEMPLATES

::allocation::DefaultNew

    Template Parameters:
        typename Subjective

    Type:
        DefaultAllocative< Subjective >

    Description:
        New default constructor allocation and delete then assign null
        deallocation function reference table.


::allocation::FastDefaultNew

    Template Parameters:
        typename Subjective

    Type:
        DefaultAllocative< Subjective >

    Description:
        New default constructor allocation and delete only deallocation function 
        reference table.

::allocation::ArrayNew

    Template Parameters:
        typename Subjective
        typename Natural

    Type:
        ArrayAllocative< Subjective, Natural >

    Description:
        New array constructor allocation and array delete then assign null
        deallocation function reference table.


::allocation::FastArrayNew

    Template Parameters:
        typename Subjective

    Type:
        ArrayAllocative< Subjective >

    Description:
        New array constructor allocation and array delete only deallocation
        function reference table.


::allocation::CopyNew

    Template Parameters:
        typename Subjective

    Type:
        CopyAllocative< Subjective >

    Description:
        New copy constructor allocation and delete then assign null deallocation
        function reference table.


::allocation::FastCopyNew

    Template Parameters:
        typename Subjective

    Type:
        CopyAllocative< Subjective >

    Description:
        New copy constructor allocation and delete only deallocation function
        reference table.


                                    NAMESPACE


::allocation::stdlib


                               FUNCTION TEMPLATES


::allocation::stdlib::Malloc

    Template Parameters:
        typename Subjective

    Return Type:
        void

    Parameters:
        Referential< Locational< Subjective > >
            location
            
    Description:
        Given a reference to a subjective type memory location, assign the 
        memory pointer result of an invocation of malloc to location. 


::allocation::stdlib::Calloc

    Template Parameters:
        typename Subjective

    Return Type:
        void

    Parameters:
        Referential< Locational< Subjective > >
            location
        Referential< const Natural >
            count
            
    Description:
        Given a reference to a subjective type memory location, assign the 
        memory pointer result of an invocation of calloc to location. 
    

::allocation::stdlib::Free

    Template Parameters:
        typename Subjective

    Return Type:
        void

    Parameters:
        Referential< Locational< Subjective > >
            location
            
    Description:
        Given a reference to a subjective type memory location, free the memory
        pointed to by location and do nothing else. 


::allocation::stdlib::FreeAndNull

    Template Parameters:
        typename Subjective

    Return Type:
        void

    Parameters:
        Referential< Locational< Subjective > >
            location
            
    Description:
        Given a reference to a subjective type memory location, free the memory
        at location then assign the null pointer to location. 


                               VARIABLE TEMPLATES


::allocation::stdlib::DefaultMalloc

    Template Parameters:
        typename Subjective

    Type:
        DefaultAllocative< Subjective >

    Description:
        Malloc allocation and free then null assignment deallocation function
        reference table.        


::allocation::stdlib::FastDefaultMalloc

    Template Parameters:
        typename Subjective

    Type:
        DefaultAllocative< Subjective >

    Description:
        Malloc allocation and free only deallocation function reference table.        
           

::allocation::stdlib::ArrayCalloc

    Template Parameters:
        typename Subjective
        typename Natural

    Type:
        ArrayAllocative< Subjective, Natural >

    Description:
        Calloc allocation and free then null assignment deallocation function
        reference table.        
           

::allocation::stdlib::FastArrayCalloc

    Template Parameters:
        typename Subjective
        typename Natural

    Type:
        ArrayAllocative< Subjective, Natural >

    Description:
        Calloc allocation and free only deallocation function reference table.        


--------------------------------------------------------------------------------


                                   Trajection

                                    NAMESPACE


::trajection

                                TYPE TEMPLATES


::trajection::Reachable (prototype alias)

    Template Parameters:
        typename Spatial

    Return Type:
        bool
    
    Parameter Types:
        Referential< const Spatial >

    Description:
    
        Space reachable determination function prototype template.  Given a
        reference to a spatial type space, return true if at least one position
        can be reached in the context of trajection through that space.


::trajection::Traversable (prototype alias)

    Template Parameters:
        typename Spatial
        typename Positional

    Return Type:
        bool
    
    Parameter Types:
        Referential< const Spatial >
        Referential< const Positional >

    Description:
    
        Position traversable determination function prototype template.  Given a 
        reference to a spatial type constant space and a reference to a
        positional type constant position, return true if the position can be
        traversed in the context of trajection through that space.


::trajection::Trajectile (prototype alias)

    Template Parameters:
        typename Spatial
        typename Positional

    Return Type:
        Referential< const Positional >
    
    Parameter Types:
        Referential< Spatial >
        Referential< Positional >

    Description:
    
        Spatial trajection function prototype template.  Given a reference to a
        spatial type space and a reference to a positional type position,
        assign or modify the position according to the context of trajection
        and return a reference to the position as a constant.


::trajection::Expositive (prototype alias)

    Template Parameters:
        typename Spatial
        typename Positional
        typename Endemical

    Return Type:
        Conferential< Endemical >
    
    Parameter Types:
        Referential< Spatial >
        Referential< const Positional >

    Description:
    
        Subspace exposition function prototype template.  Given a reference to a
        spatial type space and a reference to a positional type constant
        position, return a conferment reference to the endemical type subspace
        found at position.


::trajection::Vectorial (struct)

    Template Parameters:
        typename Spatial
        typename Positional
        typename Endemical

    Members:
        Referential< Traversable< Spatial, Positional > >
            contains
        Referential< Expositive< Spatial, Positional, Endemical > >
            go

    Description:
    
        Vectorial trajection function reference table type template.
        Supports direct trajectories to positions in spaces.

        Spatial:  Type of the spaces being traversed.
        Positional:  Type of the vectorial positions.  Relational operator 
                     support is not required. 
        Endemical:  Type of the subspaces in the space.
        
        contains:  Verify if a position exists in a given space.
        go:  Expose the subspace at position in the given space.


::trajection::Scalar (struct)

    Template Parameters:
        typename Spatial
        typename Positional
        typename Endemical

    Members:
        Referential< Trajectile< Spatial, Positional > >
            begin
            traverse
        Referential< Expositive< Spatial, Positional, Endemical > >
            go

    Description:
    
        Scalar trajection function reference table type template.
        Supports sequential trajectories to positions in spaces.

        Spatial:  Type of the spaces being traversed.
        Positional:  Type of the scalar positions.  Relational operators must be
                     supported by this type.
        Endemical:  Type of the subspaces in the space.
        
        begin:  Assigns the first position in the given space. 
        traverse:  Assigns subsequent positions relative to position in the
                   given space.
        go:  Expose the subspace at position in the given space.


::trajection::Lineal (struct)

    Template Parameters:
        typename Spatial
        typename Positional
        typename Endemical

    Members:
        Referential< const Scalar< Spatial, Positional, Endemical > >
            increment
            decrement

    Description:
    
        Lineal trajection function reference table type template.
        Supports invertible sequential trajectories to positions in spaces.

        Spatial:  Type of the spaces being traversed.
        Positional:  Type of the scalar positions.  Relational operators must be
                     supported by this type.
        Endemical:  Type of the subspaces in the space.
        
        increment:  Incremental scalar function reference table.
        decrement:  Decremental scalar function reference table.


::trajection::Directional (struct)

    Template Parameters:
        typename Spatial
        typename Positional
        typename Endemical

    Members:
        Referential< const Scalar< Spatial, Positional, Endemical > >
            scale
        Referential< Reachable< Spatial > >
            direction
        Referential< Traversable< Spatial, Positional > >
            traversable
        Referential< Traversable< Spatial, Positional > >
            contains

    Description:
    
        Directional trajection function reference table type template.
        Supports determinate sequential trajectories to positions in spaces.

        Spatial:  Type of the spaces being traversed.
        Positional:  Type of the scalar positions.  Relational operators must be
                     supported by this type.
        Endemical:  Type of the subspaces in the space.
        
        scale:  Reference to scalar trajection function reference table. 
        begins:  Verifies if there is at least one position along this
                 directional trajectory through the given space.
        traversable:  Verifies if there is a subsequent position from the
                      position's given state along this directional trajectory
                      through the given space.
        contains:  Verify if a position exists along this directional trajectory
                   through the given space.


::trajection::Axial (struct)

    Template Parameters:
        typename Spatial
        typename Positional
        typename Endemical

    Members:
        Referential< const Directional< Spatial, Positional, Endemical > >
            increment
            decrement

    Description:
    
        Axial trajection function reference table type template.
        Supports determinate invertible sequential trajectories to positions in 
        spaces.

        Spatial:  Type of the spaces being traversed.
        Positional:  Type of the scalar positions.  Relational operators must be
                     supported by this type.
        Endemical:  Type of the subspaces in the space.
        
        increment:  Incremental directional function reference table.
        decrement:  Decremental directional function reference table.


                               FUNCTION TEMPLATES


::trajection::Count

    Template Parameters:
        typename Spatial
        typename Positional
        typename Endemical
        typename Natural

    Return Type:
        bool

    Parameters:
        Referential< Spatial >
            space
        Referential< const Directional< Spatial, Positional, Endemical > >
            direction
        Referential< Positional >
            position
        Referential< Natural >
            count
            
    Description:
        Given a reference to a spatial type space, a reference to a directional
        type constant direction, a reference to a positional type position and
        a reference to a natural integer count, assign the number of elements
        along the direction of travel to count and returns true if at least one
        position was reached.


::trajection::Count (overload)

    Template Parameters:
        typename Spatial
        typename Positional
        typename Endemical
        typename Natural
        Referential< const Directional< Spatial, Positional, Endemical > >
            Direction

    Return Type:
        bool

    Parameters:
        Referential< Spatial >
            space
        Referential< const Directional< Spatial, Positional, Endemical > >
            direction
        Referential< Positional >
            position
        Referential< Natural >
            count
            
    Description:
        Given a reference to a directional type constexpr direction specifier,
        a reference to a spatial type space, a reference to a positional type
        position and a reference to a natural integer count, assign the numbers
        of elements along the direction of travel to count and returns true if
        at least one position was reached.


--------------------------------------------------------------------------------


                                    Sortation


                                    NAMESPACE


::sortation


                                TYPE TEMPLATES


::sortation::Assortive (prototype alias)

    Template Parameters:
        typename Evaluative

    Return Type:
        bool
    
    Parameter Types:
        Referential< const Evaluative >
        Referential< const Evaluative >

    Description:
    
        Sortation function prototype template.  Given two respective references
        to evaluative constant values, return true if the semantic context of
        sortation is correct.


                               FUNCTION TEMPLATES


::sortation::SearchLinearly

    Template Parameters:
        typename Consolidative
        typename Positional
        typename Evaluative
        Referential< Assortive< Evaluative > >
            Balanced

    Return Type:
        bool

    Parameters:
        Referential< const Consolidative >
            consolidation
        Referential< const Directional< const Consolidative, Positional, const Evaluative > >
            direction
        Referential< const Evaluative >
            value
        Referential< Positional >
            position
            
    Description:
         Given a reference to an assortive prototype balanced values evaluator
         function specifier, a reference to a consolidative type consolidation,
         a reference to a directional type constant direction, a reference to an
         evaluative constant value and a reference to a positional type
         position, returns true if value is found in the consolidative space.
         Makes use of the linear search algorithm, visiting each position in the
         direction of travel and verifying value equivalence at each position.


::sortation::SearchLinearly

    Template Parameters:
        typename Consolidative
        typename Positional
        typename Evaluative
        Referential< Assortive< Evaluative > >
            Balanced
        Referential< const Directional< const Consolidative, Positional, const Evaluative > >
            Direction

    Return Type:
        bool

    Parameters:
        Referential< const Consolidative >
            consolidation
        Referential< const Evaluative >
            value
        Referential< Positional >
            position
            
    Description:
         Given a reference to an assortive prototype balanced values evaluator
         function specifier, a reference to a directional type constexpr 
         direction specifier, a reference to a consolidative type consolidation,
         a reference to an evaluative constant value and a reference to a 
         positional type position, returns true if value is found in the
         consolidative space.  Makes use of the linear search algorithm,
         visiting each position in the direction of travel and verifying value
         equivalence at each position.


::sortation::SearchBisectionally

    Template Parameters:
        typename Consolidative
        typename Positional
        typename Natural
        typename Evaluative
        Referential< Assortive< Evaluative > >
            Balanced
        Referential< Assortive< Evaluative > >
            Sorted

    Return Type:
        bool

    Parameters:
        Referential< const Consolidative >
            consolidation
        Referential< const Axial< const Consolidative, Positional, const Evaluative > >
            axis
        Referential< const Natural >
            count
        Referential< const Evaluative >
            value
        Referential< Positional >
            position
            
    Description:
         Given a reference to an assortive prototype balanced values evaluator
         function specifier, a reference to an assortive prototype sorted values
         evaluator specifier, a reference to a consolidative type consolidation,
         a reference to an axial type constant axis, a reference to a natural
         integer constant count, a reference to an evaluative type constant
         value and a reference to a positional type position, returns true if 
         value is found in the consolidative space.  Makes use of the linear
         search algorithm, visiting each position in the direction of travel and
         verifying value equivalence at each position.


::sortation::SearchBisectionally

    Template Parameters:
        typename Consolidative
        typename Positional
        typename Natural
        typename Evaluative
        Referential< const Axial< const Consolidative, Positional, const Evaluative > >
            Axis
        Referential< Assortive< Evaluative > >
            Balanced
        Referential< Assortive< Evaluative > >
            Sorted

    Return Type:
        bool

    Parameters:
        Referential< const Consolidative >
            consolidation
        Referential< const Natural >
            count
        Referential< const Evaluative >
            value
        Referential< Positional >
            position
            
    Description:
         Given a reference to an assortive prototype balanced values evaluator
         function specifier, a reference to an assortive prototype sorted values
         evaluator specifier, a reference to an axial type constexpr axis
         specifier, a reference to a consolidative type consolidation, a 
         reference to a natural integer constant count, a reference to an 
         evaluative type constant value and a reference to a positional type 
         position, returns true if value is found in the consolidative space.  
         Makes use of the linear search algorithm, visiting each position in the
         direction of travel and verifying value equivalence at each position.


--------------------------------------------------------------------------------


                                   Consecution


                                    NAMESPACE


::consecution


                                TYPE TEMPLATES


::consecution::Subsequent (struct)

    Template Parameters:
        typename Consolidative
        typename Positional
        typename Relative
        typename Appositional
        typename Elemental

    Members:
        Referential< bool(
			Referential< Consolidative >,
			Referential< const Directional< const Relative, Appositional, const Elemental > >,
			Referential< const Relative >,
			Referential< const Appositional >,
			Referential< const Appositional >
        ) >
            accede
        Referential< bool(
			Referential< Consolidative >,
			Referential< const Positional >,
			Referential< const Directional< const Relative, Appositional, const Elemental > >,
			Referential< const Relative >,
			Referential< const Appositional >,
			Referential< const Appositional >
		) >
            precede
        Referential< bool(
            Referential< Consolidative >,
            Referential< const Directional< const Relative, Appositional, const Elemental > >,
            Referential< const Relative >,
            Referential< const Appositional >,
            Referential< const Appositional >
        ) >
            proceed

    Description:
    
        Sequence batch operations function reference table type template.
        Supports adding zero or more elements from a relative space, which may
        differ from the consolidative space.  Useful when adding multiple
        elements from an array into a linked list in generic programming
        circumstances, for example.

        Consolidative:  Type of the consolidated sequence.
        Positional:  Type of the consolidative sequence's position.
        Relative:  Type of the relative space to read from.
        Appositional:  Type of the relative space's position.
        Elemental:  Type of the elements in all cases.
        
        accede:  Add zero or more elements to the beginning of the
                 consolidative space.  Returns true if at least one element was
                 effectively added to the consildative space.  Appositional
                 positions are expected to be in directional order.
        precede:  Insert zero or more elements at a given position in the
                  consolidative space.  Returns true if at least one element was
                  effectively added to the consildative space.  Appositional
                  positions are expected to be in directional order.
        proceed:  Add zero or more elements to the end of the consolidative
                  space.  Returns true if at least one element was
                  effectively added to the consildative space.  Appositional
                  positions are expected to be in directional order.


::consecution::Sequent (struct)

    Template Parameters:
        typename Consolidative
        typename Positional
        typename Natural
        typename Elemental

    Members:
        Referential< bool(
            Referential< Consolidative >,
            Referential< const Natural >
        ) >
            antecede
        Referential< Natural(
            Referential< const Consolidative >
        ) >
            account
        Referential< bool(
            Referential< Consolidative >,
            Referential< const Elemental >
        ) >
            accede
        Referential< bool(
            Referential< Consolidative >,
            Referential< const Positional >,
            Referential< const Elemental >
        ) >
            precede
        Referential< bool(
            Referential< Consolidative >,
            Referential< const Elemental >
        ) >
            proceed
        Referential< bool(
            Referential< Consolidative >,
            Referential< const Natural >
        ) >
            succeed
        Referential< bool(
            Referential< Consolidative >,
            Referential< const Positional >,
            Referential< const Natural >
        ) >
            concede
        Referential< bool(
            Referential< Consolidative >,
            Referential< const Natural >
        ) >
            recede
        Referential< bool(
            Referential< Consolidative >
        ) >
            secede
        Referential< bool(
            Referential< Consolidative >
        ) >
            condense
        Referential< const Subsequent< Consolidative, Positional, Consolidative, Positional, Elemental > >
            subsequence

    Description:
    
        Sequence operations function reference table type template.
        Supports generic sequence operations, including adding or removing
        zero or more elements at the beginning, at a given position or at the 
        end of the sequence, as well as generic memory management facilities for
        the sequence.

        Consolidative:  Type of the consolidated sequence.
        Positional:  Type of the consolidative sequence's position.
        Natural:  Type of natural integer counts where required.
        Elemental:  Type of the elements in the subsequences.
        
        antecede:  Return true if and only if by the end of this function
                   called by reference, the consolidative space has
                   pre-allocated enough space to add the number of requested
                   elements to the sequence.
                   Return false if this consolidative space does not support
                   this operation.
        account:  Return the length of the sequence.
        accede:  Add one element to the beginning of the sequence,
                 return true if the operation completed successfully.
        precede:  Insert one element at a given position in the sequence, 
                  return true if the operation completed successfully.
        proceed:  Add elements to the end of the sequence, return true if the 
                  operation completed successfully.
        succeed:  Remove count elements from the beginning of the sequence,
                  return true if the operation completed successfully.  Must 
                  return false non-destructively if count is greater than the 
                  length of the sequence.
        concede:  Remove count elements from the given position in the sequence,
                  return true if the operation completed successfully.  Must
                  return false non-destructively if count is greater than the
                  numbers of elements available beginning with the given 
                  position.
        recede:  Remove count elements from the end of the sequence, return true
                 if the operation completed successfully.  Must return false
                 non-destructively if count is greater than the length of the
                 sequence.
        secede:  Remove all elements which may exist in the sequence, return 
                 true if and only if at least one element existed and the 
                 sequence is now empty (0 length).
        condense:  Return true if and only if this reentrant memory deallocation
                   function has more work to process after this call.  Return 
                   false if this consolidative space does not support this
                   operation.

        subsequence:  Subsequent batch operation function reference table which
                      can only read from another consolidative type space.


--------------------------------------------------------------------------------


                                   Composition


                                    NAMESPACE


::composition


                                TYPE TEMPLATES

::composition::Compositional (struct)

    Template Parameters:
        typename Consolidative
        typename Natural
        typename Elemental

    Members:
        Referential< bool(
			Referential< Consolidative >,
			Referential< const Natural >
        ) >
            precompose
        Referential< bool(
			Referential< const Consolidative >,
			Referential< const Elemental  >
		) >
            accredit
        Referential< bool(
			Referential< Consolidative >,
			Referential< const Elemental  >
		) >
            compose
        Referential< bool(
			Referential< Consolidative >,
			Referential< const Elemental  >,
			Referential< const Elemental  >
		) >
            recompose
        Referential< bool(
			Referential< Consolidative >,
			Referential< const Elemental  >
		) >
            discompose
        Referential< bool(
			Referential< Consolidative >
		) >
            decompose
        Referential< bool(
			Referential< Consolidative >
		) >
            dispose

    Description:
    
        Composition operations function reference table type template.
        Supports generic composition operations, including composing, 
        accrediting, recomposing, discomposing and decomposing elements in 
        compositions, as well as generic memory management facilities for the 
        composition.  There are no semantic expectations regarding uniqueness of
        compositional elements, nor regarding individuality of element
        composition regarding the compose, recompose or discompose operations. 

        Consolidative:  Type of the consolidated composition.
        Natural:  Type of the natural integer counts where required.
        Elemental:  Type of the elements in the composition.
        
        precompose:  Return true if and only if by the end of this function
                     called by reference, the consolidative space has
                     pre-allocated enough space to add elements to the 
                     composition if compose was subsequently called this number   
                     of times.  Return false if this consolidative space does 
                     not support this operation.
        accredit:  Return true if this composition contains this element.
        compose:  Return true if adding this element has meaningfully altered 
                  the composition.
        recompose:  Return true if substituting one element for another has
                    meaningfully altered the composition.
        discompose:  Return true if removing this element has meaningfully
                     altered the composition.
        decompose:  Return true if and only if clearing the composition has
                    meaningfully altered the composition.
        dispose:  Return true if and only if this reentrant memory deallocation
                  function has more work to process after this call.  Return 
                  false if this consolidative space does not support this
                  operation.


--------------------------------------------------------------------------------


                                   Selection


                                    NAMESPACE


::selection


                                TYPE TEMPLATES


::selection::Sectional (struct)

    Template Parameters:
        typename Consolidative
        typename Basic
        typename Positional
        typename Relative
        typename Oppositional
        typename Elemental

    Members:
        Referential< bool(
            Referential< Consolidative >,
            Referential< const Directional< const Basic, Positional, const Elemental > >,
            Referential< const Basic >,
            Referential< const Directional< const Relative, Oppositional, const Elemental > >,
            Referential< const Relative >
        ) >
            complement
            differentiate
            intersect
            unite

    Description:
    
        Unsorted set on set operations function reference table type template.
        Supports generic set on set operations into consolidative type sets.
        Duplicate elements must not exist in any set.  Useful when the base or
        relative sets are not the same type as the consolidative set.  Also 
        useful when the base and relative sets are not in the same sorted order 
        as the consolidative set or the consolidative set itself is unsorted.

        Consolidative:  Type of the consolidated set.
        Basic:  Type of the base set.
        Positional:  Type of the base set position.
        Relative:  Type of the relative set.
        Oppositional:  Type of the relative set position.
        Elemental:  Type of the elements in the sets.
        
        complement:  Empty the consolidative set and compose into it the 
                     relative complement (or difference of sets) of a base set
                     with respect to relative set.  Return true if the operation
                     completed successfully, even if the consolidative set is 
                     empty.
        differentiate:  Compose the symmetric difference (or disjunctive union)
                        of a base and relative set.  Return true if the
                        operation completed successfully, even if the
                        consolidative set is empty.
        intersect:  Empty the consolidative set and compose into it the 
                    intersection of a base and relative set.  Return true if the 
                    operation completed successfully, even if the consolidative 
                    set is empty.
        unite:  Empty the consolidative set and compose into it the union of
                a base and relative set.  Return true if the operation completed
                successfully, even if the consolidative set is empty.


::selection::Selective (struct)

    Template Parameters:
        typename Consolidative
        typename Positional
        typename Natural
        typename Elemental

    Members:
        Referential< const Compositional< Consolidative, Natural, Elemental > >
            composer
        Referential< const Sectional< Consolidative, Consolidative, Positional, Consolidative, Positional, Elemental > >
            section
        Referential< bool(
            Referential< const Directional< const Consolidative, Positional, const Elemental > >,
            Referential< const Consolidative >,
            Referential< const Directional< const Consolidative, Positional, const Elemental > >,
            Referential< const Consolidative >
        ) >
            equate
        Referential< Natural( 
        	Referential< const Consolidative > 
        ) >
            count

    Description:
    
        Set operations function reference table type template.
        Supports generic elementary and set on set operations on consolidative 
        type sets.

        Consolidative:  Type of the consolidated set.
        Positional:  Type of the consolidative set position.
        Natural:  Type of the natural integer counts where required.
        Elemental:  Type of the elements in the sets.
        
        composer:  The composer must not allow duplicate elements in the set.  
                   If compose is called and the element already exists in the
                   set, it should return false.  If recompose is called and the 
                   replacement element already exists in the set, it should 
                   return false without removing the original element from the 
                   set.
        section:  Sectional set on set operation function reference table which 
                  can only read from another consolidative type space.  See
                  the Sectional description above.
        equate:  Return true if both sets contain the same elements.
        count:  Return the count of elements in the set.


                               FUNCTION TEMPLATES


::selection::EquateSelections

    Template Parameters:
        typename Basic
        typename BasicPositional
        typename Relative
        typename RelativePositional
        typename Natural
        typename Elemental
        Referential< Assortive< Elemental > >
            Balanced

    Return Type:
        bool

    Parameters:
        Referential< const Directional< const Basic, BasicPositional, const Elemental > >
            basis
        Referential< const Basic >
            base_set
        Referential< const Directional< const Relative, RelativePositional, const Elemental > >
            relativity
        Referential< const Relative >
            relative_set
            
    Description:
        Returns true if both sets contain the same elements.  Also returns true
        if both sets are empty, false if one is empty and the other is not.


--------------------------------------------------------------------------------


                                   Collection


                                    NAMESPACE


::collection


                                TYPE TEMPLATES


::collection::Bisectional (struct)

    Template Parameters:
        typename Consolidative
        typename Basic
        typename Positional
        typename Relative
        typename Oppositional
        typename Elemental

    Members:
        Referential< bool(
            Referential< Consolidative >,
            Referential< const Axial< const Basic, Positional, const Elemental > >,
            Referential< const Basic >,
            Referential< const Axial< const Relative, Oppositional, const Elemental > >,
            Referential< const Relative >
        ) >
            complement
            differentiate
            intersect
            unite

    Description:
    
        Sorted set operations function reference table type template.
        Supports generic operations on consolidative type sets.  Duplicate
        elements must not exist in any set.  Should only be used if all three
        sets are in the same sortation order.

        Consolidative:  Type of the consolidated set.
        Basic:  Type of the base set.
        Positional:  Type of the base set position.
        Relative:  Type of the relative set.
        Oppositional:  Type of the relative set position.
        Elemental:  Type of the elements in the sets.
        
        complement:  Empty the consolidative set and compose into it the 
                     relative complement (or difference of sets) of a base set
                     with respect to relative set.  Return true if the operation
                     completed successfully, even if the consolidative set is 
                     empty.
        differentiate:  Compose the symmetric difference (or disjunctive union)
                        of a base and relative set.  Return true if the
                        operation completed successfully, even if the
                        consolidative set is empty.
        intersect:  Empty the consolidative set and compose into it the 
                    intersection of a base and relative set.  Return true if the 
                    operation completed successfully, even if the consolidative 
                    set is empty.
        unite:  Empty the consolidative set and compose into it the union of
                a base and relative set.  Return true if the operation completed
                successfully, even if the consolidative set is empty.

                
::collection::Collective (struct)

    Template Parameters:
        typename Consolidative
        typename Positional
        typename Natural
        typename Elemental

    Members:
        Referential< const Selective< Consolidative, Positional, Natural, Elemental > >
            selector
        Referential< const Bisectional< Consolidative, Consolidative, Positional, Consolidative, Positional, Elemental > >
            bisection

    Description:
    
        Sorted set operations function reference table type template.
        Supports generic elementary and set on set operations on consolidative 
        type sorted sets.

        Consolidative:  Type of the consolidated set.
        Positional:  Type of the consolidative set position.
        Natural:  Type of the natural integer counts where required.
        Elemental:  Type of the elements in the sets.
        
        selector:  The selector must enforce semantic expectations as documented
                   in the selection documentation above.  The section table must
                   be capable of performing set on set operations with base and
                   relative sets which are not in the same sortation order as
                   the sorted set collection.
        bisection:  Bisectional set on set operation function reference table 
                    which can only read from another consolidative type space.
                    See the Bisectional description above.


::selection::EquateSelections

    Template Parameters:
        typename Basic
        typename BasicPositional
        typename Relative
        typename RelativePositional
        typename Natural
        typename Elemental
        Referential< Assortive< Elemental > >
            Balanced
        Referential< Assortive< Elemental > >
            Sorted

    Return Type:
        bool

    Parameters:
        Referential< const Axial< const Basic, BasicPositional, const Elemental > >
            basis
        Referential< const Basic >
            base_set
        Referential< const Axial< const Relative, RelativePositional, const Elemental > >
            relativity
        Referential< const Relative >
            relative_set
            
    Description:
        Returns true if both sets contain the same elements.  Also returns true
        if both sets are empty, false if one is empty and the other is not.


--------------------------------------------------------------------------------


                                   Association


                                    NAMESPACE


::association


                                TYPE TEMPLATES


::association::Associative (struct)

    Template Parameters:
        typename Consolidative
        typename Natural
        typename Correlative
        typename Evaluative

    Members:
        Referential< bool(
            Referential< Consolidative >,
            Referential< const Natural >
        ) >
            prepare
        Referential< Natural(
            Referential< const Consolidative >
        ) >
            grade
        Referential< bool(
            Referential< const Consolidative >,
            Referential< const Correlative >
        ) >
            correspond
        Referential< bool(
            Referential< Consolidative >,
            Referential< const Correlative >,
            Referential< const Evaluative >
        ) >
            associate
        Referential< bool(
            Referential< Consolidative >,
            Referential< const Correlative >,
            Referential< const Correlative >
        ) >
            reassociate
        Referential< bool(
            Referential< Consolidative >,
            Referential< const Correlative >
        ) >
            disassociate
        Referential< bool(
            Referential< Consolidative >
        ) >
            disband
        Referential< bool(
            Referential< Consolidative >
        ) >
            dissolve

    Description:
    
        Associative map operations function reference table type template.
        Supports generic association operations, including associating, 
        corresponding, reassociationg, disassociating and disbanding
        associations, as well as generic memory management facilities for the 
        association.  If associate is called and the relator (key) already 
        exists in the map, it should return false.  If reassociate is called and 
        the replacement relator already exists in the set, it should return 
        false without removing the association from the map. 

        Consolidative:  Type of the consolidated association.
        Natural:  Type of the natural integer counts where required.
        Correlative:  Type of the relators (keys) in the association.
        Evaluative:  Type of the values in the key-value association.
        
        prepare:  Return true if and only if by the end of this function called 
                  by reference, the consolidative space has pre-allocated enough 
                  space to add key-value pairs to the association if associate
                  was subsequently called this number of times.  Return false if
                  this consolidative space does not support this operation.
        grade:  Return the number of key-value associations in the associative 
                mapping.
        correspond:  Return true if this association contains this relator.
        associate:  Return true if adding this pairing has meaningfully 
                    altered the association.
        reassociate:  Return true if substituting one element for another has
                      meaningfully altered the association.
        disassociate:  Return true if removing this element has meaningfully
                       altered the composition.
        disband:  Return true if and only if clearing the composition has
                  meaningfully altered the composition.
        dissolve:  Return true if and only if this reentrant memory deallocation
                   function has more work to process after this call.  Return 
                   false if this consolidative space does not support this
                   operation.


::association::Associative (struct)

    Template Parameters:
        typename Correlative
        typename Evaluative

    Members:
        Correlative
            relator
        Evaluative
            value

    Description:
        Associational relator-value pairing type template.  Made available for
        convenience, though not necessary in implementing the associative
        map operations table.


--------------------------------------------------------------------------------


                                   Localization


                                    NAMESPACE


::localization


                               FUNCTION TEMPLATES


::localization::PositionalGo

    Template Parameters:
        typename Elemental

    Return Type:
        Conferential< Elemental >

    Parameters:
        Referential< const Locational< Elemental > >
            location
        Referential< const Locational< Elemental > >
            position
            
    Description:
        Returns the elemental subspace located at position.  Implements the "go"
        member for pointer location based scalar trajection.


::localization::PositionalGoChecksForNull

    Template Parameters:
        typename Elemental

    Return Type:
        Conferential< Elemental >

    Parameters:
        Referential< const Locational< Elemental > >
            location
        Referential< const Locational< Elemental > >
            position
            
    Description:
        Throws position if it is null.  Returns the elemental subspace located 
        at position.  Implements the "go" member for pointer location based 
        scalar trajection.


::localization::Begin

    Template Parameters:
        typename Elemental

    Return Type:
        Referential< const Locational< Elemental > >

    Parameters:
        Referential< const Locational< Elemental > >
            location
        Referential< Locational< Elemental > >
            position
            
    Description:
        Assigns location to position.  Returns a reference to position as a 
        constant.  Implements the "begin" member for pointer location based 
        scalar trajection.


::localization::BeginChecksForNull

    Template Parameters:
        typename Elemental

    Return Type:
        Referential< const Locational< Elemental > >

    Parameters:
        Referential< const Locational< Elemental > >
            location
        Referential< Locational< Elemental > >
            position
            
    Description:
        Throws location if it is null.  Assigns location to position. Returns a 
        reference to position as a constant.  Implements the "begin" member for 
        pointer location based scalar trajection.


::localization::TraverseIncrement

    Template Parameters:
        typename Elemental

    Return Type:
        Referential< const Locational< Elemental > >

    Parameters:
        Referential< const Locational< Elemental > >
            location
        Referential< Locational< Elemental > >
            position
            
    Description:
        Increments position then returns a reference to position as a constant.  
        Implements the "traverse" member for pointer location based scalar 
        trajection.


::localization::TraverseIncrementChecksForNull

    Template Parameters:
        typename Elemental

    Return Type:
        Referential< const Locational< Elemental > >

    Parameters:
        Referential< const Locational< Elemental > >
            location
        Referential< Locational< Elemental > >
            position
            
    Description:
        Throws position if it is null.  Increments position then returns a 
        reference to position as a constant. Implements the "traverse" member 
        for pointer location based scalar trajection.


::localization::TraverseDecrement

    Template Parameters:
        typename Elemental

    Return Type:
        Referential< const Locational< Elemental > >

    Parameters:
        Referential< const Locational< Elemental > >
            location
        Referential< Locational< Elemental > >
            position
            
    Description:
        Decrements position then returns a reference to position as a constant.  
        Implements the "traverse" member for pointer location based scalar 
        trajection.


::localization::TraverseDecrementChecksForNull

    Template Parameters:
        typename Elemental

    Return Type:
        Referential< const Locational< Elemental > >

    Parameters:
        Referential< const Locational< Elemental > >
            location
        Referential< Locational< Elemental > >
            position
            
    Description:
        Throws position if it is null.  Decrements position then returns a 
        reference to position as a constant. Implements the "traverse" member 
        for pointer location based scalar trajection.


                               VARIABLE TEMPLATES
                               

::localization::ReadIncrementScale

    Template Parameters:
        typename Elemental

    Type:
        Scalar< const Locational< const Elemental >, Locational< const Elemental >, const Elemental >

    Description:
        Increment scale trajection from a pointer location function reference 
        table.  Returns references to constant elements.


::localization::ReadIncrementScaleChecksForNull

    Template Parameters:
        typename Elemental

    Type:
        Scalar< const Locational< const Elemental >, Locational< const Elemental >, const Elemental >

    Description:
        Increment scale trajection from a pointer location function reference 
        table.  Throws null pointers before any operators are applied.  Returns 
        references to constant elements.  


::localization::WriteIncrementScale

    Template Parameters:
        typename Elemental

    Type:
        Scalar< const Locational< const Elemental >, Locational< const Elemental >, const Elemental >

    Description:
        Increment scale trajection from a pointer location function reference 
        table.  Returns references to modifiable elements.


::localization::WriteIncrementScaleChecksForNull

    Template Parameters:
        typename Elemental

    Type:
        Scalar< const Locational< const Elemental >, Locational< const Elemental >, const Elemental >

    Description:
        Increment scale trajection from a pointer location function reference 
        table.  Throws null pointers before any operators are applied.  Returns 
        references to modifiable elements.


::localization::ReadDecrementScale

    Template Parameters:
        typename Elemental

    Type:
        Scalar< const Locational< const Elemental >, Locational< const Elemental >, const Elemental >

    Description:
        Decrement scale trajection from a pointer location function reference 
        table.  Returns references to constant elements.
        NOTE:  Starts at pointer location, moves in decrement direction.


::localization::ReadDecrementScaleChecksForNull

    Template Parameters:
        typename Elemental

    Type:
        Scalar< const Locational< const Elemental >, Locational< const Elemental >, const Elemental >

    Description:
        Decrement scale trajection from a pointer location function reference 
        table.  Throws null pointers before any operators are applied.  Returns 
        references to constant elements.  
        NOTE:  Starts at pointer location, moves in decrement direction.

::localization::WriteDecrementScale

    Template Parameters:
        typename Elemental

    Type:
        Scalar< const Locational< const Elemental >, Locational< const Elemental >, const Elemental >

    Description:
        Decrement scale trajection from a pointer location function reference 
        table.  Returns references to modifiable elements.


::localization::WriteDecrementScaleChecksForNull

    Template Parameters:
        typename Elemental

    Type:
        Scalar< const Locational< const Elemental >, Locational< const Elemental >, const Elemental >

    Description:
        Decrement scale trajection from a pointer location function reference 
        table.  Throws null pointers before any operators are applied.  Returns 
        references to modifiable elements.


::localization::ReadLiner

    Template Parameters:
        typename Elemental

    Type:
        Lineal< const Locational< const Elemental >, Locational< const Elemental >, const Elemental >

    Description:
        Increment and decrement trajection from a pointer location function
        reference table.  Returns references to elements as constants.


::localization::ReadLinerChecksForNull

    Template Parameters:
        typename Elemental

    Type:
        Lineal< const Locational< const Elemental >, Locational< const Elemental >, const Elemental >

    Description:
        Increment and decrement trajection from a pointer location function
        reference table.  Throws null pointers before applying any operators.  
        Returns references to elements as constants.


::localization::WriteLiner

    Template Parameters:
        typename Elemental

    Type:
        Lineal< const Locational< const Elemental >, Locational< const Elemental >, const Elemental >

    Description:
        Increment and decrement trajection from a pointer location function
        reference table.  Returns references to modifiable elements.


::localization::WriteLinerChecksForNull

    Template Parameters:
        typename Elemental

    Type:
        Lineal< const Locational< const Elemental >, Locational< const Elemental >, const Elemental >

    Description:
        Increment and decrement trajection from a pointer location function
        reference table.  Throws null pointers before any applied operators.
        Returns references to modifiable elements.


--------------------------------------------------------------------------------


                                  Segmentation


                                    NAMESPACE


::segmentation


                               FUNCTION TEMPLATES


::segmentation::ContainsIndex

    Template Parameters:
        typename Indexical
        Indexical Length
        typename Elemental

    Return Type:
        bool

    Parameters:
        Referential< const Locational< Elemental > >
            location
        Referential< const Indexical >
            index

    Description:
        Returns true if index is within the segment.  Implements the "contains"
        member for segment location based vectorial trajection.


::segmentation::ContainsIndexChecksForNull

    Template Parameters:
        typename Indexical
        Indexical Length
        typename Elemental

    Return Type:
        bool

    Parameters:
        Referential< const Locational< Elemental > >
            location
        Referential< const Indexical >
            index

    Description:
        Throws location if it is null.  Returns true if index is within the 
        segment.  Implements the "contains" member for segment location based 
        vectorial trajection.


::segmentation::IndexicalGo

    Template Parameters:
        typename Indexical
        typename Elemental

    Return Type:
        Conferential< Elemental >

    Parameters:
        Referential< const Locational< Elemental > >
            location
        Referential< const Indexical >
            index

    Description:
        Returns the elemental subspace located at index.  Implements the "go"
        member for segment location based vectorial trajection.
        

::segmentation::IndexicalGoSafely

    Template Parameters:
        typename Indexical
        typename Elemental

    Return Type:
        Conferential< Elemental >

    Parameters:
        Referential< const Locational< Elemental > >
            location
        Referential< const Indexical >
            index

    Description:
        Throws location if it is null.  Throws index if it is out of bounds.
        Returns the elemental subspace located at index.  Implements the "go" 
        member for segment location based vectorial trajection.
        

::segmentation::ContainsPosition

    Template Parameters:
        typename Indexical
        Indexical Length
        typename Elemental

    Return Type:
        bool

    Parameters:
        Referential< const Locational< Elemental > >
            location
        Referential< const Locational< Elemental > >
            position

    Description:
        Returns true if position is within the segment. Implements the 
        "contains" member for segment location based directional trajection.


::segmentation::ContainsPositionChecksForNull

    Template Parameters:
        typename Indexical
        Indexical Length
        typename Elemental

    Return Type:
        bool

    Parameters:
        Referential< const Locational< Elemental > >
            location
        Referential< const Locational< Elemental > >
            position

    Description:
        Throws location or position if either is null.  Returns true if position
        is within the segment.  Implements the "contains" member for segment 
        location based directional trajection.


::segmentation::PositionalGoSafely

    Template Parameters:
        typename Indexical
        Indexical Length
        typename Elemental

    Return Type:
        Conferential< Elemental >

    Parameters:
        Referential< const Locational< Elemental > >
            location
        Referential< const Locational< Elemental > >
            position

    Description:
        Throws location if it is null.  Throws position if it is null or out of
        bounds.  Returns the elemental subspace located at position.  Implements 
        the "go" member for segment location based scalar trajection.


::segmentation::Begins

    Template Parameters:
        typename Indexical
        Indexical Length
        typename Elemental

    Return Type:
        bool

    Parameters:
        Referential< const Locational< Elemental > >
            location

    Description:
        Returns true if Length is greater than 0.  Implements the "begins" 
        member for segment location based directional trajection.


::segmentation::BeginsChecksForNull

    Template Parameters:
        typename Indexical
        Indexical Length
        typename Elemental

    Return Type:
        bool

    Parameters:
        Referential< const Locational< Elemental > >
            location

    Description:
        Throws location if it is null.  Returns true if Length is greater than 
        0.  Implements the "begins" member for segment location based 
        directional trajection.


::segmentation::BeginIncrementSafely

    Template Parameters:
        typename Indexical
        Indexical Length
        typename Elemental

    Return Type:
        Referential< const Locational< Elemental > >

    Parameters:
        Referential< const Locational< Elemental > >
            location
        Referential< Locational< Elemental > >
            position

    Description:
        Throws Length if it is 0 or less.  Throws location if it is null.
        Assigns location to position.  Returns a reference to position as a
        constant.  Implements the "begin" member for segment location based 
        scalar trajection.


::segmentation::BeginDecrement

    Template Parameters:
        typename Indexical
        Indexical Length
        typename Elemental

    Return Type:
        Referential< const Locational< Elemental > >

    Parameters:
        Referential< const Locational< Elemental > >
            location
        Referential< Locational< Elemental > >
            position

    Description:
        Assigns the last position in the segment to position.  Returns a 
        reference to position as a constant. Implements  the "begin" member for 
        segment location based scalar trajection.


::segmentation::BeginDecrementSafely

    Template Parameters:
        typename Indexical
        Indexical Length
        typename Elemental

    Return Type:
        Referential< const Locational< Elemental > >

    Parameters:
        Referential< const Locational< Elemental > >
            location
        Referential< Locational< Elemental > >
            position

    Description:
        Throws Length if it is 0 or less.  Throws location if it is null.
        Assigns the last position in the segment to position.  Returns a 
        reference to position as a constant.  Implements the "begin" member for 
        segment location based scalar trajection.


::segmentation::IncrementTraversable

    Template Parameters:
        typename Indexical
        Indexical Length
        typename Elemental

    Return Type:
        bool

    Parameters:
        Referential< const Locational< Elemental > >
            location
        Referential< const Locational< Elemental > >
            position

    Description:
        Returns true if position is not the last position in the segment.  
        Implements the "traversable" member for segment location based 
        directional trajection.


::segmentation::IncrementTraversableChecksForNull

    Template Parameters:
        typename Indexical
        Indexical Length
        typename Elemental

    Return Type:
        bool

    Parameters:
        Referential< const Locational< Elemental > >
            location
        Referential< const Locational< Elemental > >
            position

    Description:
        Throws location if it is null.  Throws position if it is null. Returns 
        true if position is not the last position in the segment.  Implements 
        the "traversable" member for segment location based directional 
        trajection.


::segmentation::DecrementTraversable

    Template Parameters:
        typename Indexical
        Indexical Length
        typename Elemental

    Return Type:
        bool

    Parameters:
        Referential< const Locational< Elemental > >
            location
        Referential< const Locational< Elemental > >
            position

    Description:
        Returns true if position is not the first position in the segment.  
        Implements the "traversable" member for segment location based 
        directional trajection.


::segmentation::DecrementTraversableChecksForNull

    Template Parameters:
        typename Indexical
        Indexical Length
        typename Elemental

    Return Type:
        bool

    Parameters:
        Referential< const Locational< Elemental > >
            location
        Referential< const Locational< Elemental > >
            position

    Description:
        Throws location if it is null.  Throws position if it is null.  Returns 
        true if position is not the first in the segment.  Implements the
        "traversable" member for segment location based  directional trajection.


::segmentation::TraverseIncrementSafely

    Template Parameters:
        typename Indexical
        Indexical Length
        typename Elemental

    Return Type:
        Referential< const Locational< Elemental > >

    Parameters:
        Referential< const Locational< Elemental > >
            location
        Referential< Locational< Elemental > >
            position

    Description:
        Throws location if it is null.  Throws position if it is null or is the
        last position in the segment.  Increments position.  Returns a reference 
        to position as a constant.  Implements the "traverse" member for segment 
        location based scalar trajection.


::segmentation::TraverseDecrementSafely

    Template Parameters:
        typename Indexical
        Indexical Length
        typename Elemental

    Return Type:
        Referential< const Locational< Elemental > >

    Parameters:
        Referential< const Locational< Elemental > >
            location
        Referential< Locational< Elemental > >
            position

    Description:
        Throws location if it is null.  Throws position if it is null or is the
        first position in the segment.  Decrements position.  Returns a 
        reference to position as a constant.  Implements the "traverse" member 
        for segment location based scalar trajection.


                               VARIABLE TEMPLATES


::segmentation::ReadVector

    Template Parameters:
        typename Indexical
        Indexical Length
        typename Elemental

    Type:
        Vectorial< const Locational< const Elemental >, Indexical, const Elemental >

    Description:
        Vectorial trajection through a pointer location function reference 
        table.  Returns references to constant elements.


::segmentation::SafeReadVector

    Template Parameters:
        typename Indexical
        Indexical Length
        typename Elemental

    Type:
        Vectorial< const Locational< const Elemental >, Indexical, const Elemental >

    Description:
        Safe vectorial trajection through a pointer location function reference 
        table.  Throws null pointers and out of bounds indices.  Returns 
        references to constant elements.  


::segmentation::WriteVector

    Template Parameters:
        typename Indexical
        Indexical Length
        typename Elemental

    Type:
        Vectorial< const Locational< Elemental >, Indexical, Elemental >

    Description:
        Vectorial trajection through a pointer location function reference 
        table.  Returns references to modifiable elements.


::segmentation::SafeWriteVector

    Template Parameters:
        typename Indexical
        Indexical Length
        typename Elemental

    Type:
        Vectorial< const Locational< Elemental >, Indexical, Elemental >

    Description:
        Safe vectorial trajection through a pointer location function reference 
        table.  Throws exceptions on null pointers and out of bounds indices.
        Returns references to modifiable elements.  


::segmentation::SafeReadIncrementScale

    Template Parameters:
        typename Indexical
        Indexical Length
        typename Elemental

    Type:
        Scalar< const Locational< const Elemental >, Locational< const Elemental >, const Elemental >

    Description:
        Safe increment scale trajection from a pointer location function 
        reference table.  Throws exceptions on null pointers and out of bounds
        pointer positions. Returns references to constant elements.  


::segmentation::SafeWriteIncrementScale

    Template Parameters:
        typename Indexical
        Indexical Length
        typename Elemental

    Type:
        Scalar< const Locational< Elemental >, Locational< Elemental >, Elemental >

    Description:
        Safe increment scale trajection from a pointer location function 
        reference table.  Throws exceptions on null pointers and out of bounds
        pointer positions. Returns references to modifiable elements.  


::segmentation::ReadDecrementScale

    Template Parameters:
        typename Indexical
        Indexical Length
        typename Elemental

    Type:
        Scalar< const Locational< const Elemental >, Locational< const Elemental >, const Elemental >

    Description:
        Decrement scale trajection from a pointer location function reference 
        table.  Returns references to constant elements.


::segmentation::SafeReadDecrementScale

    Template Parameters:
        typename Indexical
        Indexical Length
        typename Elemental

    Type:
        Scalar< const Locational< const Elemental >, Locational< const Elemental >, const Elemental >

    Description:
        Safe decrement scale trajection from a pointer location function 
        reference table.  Throws exceptions on null pointers and out of bounds
        pointer positions. Returns references to constant elements.  


::segmentation::WriteDecrementScale

    Template Parameters:
        typename Indexical
        Indexical Length
        typename Elemental

    Type:
        Scalar< const Locational< Elemental >, Locational< Elemental >, Elemental >

    Description:
        Decrement scale trajection from a pointer location function reference 
        table.  Returns references to modifiable elements.


::segmentation::SafeWriteDecrementScale

    Template Parameters:
        typename Indexical
        Indexical Length
        typename Elemental

    Type:
        Scalar< const Locational< Elemental >, Locational< Elemental >, Elemental >

    Description:
        Safe decrement scale trajection from a pointer location function 
        reference table.  Throws exceptions on null pointers and out of bounds
        pointer positions. Returns references to modifiable elements.  


::segmentation::SafeReadLiner

    Template Parameters:
        typename Indexical
        Indexical Length
        typename Elemental

    Type:
        Lineal< const Locational< const Elemental >, Locational< const Elemental >, const Elemental >

    Description:
        Increment and decrement trajection from a pointer location function
        reference table.  Throws exceptions on null pointers and out of bounds
        pointer positions.  Returns references to constant elements.


::segmentation::SafeWriteLiner

    Template Parameters:
        typename Indexical
        Indexical Length
        typename Elemental

    Type:
        Lineal< const Locational< Elemental >, Locational< Elemental >, Elemental >

    Description:
        Increment and decrement trajection from a pointer location function
        reference table.  Throws exceptions on null pointers and out of bounds
        pointer positions.  Returns references to modifiable elements.


::segmentation::ReadIncrementDirection

    Template Parameters:
        typename Indexical
        Indexical Length
        typename Elemental

    Type:
        Directional< const Locational< const Elemental >, Locational< const Elemental >, const Elemental >

    Description:
        Increment direction trajection from a pointer location function 
        reference table.  Returns references to constant elements.


::segmentation::SafeReadIncrementDirection

    Template Parameters:
        typename Indexical
        Indexical Length
        typename Elemental

    Type:
        Directional< const Locational< const Elemental >, Locational< const Elemental >, const Elemental >

    Description:
        Increment direction trajection from a pointer location function 
        reference table.  Throws exceptions on null pointers and out of bounds
        pointer positions.  Returns references to constant elements.


::segmentation::WriteIncrementDirection

    Template Parameters:
        typename Indexical
        Indexical Length
        typename Elemental

    Type:
        Directional< const Locational< Elemental >, Locational< Elemental >, Elemental >

    Description:
        Increment direction trajection from a pointer location function 
        reference table.  Returns references to modifiable elements.


::segmentation::SafeWriteIncrementDirection

    Template Parameters:
        typename Indexical
        Indexical Length
        typename Elemental

    Type:
        Directional< const Locational< Elemental >, Locational< Elemental >, Elemental >

    Description:
        Increment direction trajection from a pointer location function 
        reference table.  Throws exceptions on null pointers and out of bounds
        pointer positions.  Returns references to modifiable elements.


::segmentation::ReadDecrementDirection

    Template Parameters:
        typename Indexical
        Indexical Length
        typename Elemental

    Type:
        Directional< const Locational< Elemental >, Locational< Elemental >, Elemental >

    Description:
        Decrement direction trajection from a pointer location function 
        reference table.  Returns references to constant elements.


::segmentation::SafeReadDecrementDirection

    Template Parameters:
        typename Indexical
        Indexical Length
        typename Elemental

    Type:
        Directional< const Locational< Elemental >, Locational< Elemental >, Elemental >

    Description:
        Decrement direction trajection from a pointer location function 
        reference table.  Throws exceptions on null pointers and out of bounds
        pointer positions.  Returns references to constant elements.


::segmentation::WriteDecrementDirection

    Template Parameters:
        typename Indexical
        Indexical Length
        typename Elemental

    Type:
        Directional< const Locational< Elemental >, Locational< Elemental >, Elemental >

    Description:
        Decrement direction trajection from a pointer location function 
        reference table.  Returns references to modifiable elements.


::segmentation::SafeWriteDecrementDirection

    Template Parameters:
        typename Indexical
        Indexical Length
        typename Elemental

    Type:
        Directional< const Locational< Elemental >, Locational< Elemental >, Elemental >

    Description:
        Decrement direction trajection from a pointer location function 
        reference table.  Throws exceptions on null pointers and out of bounds
        pointer positions.  Returns references to modifiable elements.


::segmentation::ReadAxis

    Template Parameters:
        typename Indexical
        Indexical Length
        typename Elemental

    Type:
        Axial< const Locational< const Elemental >, Locational< const Elemental >, const Elemental >

    Description:
        Increment and decrement directional trajection from a pointer location 
        function reference table.  Returns references to constant elements.


::segmentation::SafeReadAxis

    Template Parameters:
        typename Indexical
        Indexical Length
        typename Elemental

    Type:
        Axial< const Locational< const Elemental >, Locational< const Elemental >, const Elemental >

    Description:
        Increment and decrement directional trajection from a pointer location 
        function reference table.  Throws exceptions on null pointers and out of
        bounds pointer positions.  Returns references to constant elements.


::segmentation::WriteAxis

    Template Parameters:
        typename Indexical
        Indexical Length
        typename Elemental

    Type:
        Axial< const Locational< Elemental >, Locational< Elemental >, Elemental >

    Description:
        Increment and decrement directional trajection from a pointer location 
        function reference table.  Returns references to modifiable elements.


::segmentation::SafeWriteAxis

    Template Parameters:
        typename Indexical
        Indexical Length
        typename Elemental

    Type:
        Axial< const Locational< Elemental >, Locational< Elemental >, Elemental >

    Description:
        Increment and decrement directional trajection from a pointer location 
        function reference table.  Throws exceptions on null pointers and out of
        bounds pointer positions.  Returns references to modifiable elements.


--------------------------------------------------------------------------------


                                   Ordination


                                    NAMESPACE


::ordination


                               FUNCTION TEMPLATES


::ordination::ContainsIndex

    Template Parameters:
        typename Indexical
        Indexical Length
        typename Elemental

    Return Type:
        bool

    Parameters:
        Referential< const Elemental[Length] >
            array
        Referential< const Indexical >
            index

    Description:
        Returns true if index is within the array.  Implements the "contains"
        member for array based vectorial trajection.


::ordination::IndexicalGo

    Template Parameters:
        typename Indexical
        Indexical Length
        typename Elemental

    Return Type:
        Conferential< Elemental >

    Parameters:
        Referential< Elemental[Length] >
            array
        Referential< const Indexical >
            index

    Description:
        Returns the elemental subspace located at index.  Implements the "go"
        member for segment location based vectorial trajection.
        

::ordination::IndexicalGoSafely

    Template Parameters:
        typename Indexical
        Indexical Length
        typename Elemental

    Return Type:
        Conferential< Elemental >

    Parameters:
        Referential< Elemental[Length] >
            array
        Referential< const Indexical >
            index

    Description:
        Throws index if it is out of bounds.  Returns the elemental subspace 
        located at index.  Implements the "go" member for array based vectorial 
        trajection.
        

::ordination::ContainsPosition

    Template Parameters:
        typename Indexical
        Indexical Length
        typename Elemental

    Return Type:
        bool

    Parameters:
        Referential< const Elemental[Length] >
            array
        Referential< const Locational< Elemental > >
            position

    Description:
        Returns true if position is within the array. Implements the 
        "contains" member for array based directional trajection.


::ordination::ContainsPositionChecksForNull

    Template Parameters:
        typename Indexical
        Indexical Length
        typename Elemental

    Return Type:
        bool

    Parameters:
        Referential< const Elemental[Length] >
            array
        Referential< const Locational< Elemental > >
            position

    Description:
        Throws position if it is null.  Returns true if position is within the 
        array.  Implements the "contains" member for array based directional 
        trajection.


::ordination::PositionalGo

    Template Parameters:
        typename Indexical
        Indexical Length
        typename Elemental

    Return Type:
        Conferential< Elemental >

    Parameters:
        Referential< Elemental[Length] >
            array
        Referential< const Locational< Elemental > >
            position

    Description:
        Throws position if it is null or out of bounds.  Returns the elemental 
        subspace located at position.  Implements the "go" member for array 
        based scalar trajection.


::ordination::PositionalGoSafely

    Template Parameters:
        typename Indexical
        Indexical Length
        typename Elemental

    Return Type:
        Conferential< Elemental >

    Parameters:
        Referential< Elemental[Length] >
            array
        Referential< const Locational< Elemental > >
            position

    Description:
        Throws position if it is null or out of bounds.  Returns the elemental 
        subspace located at position.  Implements the "go" member for array 
        based scalar trajection.


::ordination::Begins

    Template Parameters:
        typename Indexical
        Indexical Length
        typename Elemental

    Return Type:
        bool

    Parameters:
        Referential< const Elemental[Length] >
            array

    Description:
        Returns true if Length is greater than 0.  Implements the "begins" 
        member for array based directional trajection.


::ordination::BeginIncrement

    Template Parameters:
        typename Indexical
        Indexical Length
        typename Elemental

    Return Type:
        Referential< const Locational< Elemental > >

    Parameters:
        Referential< Elemental[Length] >
            array
        Referential< Locational< Elemental > >
            position

    Description:
        Assigns the first position in the array to position.  Returns a 
        reference to position as a constant.  Implements the "begin" member for 
        array based scalar trajection.


::ordination::BeginDecrement

    Template Parameters:
        typename Indexical
        Indexical Length
        typename Elemental

    Return Type:
        Referential< const Locational< Elemental > >

    Parameters:
        Referential< Elemental[Length] >
            array
        Referential< Locational< Elemental > >
            position

    Description:
        Assigns the last position in the array to position.  Returns a reference
        to position as a constant.  Implements the "begin" member for array 
        based scalar trajection.


::ordination::IncrementTraversable

    Template Parameters:
        typename Indexical
        Indexical Length
        typename Elemental

    Return Type:
        bool

    Parameters:
        Referential< const Elemental[Length] >
            array
        Referential< const Locational< Elemental > >
            position

    Description:
        Returns true if position comes before the last position in the array.  
        Implements the "traversable" member for array based directional 
        trajection.


::ordination::IncrementTraversableChecksForNull

    Template Parameters:
        typename Indexical
        Indexical Length
        typename Elemental

    Return Type:
        bool

    Parameters:
        Referential< const Elemental[Length] >
            array
        Referential< const Locational< Elemental > >
            position

    Description:
        Throws position if it is null. Returns true if position is not the last 
        position in the segment.  Implements the "traversable" member for 
        array based directional trajection.


::ordination::DecrementTraversable

    Template Parameters:
        typename Indexical
        Indexical Length
        typename Elemental

    Return Type:
        bool

    Parameters:
        Referential< const Elemental[Length] >
            array
        Referential< const Locational< Elemental > >
            position

    Description:
        Returns true if position comes after the first position in the array.  
        Implements the "traversable" member for array based directional 
        trajection.


::ordination::DecrementTraversableChecksForNull

    Template Parameters:
        typename Indexical
        Indexical Length
        typename Elemental

    Return Type:
        bool

    Parameters:
        Referential< const Elemental[Length] >
            array
        Referential< const Locational< Elemental > >
            position

    Description:
        Throws position if it is null.  Returns true if position comes after the
        first position in the array.  Implements the "traversable" member for 
        array based  directional trajection.


::ordination::TraverseIncrement

    Template Parameters:
        typename Indexical
        Indexical Length
        typename Elemental

    Return Type:
        Referential< const Locational< Elemental > >

    Parameters:
        Referential< Elemental[Length] >
            array
        Referential< Locational< Elemental > >
            position

    Description:
        Increments position.  Returns a reference to position as a constant.  
        Implements the "traverse" member for array based scalar trajection.


::ordination::TraverseIncrementSafely

    Template Parameters:
        typename Indexical
        Indexical Length
        typename Elemental

    Return Type:
        Referential< const Locational< Elemental > >

    Parameters:
        Referential< Elemental[Length] >
            array
        Referential< Locational< Elemental > >
            position

    Description:
        Throws position if it is null, out of bounds or is the last position in
        the array.  Increments position.  Returns a reference to position as a 
        constant.  Implements the "traverse" member for array based scalar 
        trajection.


::ordination::TraverseDecrement

    Template Parameters:
        typename Indexical
        Indexical Length
        typename Elemental

    Return Type:
        Referential< const Locational< Elemental > >

    Parameters:
        Referential< Elemental[Length] >
            array
        Referential< Locational< Elemental > >
            position

    Description:
        Decrements position.  Returns a reference to position as a constant.  
        Implements the "traverse" member for array based scalar trajection.


::ordination::TraverseDecrementSafely

    Template Parameters:
        typename Indexical
        Indexical Length
        typename Elemental

    Return Type:
        Referential< const Locational< Elemental > >

    Parameters:
        Referential< Elemental[Length] >
            array
        Referential< Locational< Elemental > >
            position

    Description:
        Throws position if it is null, out of bounds or is the first position in
        the array.  Decrements position.  Returns a reference to position as a 
        constant.  Implements the "traverse" member for array based scalar 
        trajection.


                               VARIABLE TEMPLATES


::ordination::ReadVector

    Template Parameters:
        typename Indexical
        Indexical Length
        typename Elemental

    Type:
        Vectorial< const Elemental[Length], Indexical, const Elemental >

    Description:
        Vectorial trajection through an array function reference table.  Returns 
        references to constant elements.


::ordination::SafeReadVector

    Template Parameters:
        typename Indexical
        Indexical Length
        typename Elemental

    Type:
        Vectorial< const Elemental[Length], Indexical, const Elemental >

    Description:
        Safe vectorial trajection through an array function reference table.  
        Throws out of bounds indices.  Returns references to constant elements.  


::ordination::WriteVector

    Template Parameters:
        typename Indexical
        Indexical Length
        typename Elemental

    Type:
        Vectorial< Elemental[Length], Indexical, Elemental >

    Description:
        Vectorial trajection through an array function reference table.  Returns 
        references to modifiable elements.


::ordination::SafeWriteVector

    Template Parameters:
        typename Indexical
        Indexical Length
        typename Elemental

    Type:
        Vectorial< Elemental[Length], Indexical, Elemental >

    Description:
        Safe vectorial trajection through an array function reference table.  
        Throws out of bounds indices. Returns references to modifiable elements.  


::ordination::ReadIncrementScale

    Template Parameters:
        typename Indexical
        Indexical Length
        typename Elemental

    Type:
        Scalar< const Elemental[Length], Locational< const Elemental >, const Elemental >

    Description:
        Increment scale trajection through an array function reference table.  
        Returns references to constant elements.  


::ordination::SafeReadIncrementScale

    Template Parameters:
        typename Indexical
        Indexical Length
        typename Elemental

    Type:
        Scalar< const Elemental[Length], Locational< const Elemental >, const Elemental >

    Description:
        Safe increment scale trajection through an array function reference 
        table.  Throws exceptions on null pointers and out of bounds
        pointer positions.  Returns references to constant elements.  


::ordination::WriteIncrementScale

    Template Parameters:
        typename Indexical
        Indexical Length
        typename Elemental

    Type:
        Scalar< Elemental[Length], Locational< Elemental >, Elemental >

    Description:
        Increment scale trajection through an array function reference table.  
        Returns references to modifiable elements.  


::ordination::SafeWriteIncrementScale

    Template Parameters:
        typename Indexical
        Indexical Length
        typename Elemental

    Type:
        Scalar< Elemental[Length], Locational< Elemental >, Elemental >

    Description:
        Safe increment scale trajection through an array function reference 
        table.  Throws exceptions on null pointers and out of bounds
        pointer positions.  Returns references to modifiable elements.  


::ordination::ReadDecrementScale

    Template Parameters:
        typename Indexical
        Indexical Length
        typename Elemental

    Type:
        Scalar< const Elemental[Length], Locational< const Elemental >, const Elemental >

    Description:
        Decrement scale trajection through an array function reference table.  
        Returns references to constant elements.  


::ordination::SafeReadDecrementScale

    Template Parameters:
        typename Indexical
        Indexical Length
        typename Elemental

    Type:
        Scalar< const Elemental[Length], Locational< const Elemental >, const Elemental >

    Description:
        Safe decrement scale trajection through an array function reference 
        table.  Throws exceptions on null pointers and out of bounds
        pointer positions.  Returns references to constant elements.  


::ordination::WriteDecrementScale

    Template Parameters:
        typename Indexical
        Indexical Length
        typename Elemental

    Type:
        Scalar< Elemental[Length], Locational< Elemental >, Elemental >

    Description:
        Decrement scale trajection through an array function reference table.  
        Returns references to modifiable elements.  


::ordination::SafeWriteDecrementScale

    Template Parameters:
        typename Indexical
        Indexical Length
        typename Elemental

    Type:
        Scalar< Elemental[Length], Locational< Elemental >, Elemental >

    Description:
        Safe decrement scale trajection through an array function reference 
        table.  Throws exceptions on null pointers and out of bounds
        pointer positions.  Returns references to modifiable elements.  


::ordination::ReadLiner

    Template Parameters:
        typename Indexical
        Indexical Length
        typename Elemental

    Type:
        Lineal< const Elemental[Length] >, Locational< const Elemental >, const Elemental >

    Description:
        Increment and decrement trajection through an array function reference 
        table.  Returns references to constant elements.


::ordination::SafeReadLiner

    Template Parameters:
        typename Indexical
        Indexical Length
        typename Elemental

    Type:
        Lineal< const Elemental[Length] >, Locational< const Elemental >, const Elemental >

    Description:
        Increment and decrement trajection through an array function reference 
        table.  Throws exceptions on null pointers and out of bounds pointer 
        positions.  Returns references to constant elements.


::ordination::WriteLiner

    Template Parameters:
        typename Indexical
        Indexical Length
        typename Elemental

    Type:
        Lineal< Elemental[Length] >, Locational< Elemental >, Elemental >

    Description:
        Increment and decrement trajection through an array function reference 
        table.  Returns references to modifiable elements.


::ordination::SafeWriteLiner

    Template Parameters:
        typename Indexical
        Indexical Length
        typename Elemental

    Type:
        Lineal< Elemental[Length] >, Locational< Elemental >, Elemental >

    Description:
        Increment and decrement trajection through an array function reference 
        table.  Throws exceptions on null pointers and out of bounds pointer 
        positions.  Returns references to modifiable elements.


::ordination::ReadIncrementDirection

    Template Parameters:
        typename Indexical
        Indexical Length
        typename Elemental

    Type:
        Directional< const Elemental[Length] >, Locational< const Elemental >, const Elemental >

    Description:
        Increment direction trajection through an array function reference 
        table.  Returns references to constant elements.


::ordination::SafeReadIncrementDirection

    Template Parameters:
        typename Indexical
        Indexical Length
        typename Elemental

    Type:
        Directional< const Elemental[Length] >, Locational< const Elemental >, const Elemental >

    Description:
        Increment direction trajection through an array function reference 
        table.  Throws exceptions on null pointers and out of bounds pointer 
        positions.  Returns references to constant elements.


::ordination::WriteIncrementDirection

    Template Parameters:
        typename Indexical
        Indexical Length
        typename Elemental

    Type:
        Directional< Elemental[Length] >, Locational< Elemental >, Elemental >

    Description:
        Increment direction trajection through an array function reference 
        table.  Returns references to modifiable elements.


::ordination::SafeWriteIncrementDirection

    Template Parameters:
        typename Indexical
        Indexical Length
        typename Elemental

    Type:
        Directional< Elemental[Length] >, Locational< Elemental >, Elemental >

    Description:
        Increment direction trajection through an array function reference 
        table.  Throws exceptions on null pointers and out of bounds pointer 
        positions.  Returns references to modifiable elements.


::ordination::ReadDecrementDirection

    Template Parameters:
        typename Indexical
        Indexical Length
        typename Elemental

    Type:
        Directional< const Elemental[Length] >, Locational< const Elemental >, const Elemental >

    Description:
        Decrement direction trajection through an array function reference 
        table.  Returns references to constant elements.


::ordination::SafeReadDecrementDirection

    Template Parameters:
        typename Indexical
        Indexical Length
        typename Elemental

    Type:
        Directional< const Elemental[Length] >, Locational< const Elemental >, const Elemental >

    Description:
        Decrement direction trajection through an array function reference 
        table.  Throws exceptions on null pointers and out of bounds pointer 
        positions.  Returns references to constant elements.


::ordination::WriteDecrementDirection

    Template Parameters:
        typename Indexical
        Indexical Length
        typename Elemental

    Type:
        Directional< Elemental[Length] >, Locational< Elemental >, Elemental >

    Description:
        Decrement direction trajection through an array function reference 
        table.  Returns references to modifiable elements.


::ordination::SafeWriteDecrementDirection

    Template Parameters:
        typename Indexical
        Indexical Length
        typename Elemental

    Type:
        Directional< Elemental[Length] >, Locational< Elemental >, Elemental >

    Description:
        Decrement direction trajection through an array function reference 
        table.  Throws exceptions on null pointers and out of bounds pointer 
        positions.  Returns references to modifiable elements.


::ordination::ReadAxis

    Template Parameters:
        typename Indexical
        Indexical Length
        typename Elemental

    Type:
        Axial< const Elemental[Length] >, Locational< const Elemental >, const Elemental >

    Description:
        Increment and decrement directional trajection through an array function 
        reference table.  Returns references to constant elements.


::ordination::SafeReadAxis

    Template Parameters:
        typename Indexical
        Indexical Length
        typename Elemental

    Type:
        Axial< const Elemental[Length] >, Locational< const Elemental >, const Elemental >

    Description:
        Increment and decrement directional trajection through an array function
        reference table.  Throws exceptions on null pointers and out of bounds 
        pointer positions.  Returns references to constant elements.


::ordination::WriteAxis

    Template Parameters:
        typename Indexical
        Indexical Length
        typename Elemental

    Type:
        Axial< Elemental[Length] >, Locational< Elemental >, Elemental >

    Description:
        Increment and decrement directional trajection through an array function 
        reference table.  Returns references to modifiable elements.


::ordination::SafeWriteAxis

    Template Parameters:
        typename Indexical
        Indexical Length
        typename Elemental

    Type:
        Axial< Elemental[Length] >, Locational< Elemental >, Elemental >

    Description:
        Increment and decrement directional trajection through an array function
        reference table.  Throws exceptions on null pointers and out of bounds 
        pointer positions.  Returns references to modifiable elements.


--------------------------------------------------------------------------------


                                    Summation


                                    NAMESPACE


::summation


                                 TYPE TEMPLATES


::summation::Summational (prototype alias)

    Template Parameters:
        typename Algebraic
        typename Indexical

    Return Type:
        void
    
    Parameter Types:
        Referential< const Indexical >
        Referential< const Indexical >
        Referential< const Indexical >
        Referential< Algebraic >

    Description:
        Given a reference to an indexical lower bound of summation as a constant,
        a reference to an indexical upper bound of summation as a constant, a
        reference to an indexical index of summation as a constant and a 
        reference to an algebraic sum, add the value of the term at the given
        index to sum.
        
        Algebraic:  Any type which can represent the sum of algebraic terms.
                    This type need not be numeric.
        Indexical:  Integer type or otherwise capable of the assignment, prefix
                    increment and relational operators.


                               FUNCTION TEMPLATES


::summation::BeginSummation

    Template Parameters:
        typename Algebraic
        typename Indexical
        Indexical Lower
        Indexical Upper
        Referential< Summational< Algebraic, Indexical > >
            AddTerm

    Return Type:
        Referential< const Indexical >

    Parameters:
        Referential< Algebraic >
            sum
        Referential< Indexical >
            index

    Description:
        Parameter sum must have already been initialized to represent nil (0 if 
        numeric).  Assigns Lower to index then calls AddTerm to add the value of 
        the first term to sum.  Returns a reference to index as a constant.
        

::summation::TraverseSummation

    Template Parameters:
        typename Algebraic
        typename Indexical
        Indexical Lower
        Indexical Upper
        Referential< Summational< Algebraic, Indexical > >
            AddTerm

    Return Type:
        Referential< const Indexical >

    Parameters:
        Referential< Algebraic >
            sum
        Referential< Indexical >
            index

    Description:
        Assigns Lower to index then calls AddTerm to add the value of the first 
        term to sum.  Returns a reference to index as a constant.


::summation::ReadSummation

    Template Parameters:
        typename Algebraic
        typename Indexical

    Return Type:
        Conferential< const Algebraic >

    Parameters:
        Referential< Algebraic >
            sum
        Referential< const Indexical >
            index

    Description:
        Returns a conferment reference to sum as a constant.


::summation::SummationBegins

    Template Parameters:
        typename Algebraic
        typename Indexical
        Indexical Lower
        Indexical Upper

    Return Type:
        bool

    Parameters:
        Referential< const Algebraic >
            sum

    Description:
        Returns true if Lower is less than or equal to Upper.


::summation::SummationTraversable

    Template Parameters:
        typename Algebraic
        typename Indexical
        Indexical Upper

    Return Type:
        bool

    Parameters:
        Referential< const Algebraic >
            sum
        Referential< const Indexical >
            index

    Description:
        Returns true if index is less than Upper.


::summation::SummationContains

    Template Parameters:
        typename Algebraic
        typename Indexical
        Indexical Lower
        Indexical Upper

    Return Type:
        bool

    Parameters:
        Referential< const Algebraic >
            sum
        Referential< const Indexical >
            index

    Description:
        Returns true if index is equal to or between Lower and Upper.


::summation::Sum

    Template Parameters:
        typename Algebraic
        typename Indexical

    Return Type:
        bool

    Parameters:
        Referential< Algebraic >
            sum
        Referential< const Directional< Algebraic, Indexical, const Algebraic > >
            sigma

    Description:
        Parameter sum must have already been initialized to represent nil (0 if 
        numeric).  Performs the summation of sigma storing the value in sum.
        Returns true if an index was reachable within the bounds of the 
        summation.


                               VARIABLE TEMPLATES


::summation::SummationScale

    Template Parameters:
        typename Algebraic
        typename Indexical
        Indexical Lower
        Indexical Upper
        Referential< Summational< Algebraic, Indexical > >
            AddTerm

    Type:
        Scalar< Algebraic, Indexical, const Algebraic >

    Description:
        Scalar trajection through a summation function reference table.  
        Required by the summation direction.


::summation::SummationDirection

    Template Parameters:
        typename Algebraic
        typename Indexical
        Indexical Lower
        Indexical Upper
        Referential< Summational< Algebraic, Indexical > >
            AddTerm

    Type:
        Directional< Algebraic, Indexical, const Algebraic >

    Description:
        Directional trajection through a summation function reference table.  
        Use this to define Sigma, such as:
        
        auto Sigma = SummationDirection< long, int, 1, 10, AddSomeTermToSum >;
        long total;
        
        total = 0;               // Must be initialized
        Sum( total, Sigma );


--------------------------------------------------------------------------------


                                    Junction


                                 TYPE TEMPLATES


::junction::Junctional (struct)

    Template Parameters:
        typename Elemental

    Members:
        Locational< Junctional< Elemental > >
            previous
            next
        Elemental
            element
            
    Description:

        Linked list node type struct template.

        Elemental:  Type of the node element.
        
        previous:  Memory location of the previous node in the list.
        next:  Memory location of the next node in the list.
        element:  Instance of the node element.


::junction::Junctive (struct)

    Template Parameters:
        typename Natural
        typename Elemental

    Members:
        Natural
            count
            total
        Locational< Junctional< Elemental > >
            first
            last
            unused
            
    Description:

        Linked list container type struct template.

        Natural:  Type of the natural integer counts where required.
        Elemental:  Type of the node element.
        
        count:  Number of active nodes in the list.
        total:  Number of total nodes, including unused nodes.
        first:  Memory location of the first node in the list.
        last:  Memory location of the last node in the list.
        unused:  Memory location of the first unused node in the unused list.


::junction::Adjunctive (struct)

    Template Parameters:
        typename Natural
        typename Elemental

    Members:
        Referential< Locational< Junctional< Elemental > >(
            Referential< Junctive< Natural, Elemental > >
        ) >
            allocate
        Referential< bool(
            Referential< Junctive< Natural, Elemental > >,
            Referential< Locational< Junctional< Elemental > > >
        ) >
            deallocate
        Referential< Locational< Junctional< Elemental > >(
            Referential< Junctive< Natural, Elemental > >,
            Referential< const Elemental >
        ) >
            proclaim
            
    Description:

        Linked list memory allocation management type struct template.  This
        table is used when determining how to allocate new nodes, whether to
        recycle unused nodes and how to deallocate unused nodes when requested.

        Natural:  Type of the natural integer counts where required.
        Elemental:  Type of the node element.
        
        allocate:  Allocate a new node.  If successful, increment the list's
                   total but do not link the new node into the list.  Return
                   the location of the new node or null if unsupported by the
                   allocation scheme.
        deallocate:  Deallocate the node at the provided location.  If 
                     successful, decrement the list's total.  Return true if the 
                     node should be considered successfully deleted, return 
                     false if the deallocation was not successful and 
                     deallocation for the linked list should be postponed.
        proclaim:  Assign a node which will be subsequently inserted into the 
                   list by the calling function, with the provided elemental 
                   reference to constant value.  If successful, return the
                   location of the selected node, which should not be linked
                   into the list or null if allocation is not successful at this
                   time.  When making use of the Reclaim function template,
                   do not increment the list total.  If making internal use of
                   the same function as the "allocate" member, do not increment
                   the total twice.  If allocating the node using some function 
                   other than the same function providing "allocate", do not 
                   forget to increment the total.


::junction::Positional (type alias)

    Template Parameters:
        typename Elemental

    Aliased Type:
        Positive< Junctional< Elemental > >

    Description:
        Linked list positional type template.  Used to represent a position 
        in the active linked list.  Do not use these to represent nodes which
        are not yet in the formal linked list, including nodes in the unused 
        sublist.


                               FUNCTION TEMPLATES


::junction::operator==

    Template Parameters:
        typename Elemental

    Return Type:
        bool

    Parameters:
        Referential< const Positional< Elemental > >
            base
        Referential< const Positional< Elemental > >
            relative

    Description:
        Returns true if the base nodal position's location is equal to the 
        relative nodal position's location.


::junction::operator!=

    Template Parameters:
        typename Elemental

    Return Type:
        bool

    Parameters:
        Referential< const Positional< Elemental > >
            base
        Referential< const Positional< Elemental > >
            relative

    Description:
        Returns true if the base nodal position's location is not equal to the 
        relative nodal position's location.

::junction::operator>

    Template Parameters:
        typename Elemental

    Return Type:
        bool

    Parameters:
        Referential< const Positional< Elemental > >
            base
        Referential< const Positional< Elemental > >
            relative

    Description:
        Throws base or relative if either's location is null.  Returns true if 
        base is found to come after relative in the list.


::junction::operator<

    Template Parameters:
        typename Elemental

    Return Type:
        bool

    Parameters:
        Referential< const Positional< Elemental > >
            base
        Referential< const Positional< Elemental > >
            relative

    Description:
        Throws base or relative if either's location is null.  Returns true if 
        base is found to come before relative in the list.


::junction::operator>=

    Template Parameters:
        typename Elemental

    Return Type:
        bool

    Parameters:
        Referential< const Positional< Elemental > >
            base
        Referential< const Positional< Elemental > >
            relative

    Description:
        Throws base or relative if either's location is null.  Returns true if 
        base is the same as or found to come after relative in the list.


::junction::operator<

    Template Parameters:
        typename Elemental

    Return Type:
        bool

    Parameters:
        Referential< const Positional< Elemental > >
            base
        Referential< const Positional< Elemental > >
            relative

    Description:
        Throws base or relative if either's location is null.  Returns true if 
        base is the same as or found to come before relative in the list.


::junction::Initialize

    Template Parameters:
        typename Natural
        typename Elemental

    Return Type:
        Referential< Junctive< Natural, Elemental > >

    Parameters:
        Referential< Junctive< Natural, Elemental > >
            list

    Description:
        Assigns 0 to the list's count and total.  Then assigns null to the
        list's first, last and unused nodes.  Returns a modifiable reference to 
        the list.


::junction::Empty

    Template Parameters:
        typename Natural
        typename Elemental

    Return Type:
        bool

    Parameters:
        Referential< Junctive< Natural, Elemental > >
            list

    Description:
        If there are any nodes in the list, moves them all to the unused 
        sublist, assigns null to the first and last node locations of the list,
        assigns 0 to the active list node count and returns true.  Returns false
        if no nodes were located in the active list.


::junction::Reclaim

    Template Parameters:
        typename Natural
        typename Elemental

    Return Type:
        Locational< Junctional< Elemental > >

    Parameters:
        Referential< Junctive< Natural, Elemental > >
            list

    Description:
        If a node is found in the unused sublist, removes it from the unused
        sublist and returns it's location.  If no node was found in the unused
        sublist, returns null.


::junction::Free

    Template Parameters:
        typename Natural
        typename Elemental
        Referential< const Adjunctive< Natural, Elemental > >
            Adjunct

    Return Type:
        bool

    Parameters:
        Referential< Junctive< Natural, Elemental > >
            list

    Description:
        Returns true if and only if there are more nodes available to free after
        one node has been freed.


::junction::AllocateNothing

    Template Parameters:
        typename Natural
        typename Elemental

    Return Type:
        Locational< Junctional< Elemental > >

    Parameters:
        Referential< Junctive< Natural, Elemental > >
            list

    Description:
        Returns null.  Can be used when allocation is not available without 
        initialization values.


::junction::AllocateDefault

    Template Parameters:
        typename Disclaimable
        typename Natural
        typename Elemental
        Referential< const Allocative< DefaultClaimable< Junctional< Elemental > >, Disclaimable > >
            Allocator

    Return Type:
        Locational< Junctional< Elemental > >

    Parameters:
        Referential< Junctive< Natural, Elemental > >
            list

    Description:
        Allocates one node and increments the list total and returns the 
        location of the allocated node.  Returns null otherwise.


::junction::DeallocateDefault

    Template Parameters:
        typename Claimable
        typename Natural
        typename Elemental
        Referential< const Allocative< Claimable, DefaultDisclaimable< Junctional< Elemental > > > >
            Allocator

    Return Type:
        bool

    Parameters:
        Referential< Junctive< Natural, Elemental > >
            list
        Referential< Locational< Junctional< Elemental > > >
            node

    Description:
        If node is not null, deallocates the node and decrements the list total
        and returns true.  Returns false otherwise.


::junction::ProclaimDefault

    Template Parameters:
        typename Disclaimable
        typename Natural
        typename Elemental
        Referential< const Allocative< DefaultClaimable< Junctional< Elemental > >, Disclaimable > >
            Allocator

    Return Type:
        Locational< Junctional< Elemental > >

    Parameters:
        Referential< Junctive< Natural, Elemental > >
            list
        Referential< const Elemental >
            value

    Description:
        Given a reference to a junctive list and a reference to an elemental
        constant value, reclaims or allocates a node and returns it's location.
        Returns null if a node was unable to be reclaimed or allocated.


::junction::ProclaimCopy

    Template Parameters:
        typename Disclaimable
        typename Natural
        typename Elemental
        Referential< const Allocative< DefaultClaimable< Junctional< Elemental > >, Disclaimable > >
            Allocator

    Return Type:
        Locational< Junctional< Elemental > >

    Parameters:
        Referential< Junctive< Natural, Elemental > >
            list
        Referential< const Elemental >
            value

    Description:
        Given a reference to a junctive list and a reference to an elemental
        constant value, initializes a new node and returns it's location. 
        Returns null if a node was unable to be allocated.


::junction::Instantiate

    Template Parameters:
        typename Natural
        typename Elemental
        Referential< const Adjunctive< Natural, Elemental > >
            Adjunct

    Return Type:
        bool

    Parameters:
        Referential< Junctive< Natural, Elemental > >
            list
        Referential< const Natural >
            count

    Description:
        Given a reference to a junctive list and a reference to natural integer
        constant count, attempts to allocate any required nodes in order to
        provide count nodes in the unused sublist and place them in the sublist.
        Returns true if count nodes are available in the sublist or false
        otherwise.


::junction::Contains

    Template Parameters:
        typename Natural
        typename Elemental

    Return Type:
        bool

    Parameters:
        Referential< const Junctive< Natural, Elemental > >
            list
        Referential< const Positional< Elemental > >
            position

    Description:
        Given a reference to a junctive list and a reference to a positional 
        constant position, returns true if position is in the active list.


::junction::ContainsChecksForNull

    Template Parameters:
        typename Natural
        typename Elemental

    Return Type:
        bool

    Parameters:
        Referential< const Junctive< Natural, Elemental > >
            list
        Referential< const Positional< Elemental > >
            position

    Description:
        Given a reference to a junctive list and a reference to a positional 
        constant position, throws position if it's location is null.  Returns 
        true if position is in the active list.


::junction::GoRead

    Template Parameters:
        typename Natural
        typename Elemental

    Return Type:
        Conferential< const Elemental >

    Parameters:
        Referential< const Junctive< Natural, Elemental > >
            list
        Referential< const Positional< Elemental > >
            position

    Description:
        Given a reference to a junctive type list as a constant and a reference 
        to a positional type position as a constant, returns a conferment 
        reference to an elemental value as a constant.


::junction::GoReadSafely

    Template Parameters:
        typename Natural
        typename Elemental

    Return Type:
        Conferential< const Elemental >

    Parameters:
        Referential< const Junctive< Natural, Elemental > >
            list
        Referential< const Positional< Elemental > >
            position

    Description:
        Given a reference to a junctive type list as a constant and a reference 
        to a positional type position as a constant, throws position if it's 
        location is null.  Returns a conferment reference to an elemental value 
        as a constant.


::junction::GoWrite

    Template Parameters:
        typename Natural
        typename Elemental

    Return Type:
        Conferential< Elemental >

    Parameters:
        Referential< Junctive< Natural, Elemental > >
            list
        Referential< const Positional< Elemental > >
            position

    Description:
        Given a reference to a junctive type list and a reference to a 
        positional type position, returns a conferment reference to an elemental 
        value as a constant.


::junction::GoWriteSafely

    Template Parameters:
        typename Natural
        typename Elemental

    Return Type:
        Conferential< Elemental >

    Parameters:
        Referential< Junctive< Natural, Elemental > >
            list
        Referential< const Positional< Elemental > >
            position

    Description:
        Given a reference to a junctive type list and a reference to a 
        positional type position, throws position if it's location is null.  
        Returns a conferment reference to an elemental value as a constant.


::junction::BeginReadIncrement

    Template Parameters:
        typename Natural
        typename Elemental

    Return Type:
        Referential< const Positional< Elemental > >

    Parameters:
        Referential< const Junctive< Natural, Elemental > >
            list
        Referential< Positional< Elemental > >
            position

    Description:
        Given a reference to a junctive type list as a constant and a reference 
        to a positional type position, assigns the first position in the active
        list to position and returns a reference to the position as a constant.


::junction::BeginReadIncrementSafely

    Template Parameters:
        typename Natural
        typename Elemental

    Return Type:
        Referential< const Positional< Elemental > >

    Parameters:
        Referential< const Junctive< Natural, Elemental > >
            list
        Referential< Positional< Elemental > >
            position

    Description:
        Given a reference to a junctive type list as a constant and a reference 
        to a positional type position, throws list if the first position in the
        active list's location is null.  Returns a reference to the position as 
        a constant.


::junction::BeginWriteIncrement

    Template Parameters:
        typename Natural
        typename Elemental

    Return Type:
        Referential< const Positional< Elemental > >

    Parameters:
        Referential< Junctive< Natural, Elemental > >
            list
        Referential< Positional< Elemental > >
            position

    Description:
        Given a reference to a junctive type list and a reference to a 
        positional type position, assigns the first position in the active
        list to position and returns a reference to the position as a constant.


::junction::BeginWriteIncrementSafely

    Template Parameters:
        typename Natural
        typename Elemental

    Return Type:
        Referential< const Positional< Elemental > >

    Parameters:
        Referential< Junctive< Natural, Elemental > >
            list
        Referential< Positional< Elemental > >
            position

    Description:
        Given a reference to a junctive type list as a constant and a reference 
        to a positional type position, throws list if the first position in the
        active list's location is null.  Returns a reference to the position as 
        a constant.


::junction::IncrementBegins

    Template Parameters:
        typename Natural
        typename Elemental

    Return Type:
        bool

    Parameters:
        Referential< const Junctive< Natural, Elemental > >
            list

    Description:
        Given a reference to a junctive list, returns true if the first position 
        in the active list is not null.


::junction::TraverseReadIncrement

    Template Parameters:
        typename Natural
        typename Elemental

    Return Type:
        Referential< const Positional< Elemental > >

    Parameters:
        Referential< const Junctive< Natural, Elemental > >
            list
        Referential< Positional< Elemental > >
            position

    Description:
        Given a reference to a junctive type list as a constant and a reference 
        to a positional type position, assigns the next position in the active
        list to position and returns a reference to the position as a constant.


::junction::TraverseReadIncrementSafely

    Template Parameters:
        typename Natural
        typename Elemental

    Return Type:
        Referential< const Positional< Elemental > >

    Parameters:
        Referential< const Junctive< Natural, Elemental > >
            list
        Referential< Positional< Elemental > >
            position

    Description:
        Given a reference to a junctive type list as a constant and a reference 
        to a positional type position, throws position if it or it's next 
        position are null.  Returns a reference to the position as a constant.


::junction::TraverseWriteIncrement

    Template Parameters:
        typename Natural
        typename Elemental

    Return Type:
        Referential< const Positional< Elemental > >

    Parameters:
        Referential< Junctive< Natural, Elemental > >
            list
        Referential< Positional< Elemental > >
            position

    Description:
        Given a reference to a junctive type list and a reference to a 
        positional type position, assigns the next position in the active list 
        to position and returns a reference to the position as a constant.


::junction::TraverseWriteIncrementSafely

    Template Parameters:
        typename Natural
        typename Elemental

    Return Type:
        Referential< const Positional< Elemental > >

    Parameters:
        Referential< Junctive< Natural, Elemental > >
            list
        Referential< Positional< Elemental > >
            position

    Description:
        Given a reference to a junctive type list and a reference to a 
        positional type position, throws position if it or it's next position 
        are null.  Returns a reference to the position as a constant.


::junction::IncrementTraversable

    Template Parameters:
        typename Natural
        typename Elemental

    Return Type:
        bool

    Parameters:
        Referential< const Junctive< Natural, Elemental > >
            list
        Referential< const Positional< Elemental > >
            position

    Description:
        Given a reference to a junctive list, returns true if the next position
        is not null.


::junction::IncrementTraversableChecksForNull

    Template Parameters:
        typename Natural
        typename Elemental

    Return Type:
        bool

    Parameters:
        Referential< const Junctive< Natural, Elemental > >
            list
        Referential< const Positional< Elemental > >
            position

    Description:
        Given a reference to a junctive list, throws position if it's location 
        is null, returns true if the next position is not null.


::junction::BeginReadDecrement

    Template Parameters:
        typename Natural
        typename Elemental

    Return Type:
        Referential< const Positional< Elemental > >

    Parameters:
        Referential< const Junctive< Natural, Elemental > >
            list
        Referential< Positional< Elemental > >
            position

    Description:
        Given a reference to a junctive type list as a constant and a reference 
        to a positional type position, assigns the first position in the active
        list to position and returns a reference to the position as a constant.


::junction::BeginReadDecrementSafely

    Template Parameters:
        typename Natural
        typename Elemental

    Return Type:
        Referential< const Positional< Elemental > >

    Parameters:
        Referential< const Junctive< Natural, Elemental > >
            list
        Referential< Positional< Elemental > >
            position

    Description:
        Given a reference to a junctive type list as a constant and a reference 
        to a positional type position, throws list if the first position in the
        active list's location is null.  Returns a reference to the position as 
        a constant.


::junction::BeginWriteDecrement

    Template Parameters:
        typename Natural
        typename Elemental

    Return Type:
        Referential< const Positional< Elemental > >

    Parameters:
        Referential< Junctive< Natural, Elemental > >
            list
        Referential< Positional< Elemental > >
            position

    Description:
        Given a reference to a junctive type list and a reference to a 
        positional type position, assigns the first position in the active
        list to position and returns a reference to the position as a constant.


::junction::BeginWriteDecrementSafely

    Template Parameters:
        typename Natural
        typename Elemental

    Return Type:
        Referential< const Positional< Elemental > >

    Parameters:
        Referential< Junctive< Natural, Elemental > >
            list
        Referential< Positional< Elemental > >
            position

    Description:
        Given a reference to a junctive type list as a constant and a reference 
        to a positional type position, throws list if the first position in the
        active list's location is null.  Returns a reference to the position as 
        a constant.


::junction::DecrementBegins

    Template Parameters:
        typename Natural
        typename Elemental

    Return Type:
        bool

    Parameters:
        Referential< const Junctive< Natural, Elemental > >
            list

    Description:
        Given a reference to a junctive list, returns true if the first position 
        in the active list is not null.


::junction::TraverseReadDecrement

    Template Parameters:
        typename Natural
        typename Elemental

    Return Type:
        Referential< const Positional< Elemental > >

    Parameters:
        Referential< const Junctive< Natural, Elemental > >
            list
        Referential< Positional< Elemental > >
            position

    Description:
        Given a reference to a junctive type list as a constant and a reference 
        to a positional type position, assigns the previous position in the 
        active list to position and returns a reference to the position as a 
        constant.


::junction::TraverseReadDecrementSafely

    Template Parameters:
        typename Natural
        typename Elemental

    Return Type:
        Referential< const Positional< Elemental > >

    Parameters:
        Referential< const Junctive< Natural, Elemental > >
            list
        Referential< Positional< Elemental > >
            position

    Description:
        Given a reference to a junctive type list as a constant and a reference 
        to a positional type position, throws position if it or it's previous 
        position are null.  Returns a reference to the position as a constant.


::junction::TraverseWriteDecrement

    Template Parameters:
        typename Natural
        typename Elemental

    Return Type:
        Referential< const Positional< Elemental > >

    Parameters:
        Referential< Junctive< Natural, Elemental > >
            list
        Referential< Positional< Elemental > >
            position

    Description:
        Given a reference to a junctive type list and a reference to a 
        positional type position, assigns the previous position in the active 
        list to position and returns a reference to the position as a constant.


::junction::TraverseWriteDecrementSafely

    Template Parameters:
        typename Natural
        typename Elemental

    Return Type:
        Referential< const Positional< Elemental > >

    Parameters:
        Referential< Junctive< Natural, Elemental > >
            list
        Referential< Positional< Elemental > >
            position

    Description:
        Given a reference to a junctive type list and a reference to a 
        positional type position, throws position if it or it's previous 
        position are null.  Returns a reference to the position as a constant.


::junction::DecrementTraversable

    Template Parameters:
        typename Natural
        typename Elemental

    Return Type:
        bool

    Parameters:
        Referential< const Junctive< Natural, Elemental > >
            list
        Referential< const Positional< Elemental > >
            position

    Description:
        Given a reference to a junctive list, returns true if the previous 
        position is not null.


::junction::DecrementTraversableChecksForNull

    Template Parameters:
        typename Natural
        typename Elemental

    Return Type:
        bool

    Parameters:
        Referential< const Junctive< Natural, Elemental > >
            list
        Referential< const Positional< Elemental > >
            position

    Description:
        Given a reference to a junctive list, throws position if it's location 
        is null, returns true if the previous position is not null.


                               VARIABLE TEMPLATES


::junction::DefaultNewAdjunct

    Template Parameters:
        typename Natural
        typename Elemental

    Type:
        Adjunctive< Natural, Elemental >

    Description:
        New default constructor junctional node allocation function reference 
        table.  Supports pre-allocation of nodes, reuse of unused nodes but the 
        elemental type must support assignment from a reference to an element 
        as a constant.


::junction::CopyNewAdjunct

    Template Parameters:
        typename Natural
        typename Elemental

    Type:
        Adjunctive< Natural, Elemental >

    Description:
        New copy constructor junctional node allocation function reference
        table.  Does not support the pre-allocation of nodes, does not reuse 
        unused nodes, the elemental type need not support assignment.


::junction::ReadVector

    Template Parameters:
        typename Natural
        typename Elemental

    Type:
        Vectorial< const Junctive< Natural, Elemental >, Positional< Elemental >, const Elemental >

    Description:
        Vectorial trajection through a linked list function reference table.  
        Returns references to constant elements.


::junction::SafeReadVector

    Template Parameters:
        typename Natural
        typename Elemental

    Type:
        Vectorial< const Junctive< Natural, Elemental >, Positional< Elemental >, const Elemental >

    Description:
        Vectorial trajection through a linked list function reference table.  
        Throws exceptions on positions who's locations are null and positions 
        which are not contained in the active linked list.  Returns references 
        to constant elements.


::junction::WriteVector

    Template Parameters:
        typename Natural
        typename Elemental

    Type:
        Vectorial< Junctive< Natural, Elemental >, Positional< Elemental >, Elemental >

    Description:
        Vectorial trajection through a linked list function reference table.  
        Returns references to modifiable elements.


::junction::SafeWriteVector

    Template Parameters:
        typename Natural
        typename Elemental

    Type:
        Vectorial< Junctive< Natural, Elemental >, Positional< Elemental >, Elemental >

    Description:
        Vectorial trajection through a linked list function reference table.  
        Throws exceptions on positions who's locations are null and positions 
        which are not contained in the active linked list.  Returns references 
        to modifiable elements.


::junction::ReadIncrementScale

    Template Parameters:
        typename Natural
        typename Elemental

    Type:
        Scalar< const Junctive< Natural, Elemental >, Positional< Elemental >, const Elemental >

    Description:
        Scalar increment trajection through a linked list function reference 
        table.  Returns references to constant elements.


::junction::SafeReadIncrementScale

    Template Parameters:
        typename Natural
        typename Elemental

    Type:
        Scalar< const Junctive< Natural, Elemental >, Positional< Elemental >, const Elemental >

    Description:
        Scalar increment trajection through a linked list function reference
        table.  Throws exceptions on positions who's locations are null and 
        positions which are not contained in the active linked list.  Returns
        references to constant elements.


::junction::WriteIncrementScale

    Template Parameters:
        typename Natural
        typename Elemental

    Type:
        Scalar< Junctive< Natural, Elemental >, Positional< Elemental >, Elemental >

    Description:
        Scalar increment trajection through a linked list function reference 
        table.  Returns references to modifiable elements.


::junction::SafeWriteIncrementScale

    Template Parameters:
        typename Natural
        typename Elemental

    Type:
        Scalar< Junctive< Natural, Elemental >, Positional< Elemental >, Elemental >

    Description:
        Scalar increment trajection through a linked list function reference 
        table.  Throws exceptions on positions who's locations are null and 
        positions which are not contained in the active linked list.  Returns
        references to modifiable elements.


::junction::ReadDecrementScale

    Template Parameters:
        typename Natural
        typename Elemental

    Type:
        Scalar< const Junctive< Natural, Elemental >, Positional< Elemental >, const Elemental >

    Description:
        Scalar decrement trajection through a linked list function reference 
        table.  Returns references to constant elements.


::junction::SafeReadDecrementScale

    Template Parameters:
        typename Natural
        typename Elemental

    Type:
        Scalar< const Junctive< Natural, Elemental >, Positional< Elemental >, const Elemental >

    Description:
        Scalar decrement trajection through a linked list function reference 
        table.  Throws exceptions on positions who's locations are null and 
        positions which are not contained in the active linked list.  Returns
        references to constant elements.


::junction::WriteDecrementScale

    Template Parameters:
        typename Natural
        typename Elemental

    Type:
        Scalar< Junctive< Natural, Elemental >, Positional< Elemental >, Elemental >

    Description:
        Scalar decrement trajection through a linked list function reference 
        table.  Returns references to modifiable elements.


::junction::SafeWriteDecrementScale

    Template Parameters:
        typename Natural
        typename Elemental

    Type:
        Scalar< Junctive< Natural, Elemental >, Positional< Elemental >, Elemental >

    Description:
        Scalar decrement trajection through a linked list function reference 
        table.  Throws exceptions on positions who's locations are null and 
        positions which are not contained in the active linked list.  Returns
        references to modifiable elements.


::junction::ReadLiner

    Template Parameters:
        typename Natural
        typename Elemental

    Type:
        Lineal< const Junctive< Natural, Elemental >, Positional< Elemental >, const Elemental >

    Description:
        Lineal trajection through a linked list function reference table.  
        Returns references to constant elements.


::junction::SafeReadLiner

    Template Parameters:
        typename Natural
        typename Elemental

    Type:
        Lineal< const Junctive< Natural, Elemental >, Positional< Elemental >, const Elemental >

    Description:
        Lineal trajection through a linked list function reference table.  
        Throws exceptions on positions who's locations are null and positions 
        which are not contained in the active linked list.  Returns references 
        to constant elements.


::junction::WriteLiner

    Template Parameters:
        typename Natural
        typename Elemental

    Type:
        Lineal< Junctive< Natural, Elemental >, Positional< Elemental >, Elemental >

    Description:
        Lineal trajection through a linked list function reference table.  
        Returns references to modifiable elements.


::junction::SafeWriteLiner

    Template Parameters:
        typename Natural
        typename Elemental

    Type:
        Lineal< Junctive< Natural, Elemental >, Positional< Elemental >, Elemental >

    Description:
        Lineal trajection through a linked list function reference table.  
        Throws exceptions on positions who's locations are null and positions 
        which are not contained in the active linked list.  Returns references 
        to modifiable elements.


::junction::ReadIncrementDirection

    Template Parameters:
        typename Natural
        typename Elemental

    Type:
        Directional< const Junctive< Natural, Elemental >, Positional< Elemental >, const Elemental >

    Description:
        Directional increment trajection through a linked list function
        reference table.  Returns references to constant elements.


::junction::SafeReadIncrementScale

    Template Parameters:
        typename Natural
        typename Elemental

    Type:
        Directional< const Junctive< Natural, Elemental >, Positional< Elemental >, const Elemental >

    Description:
        Directional increment trajection through a linked list function 
        reference table.  Throws exceptions on positions who's locations are 
        null and positions which are not contained in the active linked list.  
        Returns references to constant elements.


::junction::WriteIncrementScale

    Template Parameters:
        typename Natural
        typename Elemental

    Type:
        Directional< Junctive< Natural, Elemental >, Positional< Elemental >, Elemental >

    Description:
        Directional increment trajection through a linked list function 
        reference table.  Returns references to modifiable elements.


::junction::SafeWriteIncrementScale

    Template Parameters:
        typename Natural
        typename Elemental

    Type:
        Directional< Junctive< Natural, Elemental >, Positional< Elemental >, Elemental >

    Description:
        Directional increment trajection through a linked list function 
        reference table.  Throws exceptions on positions who's locations are 
        null and positions which are not contained in the active linked list.  
        Returns references to modifiable elements.


::junction::ReadDecrementScale

    Template Parameters:
        typename Natural
        typename Elemental

    Type:
        Directional< const Junctive< Natural, Elemental >, Positional< Elemental >, const Elemental >

    Description:
        Directional decrement trajection through a linked list function 
        reference table.  Returns references to constant elements.


::junction::SafeReadDecrementScale

    Template Parameters:
        typename Natural
        typename Elemental

    Type:
        Directional< const Junctive< Natural, Elemental >, Positional< Elemental >, const Elemental >

    Description:
        Directional decrement trajection through a linked list function 
        reference table.  Throws exceptions on positions who's locations are 
        null and positions which are not contained in the active linked list.
        Returns references to constant elements.


::junction::WriteDecrementScale

    Template Parameters:
        typename Natural
        typename Elemental

    Type:
        Directional< Junctive< Natural, Elemental >, Positional< Elemental >, Elemental >

    Description:
        Directional decrement trajection through a linked list function 
        reference table.  Returns references to modifiable elements.


::junction::SafeWriteDecrementScale

    Template Parameters:
        typename Natural
        typename Elemental

    Type:
        Directional< Junctive< Natural, Elemental >, Positional< Elemental >, Elemental >

    Description:
        Directional decrement trajection through a linked list function 
        reference table.  Throws exceptions on positions who's locations are 
        null and positions which are not contained in the active linked list.
        Returns references to modifiable elements.


::junction::ReadAxis

    Template Parameters:
        typename Natural
        typename Elemental

    Type:
        Axial< const Junctive< Natural, Elemental >, Positional< Elemental >, const Elemental >

    Description:
        Axial trajection through a linked list function reference table.  
        Returns references to constant elements.


::junction::SafeReadAxis

    Template Parameters:
        typename Natural
        typename Elemental

    Type:
        Axial< const Junctive< Natural, Elemental >, Positional< Elemental >, const Elemental >

    Description:
        Axial trajection through a linked list function reference table.  
        Throws exceptions on positions who's locations are null and positions 
        which are not contained in the active linked list.  Returns references 
        to constant elements.


::junction::WriteAxis

    Template Parameters:
        typename Natural
        typename Elemental

    Type:
        Axial< Junctive< Natural, Elemental >, Positional< Elemental >, Elemental >

    Description:
        Axial trajection through a linked list function reference table.  
        Returns references to modifiable elements.


::junction::SafeWriteAxis

    Template Parameters:
        typename Natural
        typename Elemental

    Type:
        Axial< Junctive< Natural, Elemental >, Positional< Elemental >, Elemental >

    Description:
        Axial trajection through a linked list function reference table.  
        Throws exceptions on positions who's locations are null and positions 
        which are not contained in the active linked list.  Returns references 
        to modifiable elements.


                                    NAMESPACE


::junction::stdlib


                               VARIABLE TEMPLATES


::junction::stdlib::DefaultMallocAdjunct

    Template Parameters:
        typename Natural
        typename Elemental

    Type:
        Adjunctive< Natural, Elemental >

    Description:
        Malloc default junctional node allocation function reference table.  
        Supports pre-allocation of nodes, reuse of unused nodes but the 
        elemental type must support assignment from a reference to an element 
        as a constant.


::junction::stdlib::DefaultCallocAdjunct

    Template Parameters:
        typename Natural
        typename Elemental

    Type:
        Adjunctive< Natural, Elemental >

    Description:
        Calloc single element default junctional node allocation function 
        reference table.  Supports pre-allocation of nodes, reuse of unused
        nodes but the elemental type must support assignment from a reference to
        an element as a constant.  Initializes allocated memory to boolean false
        state for all addressable bits in the allocated memory.


                                    NAMESPACE


::junction::consecution


                                 TYPE TEMPLATES


::junction::consecution::Consequent (prototype alias)

    Template Parameters:
        typename Natural
        typename Elemental

    Return Type:
        bool
    
    Parameter Types:
        Referential< Junctive< Natural, Elemental > >
        Referential< const Elemental >

    Description:
    
        Junctive accede and proceed function prototype template.  Facilitates 
        template parameter definitions in the ::junction::selection and 
        ::junction::collection namespaces.
    

::junction::consecution::Precedent (prototype alias)

    Template Parameters:
        typename Natural
        typename Elemental

    Return Type:
        bool
    
    Parameter Types:
        Referential< Junctive< Natural, Elemental > >
        Referential< const Positional< Elemental > >
        Referential< const Elemental >

    Description:
    
        Junctive precede function prototype template.  Facilitates template
        parameter definitions in the ::junction::selection and 
        ::junction::collection namespaces.
    

::junction::consecution::Concessive (prototype alias)

    Template Parameters:
        typename Natural
        typename Elemental

    Return Type:
        bool
    
    Parameter Types:
        Referential< Junctive< Natural, Elemental > >
        Referential< const Positional< Elemental > >
        Referential< const Natural >

    Description:
    
        Junctive concede function prototype template.  Facilitates template
        parameter definitions in the ::junction::selection and 
        ::junction::collection namespaces.
    

::junction::consecution::SubsequentlyConsequent (prototype alias)

    Template Parameters:
		typename Relative
		typename Appositional
		typename Natural
		typename Elemental

    Return Type:
        bool
    
    Parameter Types:
            Referential< Junctive< Natural, Elemental > >
            Referential< const Directional< const Relative, Appositional, const Elemental > >
            Referential< const Relative >
            Referential< const Appositional >
            Referential< const Appositional >

    Description:
    
        Junctive (subsequence) accede and proceed function prototype template.  
        Facilitates template parameter definitions in the ::junction::selection 
        and ::junction::collection namespaces.


                               FUNCTION TEMPLATES


::junction::consecution::Sequence

    Template Parameters:
		typename Relative
		typename Appositional
		typename Natural
		typename Elemental
		Referential< const Adjunctive< Natural, Elemental > >
			Adjunct

    Return Type:
        bool
    
    Parameters:
		Referential< Junctive< Natural, Elemental > >
			list
		Referential< Locational< Junctional< Elemental > > >
			head
		Referential< Locational< Junctional< Elemental > > >
			tail
		Referential< Natural >
			length
		Referential< const Directional< const Relative, Appositional, const Elemental > >
			direction
		Referential< const Relative >
			space
		Referential< const Appositional >
			from
		Referential< const Appositional >
			to

	Description:
        Given a reference to a junctive type list, a reference to a locational
        head node location, a reference to a locational tail node location, a
        reference to a natural integer length, a reference to a directional
        trajectory direction as a constant, a reference to a relative space to
        read from as a constant, a reference to an appositional from position
        and an appositional to position in the same order as direction, returns
        true if a complete sequence of nodes were produced, duplicating the
        element values of the (sub/)sequence in the relative space.  The
        resulting sequence of junctional nodes are not linked into the active
        list.  On success, the head and tail will not be null and length will be
        assigned a value greater than zero.


::junction::consecution::Account

    Template Parameters:
		typename Natural
		typename Elemental

    Return Type:
        Natural
    
    Parameters:
		Referential< const Junctive< Natural, Elemental > >
			list

	Description:
        Given a reference to a junctive type list as a constant, returns the 
        number of accounted elements in the active linked list.


::junction::consecution::Accede

    Template Parameters:
		typename Natural
		typename Elemental
		Referential< const Adjunctive< Natural, Elemental > >
			Adjunct

    Return Type:
        bool
    
    Parameters:
		Referential< Junctive< Natural, Elemental > >
			list
	    Referential< const Elemental >
	        value

	Description:
        Given a reference to a junctive type list as a constant and a reference
        to an elemental value as a constant, returns true if a node was
        successfully assigned the value and added to the beginning of the active
        linked list sequence.


::junction::consecution::Accede

    Template Parameters:
        typename Relative
        typename Appositional
		typename Natural
		typename Elemental
		Referential< const Adjunctive< Natural, Elemental > >
			Adjunct

    Return Type:
        bool
    
    Parameters:
		Referential< Junctive< Natural, Elemental > >
			list
		Referential< const Directional< const Relative, Appositional, const Elemental > >
			direction
		Referential< const Relative >
			space
		Referential< const Appositional >
			from
		Referential< const Appositional >
			to

    Description:
        Given a reference to a junctive type list as a constant, a reference to
        a directional trajectory as a constant, a reference to a relative space
        to read from as a constant, a reference to an appositional from 
        position and a reference to an appositional to position in the same
        order as direction, returns true if one or more nodes were successfully
        assigned values from the relative space and added to the beginning of
        the active linked list sequence in the order read from the relative 
        space.


::junction::consecution::Precede

    Template Parameters:
		typename Natural
		typename Elemental
		Referential< const Adjunctive< Natural, Elemental > >
			Adjunct

    Return Type:
        bool
    
    Parameters:
		Referential< Junctive< Natural, Elemental > >
			list
		Referential< const Positional< Elemental > >
			rank
	    Referential< const Elemental >
	        value

	Description:
        Given a reference to a junctive type list as a constant, a reference to
        a positional rank as a constant and a reference to an elemental value as
        a constant, returns true if a node was successfully assigned the value 
        and inserted before the given rank (position) in the active linked list 
        sequence.


::junction::consecution::PrecedeSafely

    Template Parameters:
		typename Natural
		typename Elemental
		Referential< const Adjunctive< Natural, Elemental > >
			Adjunct

    Return Type:
        bool
    
    Parameters:
		Referential< Junctive< Natural, Elemental > >
			list
		Referential< const Positional< Elemental > >
			rank
	    Referential< const Elemental >
	        value

	Description:
        Given a reference to a junctive type list as a constant, a reference to
        a positional rank as a constant and a reference to an elemental value as
        a constant, throws rank if it's location is null.  Returns true if a 
        node was successfully assigned the value and inserted before the given 
        rank (position) in the active linked list sequence.


::junction::consecution::Precede

    Template Parameters:
        typename Relative
        typename Appositional
		typename Natural
		typename Elemental
		Referential< const Adjunctive< Natural, Elemental > >
			Adjunct

    Return Type:
        bool
    
    Parameters:
		Referential< Junctive< Natural, Elemental > >
			list
		Referential< const Positional< Elemental > >
			rank
		Referential< const Directional< const Relative, Appositional, const Elemental > >
			direction
		Referential< const Relative >
			space
		Referential< const Appositional >
			from
		Referential< const Appositional >
			to

    Description:
        Given a reference to a junctive type list as a constant, a reference to
        a positional rank as a constant, a reference to a directional trajectory 
        as a constant, a reference to a relative space to read from as a 
        constant, a reference to an appositional from position and a reference 
        to an appositional to position in the same order as direction, returns 
        true if one or more nodes were successfully assigned values from the 
        relative space and inserted before the given rank (position) in the 
        active linked list sequence in the order read from the relative space.


::junction::consecution::PrecedeSafely

    Template Parameters:
        typename Relative
        typename Appositional
		typename Natural
		typename Elemental
		Referential< const Adjunctive< Natural, Elemental > >
			Adjunct

    Return Type:
        bool
    
    Parameters:
		Referential< Junctive< Natural, Elemental > >
			list
		Referential< const Positional< Elemental > >
			rank
		Referential< const Directional< const Relative, Appositional, const Elemental > >
			direction
		Referential< const Relative >
			space
		Referential< const Appositional >
			from
		Referential< const Appositional >
			to

    Description:
        Given a reference to a junctive type list as a constant, a reference to
        a positional rank as a constant, a reference to a directional trajectory 
        as a constant, a reference to a relative space to read from as a 
        constant, a reference to an appositional from position and a reference 
        to an appositional to position in the same order as direction, throws 
        rank if it's location is null.  Returns true if one or more nodes were 
        successfully assigned values from the relative space and inserted before
        the given rank (position) in the active linked list sequence in the 
        order read from the relative space.


::junction::consecution::Proceed

    Template Parameters:
		typename Natural
		typename Elemental
		Referential< const Adjunctive< Natural, Elemental > >
			Adjunct

    Return Type:
        bool
    
    Parameters:
		Referential< Junctive< Natural, Elemental > >
			list
	    Referential< const Elemental >
	        value

	Description:
        Given a reference to a junctive type list as a constant and a reference
        to an elemental value as a constant, returns true if a node was
        successfully assigned the value and added to the end of the active 
        linked list sequence.


::junction::consecution::Proceed

    Template Parameters:
        typename Relative
        typename Appositional
		typename Natural
		typename Elemental
		Referential< const Adjunctive< Natural, Elemental > >
			Adjunct

    Return Type:
        bool
    
    Parameters:
		Referential< Junctive< Natural, Elemental > >
			list
		Referential< const Directional< const Relative, Appositional, const Elemental > >
			direction
		Referential< const Relative >
			space
		Referential< const Appositional >
			from
		Referential< const Appositional >
			to

    Description:
        Given a reference to a junctive type list as a constant, a reference to
        a directional trajectory as a constant, a reference to a relative space
        to read from as a constant, a reference to an appositional from 
        position and a reference to an appositional to position in the same
        order as direction, returns true if one or more nodes were successfully
        assigned values from the relative space and added to the end of the 
        active linked list sequence in the order read from the relative space.


::junction::consecution::Succeed

    Template Parameters:
		typename Natural
		typename Elemental
		Referential< const Adjunctive< Natural, Elemental > >
			Adjunct

    Return Type:
        bool
    
    Parameters:
		Referential< Junctive< Natural, Elemental > >
			list
	    Referential< const Natural >
	        count

	Description:
        Given a reference to a junctive type list as a constant and a reference
        to a natural integer count as a constant, returns true if count nodes 
        were successfully removed from the beginning of the active linked list.
        If there are less than count nodes in the active list, returns false
        without removing any nodes from the active linked list.


::junction::consecution::Concede

    Template Parameters:
		typename Natural
		typename Elemental
		Referential< const Adjunctive< Natural, Elemental > >
			Adjunct

    Return Type:
        bool
    
    Parameters:
		Referential< Junctive< Natural, Elemental > >
			list
		Referential< const Positional< Elemental > >
			rank
	    Referential< const Natural >
	        count

	Description:
        Given a reference to a junctive type list as a constant, a reference to
        a positional rank as a constant and a reference to a natural integer 
        count as a constant, returns true if count nodes were successfully 
        removed at the given rank in the active linked list.  If there are less
        than count nodes available from the given rank to the end of the list, 
        returns false without removing any nodes from the active linked list.


::junction::consecution::ConcedeSafely

    Template Parameters:
		typename Natural
		typename Elemental
		Referential< const Adjunctive< Natural, Elemental > >
			Adjunct

    Return Type:
        bool
    
    Parameters:
		Referential< Junctive< Natural, Elemental > >
			list
		Referential< const Positional< Elemental > >
			rank
	    Referential< const Natural >
	        count

	Description:
        Given a reference to a junctive type list as a constant, a reference to
        a positional rank as a constant and a reference to a natural integer 
        count as a constant, throws rank if it's location is null.  Returns true 
        if count nodes were successfully removed at the given rank in the active 
        linked list.  If there are less than count nodes available from the 
        given rank to the end of the list, returns false without removing any 
        nodes from the active linked list.


::junction::consecution::Recede

    Template Parameters:
		typename Natural
		typename Elemental
		Referential< const Adjunctive< Natural, Elemental > >
			Adjunct

    Return Type:
        bool
    
    Parameters:
		Referential< Junctive< Natural, Elemental > >
			list
	    Referential< const Natural >
	        count

	Description:
        Given a reference to a junctive type list as a constant and a reference
        to a natural integer count as a constant, returns true if count nodes 
        were successfully removed from the end of the active linked list.  If 
        there are less than count nodes in the active list, returns false 
        without removing any nodes from the active linked list.


                               VARIABLE TEMPLATES


::junction::consecution::JunctionSubsequence

    Template Parameters:
        typename Relative
        typename Appositional
        typename Natural
        typename Elemental
		Referential< const Adjunctive< Natural, Elemental > >
			Adjunct

    Type:
        Subsequent< Junctive< Natural, Elemental >, Positional< Elemental >, Relative, Appositional, Elemental >

    Description:
        Linked list subsequence function reference table.  Generates versions of
        function templates suitable for reading from any spatial type which
        supports directional trajection.


::junction::consecution::SafeJunctionSubsequence

    Template Parameters:
        typename Relative
        typename Appositional
        typename Natural
        typename Elemental
		Referential< const Adjunctive< Natural, Elemental > >
			Adjunct

    Type:
        Subsequent< Junctive< Natural, Elemental >, Positional< Elemental >, Relative, Appositional, Elemental >

    Description:
        Linked list subsequence function reference table.  Throws exceptions on 
        null pointer locations.  Generates versions of function templates 
        suitable for reading from any spatial type which supports directional 
        trajection.


::junction::consecution::JunctionSequencer

    Template Parameters:
        typename Relative
        typename Appositional
        typename Natural
        typename Elemental
		Referential< const Adjunctive< Natural, Elemental > >
			Adjunct

    Type:
        Sequent< Junctive< Natural, Elemental >, Positional< Elemental >, Natural, Elemental >

    Description:
        Linked list sequence function reference table.  Implements the generic 
        sequent interface for linked lists.


::junction::consecution::SafeJunctionSequencer

    Template Parameters:
        typename Relative
        typename Appositional
        typename Natural
        typename Elemental
		Referential< const Adjunctive< Natural, Elemental > >
			Adjunct

    Type:
        Sequent< Junctive< Natural, Elemental >, Positional< Elemental >, Natural, Elemental >

    Description:
        Linked list sequence function reference table.  Throws exceptions on 
        null pointer locations.  Implements the generic sequent interface for 
        linked lists.


                                    NAMESPACE


::junction::selection


                               FUNCTION TEMPLATES


::junction::selection::AccreditSelection

    Template Parameters:
		typename Natural
		typename Elemental
		Referential< Assortive< Elemental > >
			Balanced

    Return Type:
        bool
    
    Parameters:
		Referential< const Junctive< Natural, Elemental > >
			set
	    Referential< const Elemental >
	        value

	Description:
        Given a reference to a junctive set as a constant and a reference to an 
        elemental value as a constant, returns true if this set contains value.
        
     
::junction::selection::ComposeSelection

    Template Parameters:
		typename Natural
		typename Elemental
		Referential< Consequent< Natural, Elemental > >
			Proceed
		Referential< Assortive< Elemental > >
			Balanced

    Return Type:
        bool
    
    Parameters:
		Referential< Junctive< Natural, Elemental > >
			set
	    Referential< const Elemental >
	        value

	Description:
        Given a reference to a junctive set and a reference to an elemental 
        value as a constant, returns true if value was added to the set.  If the
        set already contains value, simply returns false.
        
     
::junction::selection::DiscomposeSelection

    Template Parameters:
		typename Natural
		typename Elemental
		Referential< Concessive< Natural, Elemental > >
			Concede
		Referential< Assortive< Elemental > >
			Balanced

    Return Type:
        bool
    
    Parameters:
		Referential< Junctive< Natural, Elemental > >
			set
	    Referential< const Elemental >
	        value

	Description:
        Given a reference to a junctive set and a reference to an elemental 
        value as a constant, returns true if value was removed from the set.
        
     
::junction::selection::RecomposeSelection

    Template Parameters:
		typename Natural
		typename Elemental
		Referential< Consequent< Natural, Elemental > >
			Proceed
		Referential< Concessive< Natural, Elemental > >
			Concede
		Referential< Assortive< Elemental > >
			Balanced

    Return Type:
        bool
    
    Parameters:
		Referential< Junctive< Natural, Elemental > >
			set
	    Referential< const Elemental >
	        original
	    Referential< const Elemental >
	        replacement

	Description:
        Given a reference to a junctive set, a reference to an elemental 
        original value as a constant and a reference to an elemental replacement
        value as a constant, returns true if original was replaced by 
        replacement.  Returns false if replacement already existed in the set, 
        without removing original.
        
     
::junction::selection::ComplementSelections

    Template Parameters:
		typename Basic
		typename BasicPositional
		typename Relative
		typename RelativePositional
		typename Natural
		typename Elemental
		Referential< Consequent< Natural, Elemental > >
			Proceed
		Referential< Assortive< Elemental > >
			Balanced

    Return Type:
        bool
    
    Parameters:
		Referential< Junctive< Natural, Elemental > >
			operand
		Referential< const Directional< const Basic, BasicPositional, const Elemental > >
			basis
		Referential< const Basic >
			base_set
		Referential< const Directional< const Relative, RelativePositional, const Elemental > >
			relativity
		Referential< const Relative >
			relative_set

	Description:
        Given a reference to a junctive operand set, a reference to a 
        directional basis as a constant, a reference to a relative base sorted 
        set as a constant, a reference to a directional relativity as a constant
        and a reference to a relative sorted set as a constant, returns true if
        the relative complement of sets was successfully completed and the 
        operand set contains the result, which may be empty.  If it does not 
        complete succesfully, the operand set will be empty and false is 
        returned.  
        
     
::junction::selection::DifferentiateSelections

    Template Parameters:
		typename Basic
		typename BasicPositional
		typename Relative
		typename RelativePositional
		typename Natural
		typename Elemental
		Referential< Consequent< Natural, Elemental > >
			Proceed
		Referential< Assortive< Elemental > >
			Balanced

    Return Type:
        bool
    
    Parameters:
		Referential< Junctive< Natural, Elemental > >
			operand
		Referential< const Directional< const Basic, BasicPositional, const Elemental > >
			basis
		Referential< const Basic >
			base_set
		Referential< const Directional< const Relative, RelativePositional, const Elemental > >
			relativity
		Referential< const Relative >
			relative_set

	Description:
        Given a reference to a junctive operand set, a reference to a 
        directional basis as a constant, a reference to a relative base sorted 
        set as a constant, a reference to a directional relativity as a constant
        and a reference to a relative sorted set as a constant, returns true if
        the symmetric difference of sets was successfully completed and the 
        operand set contains the result, which may be empty.  If it does not 
        complete succesfully, the operand set will be empty and false is 
        returned.  
        
     
::junction::selection::IntersectSelections

    Template Parameters:
		typename Basic
		typename BasicPositional
		typename Relative
		typename RelativePositional
		typename Natural
		typename Elemental
		Referential< Consequent< Natural, Elemental > >
			Proceed
		Referential< Assortive< Elemental > >
			Balanced

    Return Type:
        bool
    
    Parameters:
		Referential< Junctive< Natural, Elemental > >
			operand
		Referential< const Directional< const Basic, BasicPositional, const Elemental > >
			basis
		Referential< const Basic >
			base_set
		Referential< const Directional< const Relative, RelativePositional, const Elemental > >
			relativity
		Referential< const Relative >
			relative_set

	Description:
        Given a reference to a junctive operand set, a reference to a 
        directional basis as a constant, a reference to a relative base sorted 
        set as a constant, a reference to a directional relativity as a constant
        and a reference to a relative sorted set as a constant, returns true if
        the intesection of sets was successfully completed and the operand set 
        contains the result, which may be empty.  If it does not complete 
        succesfully, the operand set will be empty and false is returned.  
        
     
::junction::selection::UniteSelections

    Template Parameters:
		typename Basic
		typename BasicPositional
		typename Relative
		typename RelativePositional
		typename Natural
		typename Elemental
		Referential< Consequent< Natural, Elemental > >
			Proceed
		Referential< Assortive< Elemental > >
			Balanced

    Return Type:
        bool
    
    Parameters:
		Referential< Junctive< Natural, Elemental > >
			operand
		Referential< const Directional< const Basic, BasicPositional, const Elemental > >
			basis
		Referential< const Basic >
			base_set
		Referential< const Directional< const Relative, RelativePositional, const Elemental > >
			relativity
		Referential< const Relative >
			relative_set

	Description:
        Given a reference to a junctive operand set, a reference to a 
        directional basis as a constant, a reference to a relative base sorted 
        set as a constant, a reference to a directional relativity as a constant
        and a reference to a relative sorted set as a constant, returns true if
        the union of sets was successfully completed and the operand set 
        contains the result, which may be empty.  If it does not complete 
        succesfully, the operand set will be empty and false is returned.  


                               VARIABLE TEMPLATES


::junction::selection::SearchSelection

    Template Parameters:
		typename Natural
		typename Elemental
		Referential< Assortive< Elemental > >
			Balanced

    Type:
        auto

	Description:
        Linear search function reference template.  Shortens the template 
        specifier requirements in order to make use of the SearchLinealy 
        function template in the sortation namespace.


::junction::selection::JunctionComposer

    Template Parameters:
        typename Natural
        typename Elemental
		Referential< const Adjunctive< Natural, Elemental > >
			Adjunct
	    Referential< Assortive< Elemental > >
	        Balanced

    Type:
        Compositional< Junctive< Natural, Elemental >, Natural, Elemental >

    Description:
        Linked list set composition function reference table.  Implements the 
        generic compositional interface for elementary set composition.  
        Respects the semantics of the "composer" member of the "Selective" type
        template.

    
::junction::selection::SafeJunctionComposer

    Template Parameters:
        typename Natural
        typename Elemental
		Referential< const Adjunctive< Natural, Elemental > >
			Adjunct
	    Referential< Assortive< Elemental > >
	        Balanced

    Type:
        Compositional< Junctive< Natural, Elemental >, Natural, Elemental >

    Description:
        Linked list set composition function reference table.  Throws exceptions 
        on null pointer locations.  Implements the generic compositional 
        interface for elementary set composition.  Respects the semantics of the 
        "composer" member of the "Selective" type template.


::junction::selection::JunctionSection

    Template Parameters:
		typename Basic
		typename BasicPositional
		typename Relative
		typename RelativePositional
		typename Natural
		typename Elemental
		Referential< const Adjunctive< Natural, Elemental > >
			Adjunct
		Referential< Assortive< Elemental > >
			Balanced

    Type:
        Sectional< Junctive< Natural, Elemental >, Basic, BasicPositional, Relative, RelativePositional, Elemental >

    Description:
        Linked list set section function reference table.  Implements the 
        generic sectional interface for set operations.


::junction::selection::SafeJunctionSection

    Template Parameters:
		typename Basic
		typename BasicPositional
		typename Relative
		typename RelativePositional
		typename Natural
		typename Elemental
		Referential< const Adjunctive< Natural, Elemental > >
			Adjunct
		Referential< Assortive< Elemental > >
			Balanced

    Type:
        Sectional< Junctive< Natural, Elemental >, Basic, BasicPositional, Relative, RelativePositional, Elemental >

    Description:
        Linked list set section function reference table.  Throws exceptions on
        null pointer locations.  Implements the generic sectional interface for 
        set operations.


::junction::selection::JunctionSelector

    Template Parameters:
        typename Natural
        typename Elemental
		Referential< const Adjunctive< Natural, Elemental > >
			Adjunct
	    Referential< Assortive< Elemental > >
	        Balanced

    Type:
        Selective< Junctive< Natural, Elemental >, Positional< Elemental >, Natural, Elemental >

    Description:
        Linked list set selection function reference table.  Implements the 
        generic selective interface for linked list based sets.  


::junction::selection::SafeJunctionSelector

    Template Parameters:
        typename Natural
        typename Elemental
		Referential< const Adjunctive< Natural, Elemental > >
			Adjunct
	    Referential< Assortive< Elemental > >
	        Balanced

    Type:
        Selective< Junctive< Natural, Elemental >, Positional< Elemental >, Natural, Elemental >

    Description:
        Linked list set selection function reference table.  Throws exceptions 
        on null pointer locations.  Implements the generic selective interface 
        for linked list based sets.  


                                    NAMESPACE


::junction::collection


                               FUNCTION TEMPLATES


::junction::collection::AccreditCollection

    Template Parameters:
		typename Natural
		typename Elemental
		Referential< Assortive< Elemental > >
			Balanced
		Referential< Assortive< Elemental > >
			Sorted

    Return Type:
        bool
    
    Parameters:
		Referential< const Junctive< Natural, Elemental > >
			set
	    Referential< const Elemental >
	        value

	Description:
        Given a reference to a junctive sorted set as a constant and a reference
        to an elemental value as a constant, returns true if this set contains 
        value.
        
     
::junction::collection::ComposeCollection

    Template Parameters:
		typename Natural
		typename Elemental
		Referential< Precedent< Natural, Elemental > >
			Precede
		Referential< Consequent< Natural, Elemental > >
			Proceed
		Referential< Assortive< Elemental > >
			Balanced
		Referential< Assortive< Elemental > >
			Sorted

    Return Type:
        bool
    
    Parameters:
		Referential< Junctive< Natural, Elemental > >
			set
	    Referential< const Elemental >
	        value

	Description:
        Given a reference to a junctive sorted set and a reference to an 
        elemental value as a constant, returns true if value was added to the
        set.  If the set already contains value, simply returns false.
        
     
::junction::collection::DiscomposeCollection

    Template Parameters:
		typename Natural
		typename Elemental
		Referential< Concessive< Natural, Elemental > >
			Concede
		Referential< Assortive< Elemental > >
			Balanced
		Referential< Assortive< Elemental > >
			Sorted

    Return Type:
        bool
    
    Parameters:
		Referential< Junctive< Natural, Elemental > >
			set
	    Referential< const Elemental >
	        value

	Description:
        Given a reference to a junctive sorted set and a reference to an 
        elemental value as a constant, returns true if value was removed from 
        the set.
        
     
::junction::collection::RecomposeCollection

    Template Parameters:
		typename Natural
		typename Elemental
		Referential< Precedent< Natural, Elemental > >
			Precede
		Referential< Consequent< Natural, Elemental > >
			Proceed
		Referential< Concessive< Natural, Elemental > >
			Concede
		Referential< Assortive< Elemental > >
			Balanced
		Referential< Assortive< Elemental > >
			Sorted

    Return Type:
        bool
    
    Parameters:
		Referential< Junctive< Natural, Elemental > >
			set
	    Referential< const Elemental >
	        original
	    Referential< const Elemental >
	        replacement

	Description:
        Given a reference to a junctive sorted set, a reference to an elemental 
        original value as a constant and a reference to an elemental replacement
        value as a constant, returns true if original was replaced by 
        replacement.  Returns false if replacement already existed in the set, 
        without removing original.
        
     
::junction::collection::ComplementSelections

    Template Parameters:
		typename Basic
		typename BasicPositional
		typename Relative
		typename RelativePositional
		typename Natural
		typename Elemental
		Referential< Precedent< Natural, Elemental > >
			Precede
		Referential< Consequent< Natural, Elemental > >
			Proceed
		Referential< Assortive< Elemental > >
			Balanced
		Referential< Assortive< Elemental > >
			Sorted

    Return Type:
        bool
    
    Parameters:
		Referential< Junctive< Natural, Elemental > >
			operand
		Referential< const Directional< const Basic, BasicPositional, const Elemental > >
			basis
		Referential< const Basic >
			base_set
		Referential< const Directional< const Relative, RelativePositional, const Elemental > >
			relativity
		Referential< const Relative >
			relative_set

	Description:
        Given a reference to a junctive operand sorted set, a reference to an 
        axial basis as a constant, a reference to a relative base sorted set as 
        a constant, a reference to an axial relativity as a constant and a 
        reference to a relative sorted set as a constant, returns true if the 
        relative complement of sets was successfully completed and the operand 
        set contains the result, which may be empty.  If it does not complete 
        succesfully, the operand set will be empty and false is returned.  
        Useful when the base and/or relative sets are not sorted or not in the 
        same sorted order as the operand set.
        
     
::junction::collection::DifferentiateSelections

    Template Parameters:
		typename Basic
		typename BasicPositional
		typename Relative
		typename RelativePositional
		typename Natural
		typename Elemental
		Referential< Precedent< Natural, Elemental > >
			Precede
		Referential< Consequent< Natural, Elemental > >
			Proceed
		Referential< Assortive< Elemental > >
			Balanced
		Referential< Assortive< Elemental > >
			Sorted

    Return Type:
        bool
    
    Parameters:
		Referential< Junctive< Natural, Elemental > >
			operand
		Referential< const Directional< const Basic, BasicPositional, const Elemental > >
			basis
		Referential< const Basic >
			base_set
		Referential< const Directional< const Relative, RelativePositional, const Elemental > >
			relativity
		Referential< const Relative >
			relative_set

	Description:
        Given a reference to a junctive operand sorted set, a reference to an 
        axial basis as a constant, a reference to a relative base sorted set as 
        a constant, a reference to an axial relativity as a constant and a 
        reference to a relative sorted set as a constant, returns true if the 
        symmetric difference of sets was successfully completed and the operand
        set contains the result, which may be empty.  If it does not complete 
        succesfully, the operand set will be empty and false is returned.  
        Useful when the base and/or relative sets are not sorted or not in the 
        same sorted order as the operand set.
        
     
::junction::collection::IntersectSelections

    Template Parameters:
		typename Basic
		typename BasicPositional
		typename Relative
		typename RelativePositional
		typename Natural
		typename Elemental
		Referential< Precedent< Natural, Elemental > >
			Precede
		Referential< Consequent< Natural, Elemental > >
			Proceed
		Referential< Assortive< Elemental > >
			Balanced
		Referential< Assortive< Elemental > >
			Sorted

    Return Type:
        bool
    
    Parameters:
		Referential< Junctive< Natural, Elemental > >
			operand
		Referential< const Directional< const Basic, BasicPositional, const Elemental > >
			basis
		Referential< const Basic >
			base_set
		Referential< const Directional< const Relative, RelativePositional, const Elemental > >
			relativity
		Referential< const Relative >
			relative_set

	Description:
        Given a reference to a junctive operand sorted set, a reference to an 
        axial basis as a constant, a reference to a relative base sorted set as 
        a constant, a reference to an axial relativity as a constant and a 
        reference to a relative sorted set as a constant, returns true if the 
        intesection of sets was successfully completed and the operand set 
        contains the result, which may be empty.  If it does not complete 
        succesfully, the operand set will be empty and false is returned.  
        Useful when the base and/or relative sets are not sorted or not in the 
        same sorted order as the operand set.
        
     
::junction::collection::UniteSelections

    Template Parameters:
		typename Basic
		typename BasicPositional
		typename Relative
		typename RelativePositional
		typename Natural
		typename Elemental
		Referential< Precedent< Natural, Elemental > >
			Precede
		Referential< Consequent< Natural, Elemental > >
			Proceed
		Referential< Assortive< Elemental > >
			Balanced
		Referential< Assortive< Elemental > >
			Sorted

    Return Type:
        bool
    
    Parameters:
		Referential< Junctive< Natural, Elemental > >
			operand
		Referential< const Directional< const Basic, BasicPositional, const Elemental > >
			basis
		Referential< const Basic >
			base_set
		Referential< const Directional< const Relative, RelativePositional, const Elemental > >
			relativity
		Referential< const Relative >
			relative_set

	Description:
        Given a reference to a junctive operand sorted set, a reference to an 
        axial basis as a constant, a reference to a relative base sorted set as 
        a constant, a reference to an axial relativity as a constant and a 
        reference to a relative sorted set as a constant, returns true if the 
        union of sets was successfully completed and the operand set contains 
        the result, which may be empty.  If it does not complete succesfully, 
        the operand set will be empty and false is returned.  Useful when the
        base and/or relative sets are not sorted or not in the same sorted
        order as the operand set.


::junction::collection::ComplementCollections

    Template Parameters:
		typename Basic
		typename BasicPositional
		typename Relative
		typename RelativePositional
		typename Natural
		typename Elemental
		Referential< Consequent< Natural, Elemental > >
			ProceedOne
		Referential< SubsequentlyConsequent< Relative, RelativePositional, Natural, Elemental > >
			ProceedMany
		Referential< Assortive< Elemental > >
			Balanced
		Referential< Assortive< Elemental > >
			Sorted

    Return Type:
        bool
    
    Parameters:
		Referential< Junctive< Natural, Elemental > >
			operand
		Referential< const Axial< const Basic, BasicPositional, const Elemental > >
			basis
		Referential< const Basic >
			base_set
		Referential< const Axial< const Relative, RelativePositional, const Elemental > >
			relativity
		Referential< const Relative >
			relative_set

	Description:
        Given a reference to a junctive operand sorted set, a reference to an 
        axial basis as a constant, a reference to a relative base sorted set as 
        a constant, a reference to an axial relativity as a constant and a 
        reference to a relative sorted set as a constant, returns true if the 
        relative complement of sets was successfully completed and the operand 
        set contains the result, which may be empty.  If it does not complete 
        succesfully, the operand set will be empty and false is returned.  All 
        sets must be in the same sorted order.
        
     
::junction::collection::DifferentiateCollections

    Template Parameters:
		typename Basic
		typename BasicPositional
		typename Relative
		typename RelativePositional
		typename Natural
		typename Elemental
		Referential< Consequent< Natural, Elemental > >
			ProceedOne
		Referential< SubsequentlyConsequent< Relative, RelativePositional, Natural, Elemental > >
			ProceedMany
		Referential< Assortive< Elemental > >
			Balanced
		Referential< Assortive< Elemental > >
			Sorted

    Return Type:
        bool
    
    Parameters:
		Referential< Junctive< Natural, Elemental > >
			operand
		Referential< const Axial< const Basic, BasicPositional, const Elemental > >
			basis
		Referential< const Basic >
			base_set
		Referential< const Axial< const Relative, RelativePositional, const Elemental > >
			relativity
		Referential< const Relative >
			relative_set

	Description:
        Given a reference to a junctive operand sorted set, a reference to an 
        axial basis as a constant, a reference to a relative base sorted set as 
        a constant, a reference to an axial relativity as a constant and a 
        reference to a relative sorted set as a constant, returns true if the 
        symmetric difference of sets was successfully completed and the operand 
        set contains the result, which may be empty.  If it does not complete 
        succesfully, the operand set will be empty and false is returned.  All 
        sets must be in the same sorted order.
        
     
::junction::collection::IntersectCollections

    Template Parameters:
		typename Basic
		typename BasicPositional
		typename Relative
		typename RelativePositional
		typename Natural
		typename Elemental
		Referential< Consequent< Natural, Elemental > >
			Proceed
		Referential< Assortive< Elemental > >
			Balanced
		Referential< Assortive< Elemental > >
			Sorted

    Return Type:
        bool
    
    Parameters:
		Referential< Junctive< Natural, Elemental > >
			operand
		Referential< const Axial< const Basic, BasicPositional, const Elemental > >
			basis
		Referential< const Basic >
			base_set
		Referential< const Axial< const Relative, RelativePositional, const Elemental > >
			relativity
		Referential< const Relative >
			relative_set

	Description:
        Given a reference to a junctive operand sorted set, a reference to an 
        axial basis as a constant, a reference to a relative base sorted set as 
        a constant, a reference to an axial relativity as a constant and a 
        reference to a relative sorted set as a constant, returns true if the 
        intersection of sets was successfully completed and the operand set 
        contains the result, which may be empty.  If it does not complete 
        succesfully, the operand set will be empty and false is returned.  All 
        sets must be in the same sorted order.
        
        
     
::junction::collection::UniteCollections

    Template Parameters:
		typename Basic
		typename BasicPositional
		typename Relative
		typename RelativePositional
		typename Natural
		typename Elemental
		Referential< Consequent< Natural, Elemental > >
			ProceedOne
		Referential< SubsequentlyConsequent< Relative, RelativePositional, Natural, Elemental > >
			ProceedMany
		Referential< Assortive< Elemental > >
			Balanced
		Referential< Assortive< Elemental > >
			Sorted

    Return Type:
        bool
    
    Parameters:
		Referential< Junctive< Natural, Elemental > >
			operand
		Referential< const Axial< const Basic, BasicPositional, const Elemental > >
			basis
		Referential< const Basic >
			base_set
		Referential< const Axial< const Relative, RelativePositional, const Elemental > >
			relativity
		Referential< const Relative >
			relative_set

	Description:
        Given a reference to a junctive operand sorted set, a reference to an 
        axial basis as a constant, a reference to a relative base sorted set as 
        a constant, a reference to an axial relativity as a constant and a 
        reference to a relative sorted set as a constant, returns true if the 
        union of sets was successfully completed and the operand set contains 
        the result, which may be empty.  If it does not complete succesfully, 
        the operand set will be empty and false is returned.  All sets must be 
        in the same sorted order.


                               VARIABLE TEMPLATES


::junction::collection::SearchCollection

    Template Parameters:
		typename Natural
		typename Elemental
		Referential< Assortive< Elemental > >
			Balanced
		Referential< Assortive< Elemental > >
			Sorted

    Type:
        auto

	Description:
        Bisection search function reference template.  Shortens the template 
        specifier requirements in order to make use of the SearchBisectionally 
        function template in the sortation namespace.


::junction::collection::JunctionSortedComposer

    Template Parameters:
        typename Natural
        typename Elemental
		Referential< const Adjunctive< Natural, Elemental > >
			Adjunct
	    Referential< Assortive< Elemental > >
	        Balanced
		Referential< Assortive< Elemental > >
			Sorted

    Type:
        Compositional< Junctive< Natural, Elemental >, Natural, Elemental >

    Description:
        Linked list sorted set composition function reference table.  Implements
        the generic compositional interface for elementary sorted set 
        composition.  Respects the semantics of the "composer" member of the 
        "Selective" type template.

    
::junction::collection::SafeSortedJunctionComposer

    Template Parameters:
        typename Natural
        typename Elemental
		Referential< const Adjunctive< Natural, Elemental > >
			Adjunct
	    Referential< Assortive< Elemental > >
	        Balanced
		Referential< Assortive< Elemental > >
			Sorted

    Type:
        Compositional< Junctive< Natural, Elemental >, Natural, Elemental >

    Description:
        Linked list sorted set composition function reference table.  Throws 
        exceptions on null pointer locations.  Implements the generic 
        compositional interface for elementary set composition.  Respects the 
        semantics of the "composer" member of the "Selective" type template.


::junction::collection::JunctionSortedSection

    Template Parameters:
		typename Basic
		typename BasicPositional
		typename Relative
		typename RelativePositional
		typename Natural
		typename Elemental
		Referential< const Adjunctive< Natural, Elemental > >
			Adjunct
		Referential< Assortive< Elemental > >
			Balanced
		Referential< Assortive< Elemental > >
			Sorted

    Type:
        Sectional< Junctive< Natural, Elemental >, Basic, BasicPositional, Relative, RelativePositional, Elemental >

    Description:
        Linked list sorted set section function reference table.  Implements 
        the generic sectional interface for set operations.


::junction::collection::SafeJunctionSortedSection

    Template Parameters:
		typename Basic
		typename BasicPositional
		typename Relative
		typename RelativePositional
		typename Natural
		typename Elemental
		Referential< const Adjunctive< Natural, Elemental > >
			Adjunct
		Referential< Assortive< Elemental > >
			Balanced
		Referential< Assortive< Elemental > >
			Sorted

    Type:
        Sectional< Junctive< Natural, Elemental >, Basic, BasicPositional, Relative, RelativePositional, Elemental >

    Description:
        Linked list sorted set section function reference table.  Throws 
        exceptions on null pointer locations.  Implements the generic sectional
        interface for set operations.


::junction::collection::JunctionSortedSelector

    Template Parameters:
        typename Natural
        typename Elemental
		Referential< const Adjunctive< Natural, Elemental > >
			Adjunct
	    Referential< Assortive< Elemental > >
	        Balanced
		Referential< Assortive< Elemental > >
			Sorted

    Type:
        Selective< Junctive< Natural, Elemental >, Positional< Elemental >, Natural, Elemental >

    Description:
        Linked list sorted set selection function reference table.  Implements 
        the generic selective interface for linked list based sorted sets.  


::junction::collection::SafeJunctionSortedSelector

    Template Parameters:
        typename Natural
        typename Elemental
		Referential< const Adjunctive< Natural, Elemental > >
			Adjunct
	    Referential< Assortive< Elemental > >
	        Balanced
		Referential< Assortive< Elemental > >
			Sorted

    Type:
        Selective< Junctive< Natural, Elemental >, Positional< Elemental >, Natural, Elemental >

    Description:
        Linked list sorted set selection function reference table.  Throws 
        exceptions on null pointer locations.  Implements the generic selective
        interface for linked list based sorted sets.  


::junction::collection::JunctionBisection

    Template Parameters:
		typename Basic
		typename BasicPositional
		typename Relative
		typename RelativePositional
		typename Natural
		typename Elemental
		Referential< const Adjunctive< Natural, Elemental > >
			Adjunct
		Referential< Assortive< Elemental > >
			Balanced
		Referential< Assortive< Elemental > >
			Sorted

    Type:
        Bisectional< Junctive< Natural, Elemental >, Basic, BasicPositional, Relative, RelativePositional, Elemental >

    Description:
        Linked list sorted set bisection function reference table.  Implements 
        the generic bisectional interface for sorted set operations.


::junction::collection::SafeJunctionBisection

    Template Parameters:
		typename Basic
		typename BasicPositional
		typename Relative
		typename RelativePositional
		typename Natural
		typename Elemental
		Referential< const Adjunctive< Natural, Elemental > >
			Adjunct
		Referential< Assortive< Elemental > >
			Balanced
		Referential< Assortive< Elemental > >
			Sorted

    Type:
        Bisectional< Junctive< Natural, Elemental >, Basic, BasicPositional, Relative, RelativePositional, Elemental >

    Description:
        Linked list sorted set bisection function reference table.  Throws 
        exceptions on null pointer locations.  Implements the generic 
        bisectional interface for sorted set operations.


::junction::collection::JunctionCollector

    Template Parameters:
        typename Natural
        typename Elemental
		Referential< const Adjunctive< Natural, Elemental > >
			Adjunct
	    Referential< Assortive< Elemental > >
	        Balanced
		Referential< Assortive< Elemental > >
			Sorted

    Type:
        Collective< Junctive< Natural, Elemental >, Positional< Elemental >, Natural, Elemental >

    Description:
        Linked list sorted set collection function reference table.  Implements 
        the generic collective interface for linked list based sorted sets.  


::junction::collection::SafeJunctionCollector

    Template Parameters:
        typename Natural
        typename Elemental
		Referential< const Adjunctive< Natural, Elemental > >
			Adjunct
	    Referential< Assortive< Elemental > >
	        Balanced
		Referential< Assortive< Elemental > >
			Sorted

    Type:
        Collective< Junctive< Natural, Elemental >, Positional< Elemental >, Natural, Elemental >

    Description:
        Linked list sorted set collection function reference table.  Throws 
        exceptions on null pointer locations.  Implements the generic collective
        interface for linked list based sorted sets.  


                                    NAMESPACE


::junction::association


                                 TYPE TEMPLATES


::junction::association::AssociativelyJunctional (type alias)

    Template Parameters:
        typename Correlative
        typename Elemental

    Aliased Type:
        Junctional< Associational< Correlative, Elemental > > 

    Description:
        Associative linked list node type alias template.

        Correlative:  Type of the node relator (key).
        Elemental:  Type of the node element (value).
        

::junction::association::AssociativelyPositional (type alias)

    Template Parameters:
        typename Correlative
        typename Elemental

    Aliased Type:
        Positional< Associational< Correlative, Elemental > > 

    Description:
        Associative linked list positional type template.  Used to represent a 
        position in the active linked list.  Do not use these to represent nodes 
        which are not yet in the formal linked list, including nodes in the 
        unused sublist.
        
        Correlative:  Type of the node relator (key).
        Elemental:  Type of the node element (value).
        

::junction::association::AssociativelyJunctive (type alias)

    Template Parameters:
        typename Natural
        typename Correlative
        typename Elemental

    Aliased Type:
        Junctive< Natural, Associational< Correlative, Elemental > >

    Description:
        Linked list positional type template.  Used to represent a position 
        in the active linked list.  Do not use these to represent nodes which
        are not yet in the formal linked list, including nodes in the unused 
        sublist.


                               FUNCTION TEMPLATES


::junction::association::GoReadRelator

    Template Parameters:
        typename Natural
        typename Correlative
        typename Elemental

    Return Type:
        Conferential< const Correlative >
    
    Parameters:
		Referential< const AssociativelyJunctive< Natural, Correlative, Elemental > >
			map
		Referential< const AssociativelyPositional< Correlative, Elemental > >
			position

	Description:
        Given a reference to an associatively junctive map as a constant and a 
        reference to an associatively positional position as a constant, 
        returns a conferment reference to a correlative relator as a constant 
        at that position.


::junction::association::GoReadRelatorSafely

    Template Parameters:
        typename Natural
        typename Correlative
        typename Elemental

    Return Type:
        Conferential< const Correlative >
    
    Parameters:
		Referential< const AssociativelyJunctive< Natural, Correlative, Elemental > >
			map
		Referential< const AssociativelyPositional< Correlative, Elemental > >
			position

	Description:
        Given a reference to an associatively junctive map as a constant and a 
        reference to an associatively positional position as a constant, 
        throws position if it's location is null or it is not contained in the
        map.  Returns a conferment reference to a correlative relator as a 
        constant at that position.


::junction::association::GoReadElement

    Template Parameters:
        typename Natural
        typename Correlative
        typename Elemental

    Return Type:
        Conferential< const Elemental >
    
    Parameters:
		Referential< const AssociativelyJunctive< Natural, Correlative, Elemental > >
			map
		Referential< const AssociativelyPositional< Correlative, Elemental > >
			position

	Description:
        Given a reference to an associatively junctive map as a constant and a 
        reference to an associatively positional position as a constant, 
        returns a conferment reference to an elemental value as a constant at 
        that position.


::junction::association::GoReadElementSafely

    Template Parameters:
        typename Natural
        typename Correlative
        typename Elemental

    Return Type:
        Conferential< const Elemental >
    
    Parameters:
		Referential< const AssociativelyJunctive< Natural, Correlative, Elemental > >
			map
		Referential< const AssociativelyPositional< Correlative, Elemental > >
			position

	Description:
        Given a reference to an associatively junctive map as a constant and a 
        reference to an associatively positional position as a constant, 
        throws position if it's location is null or it is not contained in the
        map.  Returns a conferment reference to an elemental value as a constant
        at that position.


::junction::association::GoWriteElement

    Template Parameters:
        typename Natural
        typename Correlative
        typename Elemental

    Return Type:
        Conferential< Elemental >
    
    Parameters:
		Referential< AssociativelyJunctive< Natural, Correlative, Elemental > >
			map
		Referential< const AssociativelyPositional< Correlative, Elemental > >
			position

	Description:
        Given a reference to an associatively junctive map as a constant and a 
        reference to an associatively positional position as a constant, 
        returns a conferment reference to an elemental value at that position.


::junction::association::GoWriteElementSafely

    Template Parameters:
        typename Natural
        typename Correlative
        typename Elemental

    Return Type:
        Conferential< Elemental >
    
    Parameters:
		Referential< AssociativelyJunctive< Natural, Correlative, Elemental > >
			map
		Referential< const AssociativelyPositional< Correlative, Elemental > >
			position

	Description:
        Given a reference to an associatively junctive map as a constant and a 
        reference to an associatively positional position as a constant, 
        throws position if it's location is null or it is not contained in the
        map.  Returns a conferment reference to an elemental value at that 
        position.


                               VARIABLE TEMPLATES


::junction::association::ReadRelatorIncrementScale

    Template Parameters:
        typename Natural
        typename Correlative
        typename Elemental

    Type:
        Scalar< const AssocativelyJunctive< Natural, Correlative, Elemental >, AssociativelyPositional< Correlative, Elemental >, const Correlative >

    Description:
        Scalar increment trajection through an associative linked list function 
        reference table.  Returns references to constant relators (keys).


::junction::association::ReadRelatorDecrementScale

    Template Parameters:
        typename Natural
        typename Correlative
        typename Elemental

    Type:
        Scalar< const AssocativelyJunctive< Natural, Correlative, Elemental >, AssociativelyPositional< Correlative, Elemental >, const Correlative >

    Description:
        Scalar decrement trajection through a associative linked list function
        reference table.  Returns references to constant relators (keys).


::junction::association::ReadElementIncrementScale

    Template Parameters:
        typename Natural
        typename Correlative
        typename Elemental

    Type:
        Scalar< const AssocativelyJunctive< Natural, Correlative, Elemental >, AssociativelyPositional< Correlative, Elemental >, const Elemental >

    Description:
        Scalar increment trajection through a associative linked list function 
        reference table.  Returns references to constant elements (values).


::junction::association::ReadElementDecrementScale

    Template Parameters:
        typename Natural
        typename Correlative
        typename Elemental

    Type:
        Scalar< const AssocativelyJunctive< Natural, Correlative, Elemental >, AssociativelyPositional< Correlative, Elemental >, const Elemental >

    Description:
        Scalar decrement trajection through a associative linked list function 
        reference table.  Returns references to constant elements (values).


::junction::association::WriteElementIncrementScale

    Template Parameters:
        typename Natural
        typename Correlative
        typename Elemental

    Type:
        Scalar< AssocativelyJunctive< Natural, Correlative, Elemental >, AssociativelyPositional< Correlative, Elemental >, Elemental >

    Description:
        Scalar increment trajection through a associative linked list function 
        reference table.  Returns references to elements (values).


::junction::association::WriteElementDecrementScale

    Template Parameters:
        typename Natural
        typename Correlative
        typename Elemental

    Type:
        Scalar< AssocativelyJunctive< Natural, Correlative, Elemental >, AssociativelyPositional< Correlative, Elemental >, Elemental >

    Description:
        Scalar decrement trajection through a associative linked list function 
        reference table.  Returns references to elements (values).


::junction::ReadRelatorLiner

    Template Parameters:
        typename Natural
        typename Correlative
        typename Elemental

    Type:
        Lineal< const AssociativelyJunctive< Natural, Correlative, Elemental >, AssociativelyPositional< Correlative, Elemental >, const Correlative >

    Description:
        Lineal trajection through a associative linked list function reference 
        table.  Returns references to constant relators (keys).


::junction::ReadElementLiner

    Template Parameters:
        typename Natural
        typename Correlative
        typename Elemental

    Type:
        Lineal< const AssociativelyJunctive< Natural, Correlative, Elemental >, AssociativelyPositional< Correlative, Elemental >, const Elemental >

    Description:
        Lineal trajection through a associative linked list function reference 
        table.  Returns references to constant elements (values).


::junction::WriteElementLiner

    Template Parameters:
        typename Natural
        typename Correlative
        typename Elemental

    Type:
        Lineal< AssociativelyJunctive< Natural, Correlative, Elemental >, AssociativelyPositional< Correlative, Elemental >, Elemental >

    Description:
        Lineal trajection through a associative linked list function reference 
        table.  Returns references to constant elements (values).


::junction::association::ReadRelatorIncrementDirection

    Template Parameters:
        typename Natural
        typename Correlative
        typename Elemental

    Type:
        Directional< const AssociativelyJunctive< Natural, Correlative, Elemental >, AssociativelyPositional< Correlative, Elemental >, const Correlative >

    Description:
        Directional increment trajection through an associative linked list 
        function reference table.  Returns references to constant relators 
        (keys).


::junction::association::ReadRelatorDecrementDirection

    Template Parameters:
        typename Natural
        typename Correlative
        typename Elemental

    Type:
        Directional< const AssociativelyJunctive< Natural, Correlative, Elemental >, AssociativelyPositional< Correlative, Elemental >, const Correlative >

    Description:
        Directional decrement trajection through an associative linked list 
        function reference table.  Returns references to constant relators 
        (keys).


::junction::association::ReadElementIncrementDirection

    Template Parameters:
        typename Natural
        typename Correlative
        typename Elemental

    Type:
        Directional< const AssociativelyJunctive< Natural, Correlative, Elemental >, AssociativelyPositional< Correlative, Elemental >, const Elemental >

    Description:
        Directional increment trajection through an associative linked list 
        function reference table.  Returns references to constant elements 
        (values).


::junction::association::ReadRelatorDecrementDirection

    Template Parameters:
        typename Natural
        typename Correlative
        typename Elemental

    Type:
        Directional< const AssociativelyJunctive< Natural, Correlative, Elemental >, AssociativelyPositional< Correlative, Elemental >, const Elemental >

    Description:
        Directional decrement trajection through an associative linked list 
        function reference table.  Returns references to constant elements 
        (values).


::junction::association::WriteElementIncrementDirection

    Template Parameters:
        typename Natural
        typename Correlative
        typename Elemental

    Type:
        Directional< AssociativelyJunctive< Natural, Correlative, Elemental >, AssociativelyPositional< Correlative, Elemental >, Elemental >

    Description:
        Directional increment trajection through an associative linked list 
        function reference table.  Returns references to elements (values).


::junction::association::WriteRelatorDecrementDirection

    Template Parameters:
        typename Natural
        typename Correlative
        typename Elemental

    Type:
        Directional< AssociativelyJunctive< Natural, Correlative, Elemental >, AssociativelyPositional< Correlative, Elemental >, Elemental >

    Description:
        Directional decrement trajection through an associative linked list 
        function reference table.  Returns references to elements (values).


::junction::association::ReadRelatorAxis

    Template Parameters:
        typename Natural
        typename Correlative
        typename Elemental

    Type:
        Axial< const AssociativelyJunctive< Natural, Correlative, Elemental >, AssociativelyPositional< Correlative, Elemental >, const Correlative >

    Description:
        Axial trajection through an associative linked list function reference 
        table.  Returns references to constant relators (keys).


::junction::association::ReadElementAxis

    Template Parameters:
        typename Natural
        typename Correlative
        typename Elemental

    Type:
        Axial< const AssociativelyJunctive< Natural, Correlative, Elemental >, AssociativelyPositional< Correlative, Elemental >, const Elemental >

    Description:
        Axial trajection through an associative linked list function reference 
        table.  Returns references to constant elements (values).


::junction::association::WriteElementAxis

    Template Parameters:
        typename Natural
        typename Correlative
        typename Elemental

    Type:
        Axial< AssociativelyJunctive< Natural, Correlative, Elemental >, AssociativelyPositional< Correlative, Elemental >, Elemental >

    Description:
        Axial trajection through an associative linked list function reference 
        table.  Returns references to elements (values).


::junction::association::DefaultNewAssociativeAdjunct

    Template Parameters:
        typename Natural
        typename Correlative
        typename Elemental

    Type:
        auto

    Description:
        New default constructor associatively junctional node allocation 
        function reference table.  Supports pre-allocation of nodes, reuse of 
        unused nodes but the elemental type must support assignment from a 
        reference to an element as a constant.  The correlative type does not
        need to support assignment.


::junction::association::CopyNewAssociativeAdjunct

    Template Parameters:
        typename Natural
        typename Correlative
        typename Elemental

    Type:
        auto

    Description:
        New copy constructor associatively junctional node allocation function 
        reference table.  Does not support the pre-allocation of nodes, does not
        reuse unused nodes, the elemental type need not support assignment.  The 
        correlative type does not need to support assignment.


                                    NAMESPACE


::junction::association::stdlib


                               VARIABLE TEMPLATES


::junction::association::stdlib::DefaultMallocAssociativeAdjunct

    Template Parameters:
        typename Natural
        typename Correlative
        typename Elemental

    Type:
        auto

    Description:
        Default malloc associatively junctional node allocation function 
        reference table.  Supports pre-allocation of nodes, reuse of unused 
        nodes but the elemental type must support assignment from a reference to
        an element as a constant.  The correlative type does not need to support 
        assignment.


::junction::association::stdlib::DefaultCallocAssociativeAdjunct

    Template Parameters:
        typename Natural
        typename Correlative
        typename Elemental

    Type:
        auto

    Description:
        Default calloc associatively junctional node allocation function 
        reference table.  Supports pre-allocation of nodes, reuse of unused 
        nodes but the elemental type must support assignment from a reference to
        an element as a constant.  The correlative type does not need to support 
        assignment.


                                    NAMESPACE


::junction::association::selection


                               FUNCTION TEMPLATES


::junction::association::selection::Correspond

    Template Parameters:
		typename Natural
		typename Correlative
		typename Elemental
		Referential< Assortive< Correlative > >
			Balanced
		Referential< Assortive< Correlative > >
			Sorted

    Return Type:
        bool
    
    Parameters:
		Referential< const AssociativelyJunctive< Natural, Correlative, Elemental > >
			map
		Referential< const Correlative >
			relator

	Description:
        Given a reference to an associatively junctive map as a constant and a 
        reference to a correlative relator (key) as a constant, returns true 
        if relator corresponds in the association.


::junction::association::selection::Associate

    Template Parameters:
		typename Natural
		typename Correlative
		typename Elemental
		Referential< Consequent< Natural, Associational< Correlative, Elemental > > >
			Proceed
		Referential< Assortive< Correlative > >
			Balanced
		Referential< Assortive< Correlative > >
			Sorted

    Return Type:
        bool
    
    Parameters:
		Referential< AssociativelyJunctive< Natural, Correlative, Elemental > >
			map
		Referential< const Correlative >
			relator
		Referential< const Elemental >
			value

	Description:
        Given a reference to an associatively junctive map, a reference to a 
        correlative relator (key) as a constant and a reference to an elemental 
        element (value) as a constant, returns true if associate was successful.
        Returns false if relator already corresponds in the association.


::junction::association::selection::Reassociate

    Template Parameters:
		typename Natural
		typename Correlative
		typename Elemental
		Referential< Consequent< Natural, Associational< Correlative, Elemental > > >
			Proceed
		Referential< Concessive< Natural, Associational< Correlative, Elemental > > >
			Concede
		Referential< Assortive< Correlative > >
			Balanced
		Referential< Assortive< Correlative > >
			Sorted

    Return Type:
        bool
    
    Parameters:
		Referential< AssociativelyJunctive< Natural, Correlative, Elemental > >
			map
		Referential< const Correlative >
			original
		Referential< const Correlative >
			replacement

	Description:
        Given a reference to an associatively junctive map, a reference to a 
        correlative original (key) as a constant and a reference to a 
        correlative replacement (key) as a constant, returns true if reassociate
        was successful.  Returns false if replacement already corresponds in the
        association.


::junction::association::selection::Disassociate

    Template Parameters:
		typename Natural
		typename Correlative
		typename Elemental
		Referential< Concessive< Natural, Associational< Correlative, Elemental > > >
			Concede
		Referential< Assortive< Correlative > >
			Balanced
		Referential< Assortive< Correlative > >
			Sorted

    Return Type:
        bool
    
    Parameters:
		Referential< AssociativelyJunctive< Natural, Correlative, Elemental > >
			map
		Referential< const Correlative >
			relator

	Description:
        Given a reference to an associatively junctive map, a reference to a 
        correlative relator (key) as a constant, returns true if disassociate 
        was successful.  Returns false if replacement already corresponds in the
        association.


::junction::association::selection::RelateReadElement

    Template Parameters:
		typename Natural
		typename Correlative
		typename Elemental
		Referential< Assortive< Correlative > >
			Balanced
		Referential< Assortive< Correlative > >
			Sorted

    Return Type:
        Conferential< const Elemental >
    
    Parameters:
		Referential< const AssociativelyJunctive< Natural, Correlative, Elemental > >
			map
		Referential< const Correlative >
			relator

	Description:
        Given a reference to an associatively junctive map as a constant, a
        reference to a correlative relator (key) as a constant, throws relator
        if it does not correspond in the association.  Returns a conferment 
        reference to an elemental element (value) as a constant.


::junction::association::selection::RelateWriteElement

    Template Parameters:
		typename Natural
		typename Correlative
		typename Elemental
		Referential< Assortive< Correlative > >
			Balanced
		Referential< Assortive< Correlative > >
			Sorted

    Return Type:
        Conferential< Elemental >
    
    Parameters:
		Referential< AssociativelyJunctive< Natural, Correlative, Elemental > >
			map
		Referential< const Correlative >
			relator

	Description:
        Given a reference to an associatively junctive map as a constant, a
        reference to a correlative relator (key) as a constant, throws relator
        if it does not correspond in the association.  Returns a conferment 
        reference to an elemental element (value).


                               VARIABLE TEMPLATES


::junction::association::selection::SearchCorrelation

    Template Parameters:
		typename Natural
		typename Correlative
		typename Elemental
		Referential< Assortive< Correlative > >
			Balanced
		Referential< Assortive< Correlative > >
			Sorted

    Type:
        auto

    Description:
        Linear search function reference template.  Shortens the template 
        specifier requirements in order to make use of the SearchLinealy 
        function template in the sortation namespace.


::junction::association::selection::RelateReadVector

    Template Parameters:
		typename Natural
		typename Correlative
		typename Elemental
		Referential< Assortive< Correlative > >
			Balanced

    Type:
        Vectorial< const AssociativelyJunctive< Natural, Correlative, Elemental >, Correlative, const Elemental >

    Description:
        Vectorial trajection through an associatively linked list function 
        reference table.  Positional type is correlative.  Throws exceptions on
        relators which are not found.  Returns references to constant elements.


::junction::association::selection::RelateWriteVector

    Template Parameters:
		typename Natural
		typename Correlative
		typename Elemental
		Referential< Assortive< Correlative > >
			Balanced

    Type:
        Vectorial< AssociativelyJunctive< Natural, Correlative, Elemental >, Correlative, Elemental >

    Description:
        Vectorial trajection through an associatively linked list function 
        reference table.  Positional type is correlative.  Throws exceptions on
        relators which are not found.  Returns references to modifiable 
        elements.


::junction::association::selection::JunctionCorrelator

    Template Parameters:
		typename Natural
		typename Correlative
		typename Elemental
		Referential< const Adjunctive< Natural, Associational< Correlative, Elemental > > >
			Adjunct
		Referential< Assortive< Correlative > >
			Balanced

    Type:
        Associative< AssociativelyJunctive< Natural, Correlative, Elemental >, Natural, Correlative, Elemental >

    Description:
        Linked list map selection function reference table.  Implements the 
        generic associative interface for linked list based unsorted maps.  


::junction::association::selection::SafeJunctionCorrelator

    Template Parameters:
		typename Natural
		typename Correlative
		typename Elemental
		Referential< const Adjunctive< Natural, Associational< Correlative, Elemental > > >
			Adjunct
		Referential< Assortive< Correlative > >
			Balanced

    Type:
        Associative< AssociativelyJunctive< Natural, Correlative, Elemental >, Natural, Correlative, Elemental >

    Description:
        Linked list map selection function reference table.  Throws exceptions 
        on null pointer locations.  Implements the generic associative interface 
        for linked list based unsorted maps.  


                                    NAMESPACE


::junction::association::collection


                               FUNCTION TEMPLATES


::junction::association::collection::Correspond

    Template Parameters:
		typename Natural
		typename Correlative
		typename Elemental
		Referential< Assortive< Correlative > >
			Balanced
		Referential< Assortive< Correlative > >
			Sorted

    Return Type:
        bool
    
    Parameters:
		Referential< const AssociativelyJunctive< Natural, Correlative, Elemental > >
			map
		Referential< const Correlative >
			relator

	Description:
        Given a reference to an associatively junctive map as a constant and a 
        reference to a correlative relator (key) as a constant, returns true 
        if relator corresponds in the association.


::junction::association::collection::Associate

    Template Parameters:
		typename Natural
		typename Correlative
		typename Elemental
		Referential< Precedent< Natural, Associational< Correlative, Elemental > > >
			Precede
		Referential< Consequent< Natural, Associational< Correlative, Elemental > > >
			Proceed
		Referential< Assortive< Correlative > >
			Balanced
		Referential< Assortive< Correlative > >
			Sorted

    Return Type:
        bool
    
    Parameters:
		Referential< AssociativelyJunctive< Natural, Correlative, Elemental > >
			map
		Referential< const Correlative >
			relator
		Referential< const Elemental >
			value

	Description:
        Given a reference to an associatively junctive map, a reference to a 
        correlative relator (key) as a constant and a reference to an elemental 
        element (value) as a constant, returns true if associate was successful.
        Returns false if relator already corresponds in the association.


::junction::association::collection::Reassociate

    Template Parameters:
		typename Natural
		typename Correlative
		typename Elemental
		Referential< Precedent< Natural, Associational< Correlative, Elemental > > >
			Precede
		Referential< Consequent< Natural, Associational< Correlative, Elemental > > >
			Proceed
		Referential< Concessive< Natural, Associational< Correlative, Elemental > > >
			Concede
		Referential< Assortive< Correlative > >
			Balanced
		Referential< Assortive< Correlative > >
			Sorted

    Return Type:
        bool
    
    Parameters:
		Referential< AssociativelyJunctive< Natural, Correlative, Elemental > >
			map
		Referential< const Correlative >
			original
		Referential< const Correlative >
			replacement

	Description:
        Given a reference to an associatively junctive map, a reference to a 
        correlative original (key) as a constant and a reference to a 
        correlative replacement (key) as a constant, returns true if reassociate
        was successful.  Returns false if replacement already corresponds in the
        association.


::junction::association::collection::Disassociate

    Template Parameters:
		typename Natural
		typename Correlative
		typename Elemental
		Referential< Concessive< Natural, Associational< Correlative, Elemental > > >
			Concede
		Referential< Assortive< Correlative > >
			Balanced
		Referential< Assortive< Correlative > >
			Sorted

    Return Type:
        bool
    
    Parameters:
		Referential< AssociativelyJunctive< Natural, Correlative, Elemental > >
			map
		Referential< const Correlative >
			relator

	Description:
        Given a reference to an associatively junctive map, a reference to a 
        correlative relator (key) as a constant, returns true if disassociate 
        was successful.  Returns false if replacement already corresponds in the
        association.


::junction::association::collection::RelateReadElement

    Template Parameters:
		typename Natural
		typename Correlative
		typename Elemental
		Referential< Assortive< Correlative > >
			Balanced
		Referential< Assortive< Correlative > >
			Sorted

    Return Type:
        Conferential< const Elemental >
    
    Parameters:
		Referential< const AssociativelyJunctive< Natural, Correlative, Elemental > >
			map
		Referential< const Correlative >
			relator

	Description:
        Given a reference to an associatively junctive map as a constant, a
        reference to a correlative relator (key) as a constant, throws relator
        if it does not correspond in the association.  Returns a conferment 
        reference to an elemental element (value) as a constant.


::junction::association::collection::RelateWriteElement

    Template Parameters:
		typename Natural
		typename Correlative
		typename Elemental
		Referential< Assortive< Correlative > >
			Balanced
		Referential< Assortive< Correlative > >
			Sorted

    Return Type:
        Conferential< Elemental >
    
    Parameters:
		Referential< AssociativelyJunctive< Natural, Correlative, Elemental > >
			map
		Referential< const Correlative >
			relator

	Description:
        Given a reference to an associatively junctive map as a constant, a
        reference to a correlative relator (key) as a constant, throws relator
        if it does not correspond in the association.  Returns a conferment 
        reference to an elemental element (value).


                               VARIABLE TEMPLATES


::junction::association::collection::SearchAssociation

    Template Parameters:
		typename Natural
		typename Correlative
		typename Elemental
		Referential< Assortive< Correlative > >
			Balanced
		Referential< Assortive< Correlative > >
			Sorted

    Type:
        auto

    Description:
        Bisection search function reference template.  Shortens the template 
        specifier requirements in order to make use of the SearchLinealy 
        function template in the sortation namespace.


::junction::association::collection::RelateReadVector

    Template Parameters:
		typename Natural
		typename Correlative
		typename Elemental
		Referential< Assortive< Correlative > >
			Balanced
		Referential< Assortive< Correlative > >
			Sorted

    Type:
        Vectorial< const AssociativelyJunctive< Natural, Correlative, Elemental >, Correlative, const Elemental >

    Description:
        Vectorial trajection through an associatively linked list function 
        reference table.  Positional type is correlative.  Throws exceptions on
        relators which are not found.  Returns references to constant elements.


::junction::association::collection::RelateWriteVector

    Template Parameters:
		typename Natural
		typename Correlative
		typename Elemental
		Referential< Assortive< Correlative > >
			Balanced
		Referential< Assortive< Correlative > >
			Sorted

    Type:
        Vectorial< AssociativelyJunctive< Natural, Correlative, Elemental >, Correlative, Elemental >

    Description:
        Vectorial trajection through an associatively linked list function 
        reference table.  Positional type is correlative.  Throws exceptions on
        relators which are not found.  Returns references to modifiable 
        elements.


::junction::association::collection::JunctionAssociator

    Template Parameters:
		typename Natural
		typename Correlative
		typename Elemental
		Referential< const Adjunctive< Natural, Associational< Correlative, Elemental > > >
			Adjunct
		Referential< Assortive< Correlative > >
			Balanced
		Referential< Assortive< Correlative > >
			Sorted

    Type:
        Associative< AssociativelyJunctive< Natural, Correlative, Elemental >, Natural, Correlative, Elemental >

    Description:
        Linked list map collection function reference table.  Implements the 
        generic associative interface for linked list based sorted maps.  


::junction::association::collection::SafeJunctionAssociator

    Template Parameters:
		typename Natural
		typename Correlative
		typename Elemental
		Referential< const Adjunctive< Natural, Associational< Correlative, Elemental > > >
			Adjunct
		Referential< Assortive< Correlative > >
			Balanced
		Referential< Assortive< Correlative > >
			Sorted

    Type:
        Associative< AssociativelyJunctive< Natural, Correlative, Elemental >, Natural, Correlative, Elemental >

    Description:
        Linked list map collection function reference table.  Throws exceptions 
        on null pointer locations.  Implements the generic associative interface 
        for linked list based sorted maps.  


--------------------------------------------------------------------------------

