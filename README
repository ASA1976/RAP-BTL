© 2018, Aaron Sami Abassi
Licensed under the Academic Free License version 3.0


                                       C++
                       Relational Association Programming 
                             Basic Template Library

                             
Within C++, there is a much smaller and cleaner language struggling to get out.
  -- Bjarne Stroustrup, The Design and Evolution of C++, pp. 207
       ©1994 Addison-Wesley Professional

    The preceding quote is not an endorsement by Bjarne Stroustrup or 
Addison-Wesley Professional, but my own personal opinion regarding this quote.
     
                          
ABSTRACT

    The C++ Relational Association Programming Basic Template Library (RAP-BTL)
is intended as an in-depth demonstration of Relational Association Programming
objectives in the context of template metaprogramming with the C++ (2014) 
programming language.  This template library serves as an example for writing 
template libraries intended for systems programming through the use of 
relational association programming elements (associations, information 
templates, function templates, objectification templates, etc.).

PREAMBLE

	Though I have performed some testing on this template library, it is not
intended for use in critical systems as is.  Use at your own risk.


DEMONSTRATION

    Compiling "example.cpp" in the root source directory with C++'14 syntax
enabled and a compliant compiler will produce an executable which displays 
some output.  This source file demonstrates how a library user might use 
template instances for specific needs, such as a linked list of characters.


PERFORMANCE

    Testing was conducted on an x86 32-bit (i686) GNU based Linux® virtual 
machine based system.  The GNU C Library (glibc) version was 2.23 and the Linux 
kernel version was 4.4.88.  The tested GNU Compiler Collection C++ compiler 
version was 7.2.0, the LLVM Compiler Infrastructure C++ compiler version was 
5.0.0 and the GNU Project Debugger version was 7.11.1.  The compiler option to 
specify the language standard was used "-std=c++14", optimization was not 
specified and the compiled source file was "example.cpp" in both cases.  When 
the resulting executable binary image produced by GNU C++ was executed from the
debugger, all of the program's output was displayed before the third instruction 
executed.  The total number of instructions in main was 12 and 2 more were 
executed in __libc_start_main().  When the resulting executable binary image 
produced by LLVM was executed from the debugger, all of the program's output was
displayed before the third instruction executed.  The total number of 
instructions in main was 10 and 2 more were executed in __libc_start_main().

    Linux® is the registered trademark of Linus Torvalds in the U.S. and 
        other countries.
    All other trademarked names are the property of their respective owners.

CONCLUSION

	Both compilers are able to reduce the "example.cpp" source code through
inline candidacy preservations across compile time determinate referencing and 
code optimizations to the point of being able to determine the invariability of
the program output and simply reduce the complete algorithm, including template
argument based behavioral delegations, to generating a single output string.  
Making use of C++'14 template based programming in order to promote source code
reusability does not introduce any observable compiler inefficiencies.  
Procedural syntax is greatly augmented by the dimensions of template parametric 
spaces where the resulting source code can become vastly more expressive.


--------------------------------------------------------------------------------


                            C++ RAP-BTL DOCUMENTATION

                            
--------------------------------------------------------------------------------


                                    location


                                    NAMESPACE


::location

    Memory location type and function templates.  These are used to improve
    syntactic clarity as noted in each template.


                                 TYPE TEMPLATES


::location::Locational (type alias)

    Template Parameters:
        typename Subjective

    Aliased Type:
        Subjective*

    Description:
    
        Subjective:
            Type of the subject location.

        Pointer location type template.  Increases the legibility of function 
        pointer parameter declarations, where type and identifier both appear.        


::location::Referential (type alias)

    Template Parameters:
        typename Subjective

    Aliased Type:
        Subjective&

    Description:
    
        Subjective:  
            Type of the subject reference.

        Reference type template.  Increases the legibility of array and function
        reference parameter declarations, where type and identifier both appear.

        
::location::Positive (struct)

    Template Parameters:
        typename Subjective

    Members:
        Locational< Subjective >
            at
            
    Description:
    
        Subjective:  
            Type of the subject at location.
        
        at:  
            Location of the subject.

        Single location type struct template.  Useful when possibly returning a
        function pointer from a function, syntactically preventing directly 
        chained function invocations.


::location::Conferential (struct)

    Template Parameters:
        typename Subjective

    Members:
        Referential< Subjective >
            to
            
    Description:
    
        Subjective:  
            Type of the subject reference.
        
        to:  
            Reference to the subject.

        Single reference type struct template.  Useful when possibly returning a
        function reference from a function, syntactically preventing directly 
        chained function invocations.


                               FUNCTION TEMPLATES


::location::Locate

    Template Parameters:
        typename Subjective

    Return Type:
        Positive< Subjective >

    Parameters:
        Referential< Subjective >
            subject
            
    Description:
    
        Subjective:  
            Type of the subject location.

        Given a reference to a subject, returns a locational posit to the 
        subject.  Useful when writing functions templates which may return 
        function pointers, syntactically preventing directly chained function 
        invocations.  Also makes order of operations syntactically clearer when 
        compared to it's equivalent operator syntax. 


::location::Confer

    Template Parameters:
        typename Subjective

    Return Type:
        Conferential< Subjective >

    Parameters:
        Referential< Subjective >
            subject
            
    Description:
    
        Subjective:  
            Type of the subject reference.

        Given a reference to a subject, returns a conferential reference to the 
        subject.  Useful when writing function templates which may return 
        function references, syntactically preventing directly chained function 
        invocations.


::location::Defer

    Template Parameters:
        typename Subjective

    Return Type:
        Conferential< const Subjective >

    Parameters:
        Referential< Subjective >
            subject
            
    Description:
    
        Subjective:  
            Type of the subject reference.

        Given a reference to a subject, returns a conferential reference to a 
        constant subject.  Useful when writing function templates which may 
        return constant data references or function references, syntactically 
        preventing directly chained function invocations.


::location::Refer

    Template Parameters:
        typename Subjective

    Return Type:
        Conferential< Subjective >

    Parameters:
        Locational< Subjective >
            locality
            
    Description:
    
        Subjective:  
            Type of the subject location and reference.

        Given the locality of a subject, returns a conferential reference to the 
        subject.  Useful when writing functions templates which may return 
        function pointers, syntactically preventing directly chained function 
        invocations.  Also makes order of operations syntactically clearer when 
        compared to it's equivalent operator syntax.


--------------------------------------------------------------------------------


                                   Allocation


                                    NAMESPACE


::allocation

    Memory allocation type, prototype, function and variable templates.  These 
    templates are used for memory management in template programming 
    circumstances.  Included are new and delete C++ programming language 
    operator based memory management which incur constructor invocations.


                                TYPE TEMPLATES


::allocation::Allocative (struct)

    Template Parameters:
        typename Claimable
        typename Disclaimable

    Members:
        Referential< Claimable >
            claim
        Referential< Disclaimable >
            disclaim
            
    Description:
    
        Claimable:  
            Allocation function prototype.
        Disclaimable:  
            Deallocation function prototype.
        
        claim:  
            Allocation function reference.
        disclaim:  
            Deallocation function reference.

        Allocation and deallocation function reference table type template.
        Facilitates the consistent naming of member elements for all allocative 
        function reference tables.

        
::allocation::DefaultClaimable (prototype alias)

    Template Parameters:
        typename Subjective

    Return Type:
        void
    
    Parameter Types:
        Referential< Locational< Subjective > >

    Description:

        Subjective:  
            Type of the allocation subject.
    
        Default allocation function prototype template.  Given a reference to a 
        location, assign the resulting memory pointer to the location.


::allocation::DefaultDisclaimable (prototype alias)

    Template Parameters:
        typename Subjective

    Return Type:
        void
    
    Parameter Types:
        Referential< Locational< Subjective > >

    Description:
        
        Subjective:  
            Type of the allocation subject.

        Default deallocation function prototype template.  Given a reference to
        a location, free the memory at pointer location.  May or may not assign 
        null to the location.


::allocation::ArrayClaimable (prototype alias)

    Template Parameters:
        typename Subjective
        typename Natural

    Return Type:
        void
    
    Parameter Types:
        Referential< Locational< Subjective > >
        Referential< const Natural >

    Description:
        
        Subjective:  
            Type of the allocation subject.
        Natural:  
            Type of the natural integer node counts.

        Array allocation function prototype template.  Given a reference to a 
        location and a reference to a constant element count, assign the 
        resulting memory pointer to the location.


::allocation::CopyClaimable (prototype alias)

    Template Parameters:
        typename Subjective

    Return Type:
        void
    
    Parameter Types:
        Referential< Locational< Subjective > >
        Referential< const Subjective >

    Description:

        Subjective:  
            Type of the allocation subject.

        Copy allocation function prototype template.  Given a reference to a 
        location and a reference to a constant subject, assign the resulting 
        pointer to initialized memory to the location.


::allocation::DefaultAllocative (type alias)

    Template Parameters:
        typename Subjective

    Aliased Type:
        Allocative< 
            DefaultClaimable< Subjective >, 
            DefaultDisclaimable< Subjective >
        >

    Description:

        Subjective:  
            Type of the allocation subject.
        
        Default allocation and default deallocation function reference table
        type template.


::allocation::ArrayAllocative (type alias)

    Template Parameters:
        typename Subjective
        typename Natural

    Aliased Type:
        Allocative<
            ArrayClaimable< Subjective, Natural >,
            DefaultDisclaimable< Subjective >
        >

    Description:
        
        Subjective:  
            Type of the allocation subject.
        Natural:  
            Type of the natural integer node counts.
        
        Array allocation and default deallocation function reference table type
        template.


::allocation::CopyAllocative (type alias)

    Template Parameters:
        typename Subjective

    Aliased Type:
        Allocative<
            CopyClaimable< Subjective >,
            DefaultDisclaimable< Subjective >
        >

    Description:

        Subjective:  
            Type of the allocation subject.
        
        Copy allocation and default deallocation function reference table type
        template.


                               FUNCTION TEMPLATES


::allocation::New

    Template Parameters:
        typename Subjective

    Return Type:
        void

    Parameters:
        Referential< Locational< Subjective > >
            locality
            
    Description:

        Subjective:  
            Type of the allocation subject.
        
        Given a reference to a location, assign the memory pointer result of the
        new default constructor to locality. 


::allocation::NewArray

    Template Parameters:
        typename Subjective
        typename Natural

    Return Type:
        void

    Parameters:
        Referential< Locational< Subjective > >
            locality
        Referential< const Natural >
            count
            
    Description:

        Subjective:  
            Type of the allocation subject.
        
        Given a reference to a location and a reference to a constant element 
        count, assign the memory pointer result of the new array constructor to 
        location. 


::allocation::NewCopy

    Template Parameters:
        typename Subjective

    Return Type:
        void

    Parameters:
        Referential< Locational< Subjective > >
            locality
        Referential< const Subjective >
            subject
            
    Description:

        Subjective:  
            Type of the allocation subject.
        
        Given a reference to a location and a reference to a constant subject, 
        assign the memory pointer result of the new copy constructor to 
        location. 

        
::allocation::SetNull

    Template Parameters:
        typename Subjective

    Return Type:
        void

    Parameters:
        Referential< Locational< Subjective > >
            locality
            
    Description:

        Subjective:  
            Type of the subject location.
        
        Given a reference to a location, assign the null pointer to locality. 


::allocation::Delete

    Template Parameters:
        typename Subjective

    Return Type:
        void

    Parameters:
        Referential< Locational< Subjective > >
            locality
            
    Description:

        Subjective:  
            Type of the deallocation subject.

        Given a reference to a location, delete the memory pointed to by 
        location and do nothing else. 


::allocation::DeleteAndNull

    Template Parameters:
        typename Subjective

    Return Type:
        void

    Parameters:
        Referential< Locational< Subjective > >
            locality
            
    Description:

        Subjective:  
            Type of the deallocation subject.
        
        Given a reference to a location, delete the memory pointed to by 
        location and assign the null pointer to locality. 


::allocation::DeleteArray

    Template Parameters:
        typename Subjective

    Return Type:
        void

    Parameters:
        Referential< Locational< Subjective > >
            locality
            
    Description:

        Subjective:  
            Type of the deallocation subject.
        
        Given a reference to a location, delete the array in memory pointed to 
        by location and do nothing else. 


::allocation::DeleteArrayAndNull

    Template Parameters:
        typename Subjective

    Return Type:
        void

    Parameters:
        Referential< Locational< Subjective > >
            locality
            
    Description:

        Subjective:  
            Type of the deallocation subject.
        
        Given a reference to a location, delete the array in memory pointed to 
        by location and assign the null pointer to locality. 

        
                               VARIABLE TEMPLATES

::allocation::DefaultNew

    Template Parameters:
        typename Subjective

    Type:
        DefaultAllocative< Subjective >

    Description:

        Subjective:  
            Type of the allocation table subject.
        
        New default constructor allocation and delete then assign null
        deallocation function reference table.


::allocation::FastDefaultNew

    Template Parameters:
        typename Subjective

    Type:
        DefaultAllocative< Subjective >

    Description:

        Subjective:  
            Type of the allocation table subject.
        
        New default constructor allocation and delete only deallocation function 
        reference table.
        

::allocation::ArrayNew

    Template Parameters:
        typename Subjective
        typename Natural

    Type:
        ArrayAllocative< Subjective, Natural >

    Description:

        Subjective:  
            Type of the allocation table subject.
        Natural:  
            Type of the natural integer node counts.
        
        New array constructor allocation and array delete then assign null
        deallocation function reference table.


::allocation::FastArrayNew

    Template Parameters:
        typename Subjective

    Type:
        ArrayAllocative< Subjective >

    Description:

        Subjective:  
            Type of the allocation table subject.
        
        New array constructor allocation and array delete only deallocation
        function reference table.


::allocation::CopyNew

    Template Parameters:
        typename Subjective

    Type:
        CopyAllocative< Subjective >

    Description:

        Subjective:  
            Type of the allocation table subject.
        
        New copy constructor allocation and delete then assign null deallocation
        function reference table.


::allocation::FastCopyNew

    Template Parameters:
        typename Subjective

    Type:
        CopyAllocative< Subjective >

    Description:

        Subjective:  
            Type of the allocation table subject.
        
        New copy constructor allocation and delete only deallocation function
        reference table.


                                    NAMESPACE


::allocation::stdlib

    Standard C library based function and variable templates.  These use 
    standard C library based memory management with the interface templates 
    defined in the outer namespace.  These will not incur constructor 
    invocations.


                               FUNCTION TEMPLATES


::allocation::stdlib::Malloc

    Template Parameters:
        typename Subjective

    Return Type:
        void

    Parameters:
        Referential< Locational< Subjective > >
            locality
		Referential< const size_t >
			count
            
    Description:

        Subjective:  
            Type of the allocation subject.
        
        Given a reference to a location and a reference to a constant count, 
        assigns the memory pointer result of an invocation of malloc to 
        locality. 


::allocation::stdlib::Malloc (overload)

    Template Parameters:
        typename Subjective

    Return Type:
        void

    Parameters:
        Referential< Locational< Subjective > >
            locality
            
    Description:

        Subjective:  
            Type of the allocation subject.
        
        Given a reference to a location, assigns the memory pointer result of an 
        invocation of malloc to locality. 


::allocation::stdlib::Calloc

    Template Parameters:
        typename Subjective

    Return Type:
        void

    Parameters:
        Referential< Locational< Subjective > >
            locality
        Referential< const size_t >
            count
            
    Description:

        Subjective:  
            Type of the allocation subject.
        
        Given a reference to a location and a reference to a constant count, 
        assigns the memory pointer result of an invocation of calloc to 
        locality. 
    

::allocation::stdlib::Calloc (overload)

    Template Parameters:
        typename Subjective

    Return Type:
        void

    Parameters:
        Referential< Locational< Subjective > >
            locality
            
    Description:

        Subjective:  
            Type of the allocation subject.
        
        Given a reference to a location, assigns the memory pointer result of an 
        invocation of calloc to locality. 
    

::allocation::stdlib::Free

    Template Parameters:
        typename Subjective

    Return Type:
        void

    Parameters:
        Referential< Locational< Subjective > >
            locality
            
    Description:

        Subjective:  
            Type of the deallocation subject.
        
        Given a reference to a location, frees the memory pointed to by locality 
        and do nothing else. 


::allocation::stdlib::FreeAndNull

    Template Parameters:
        typename Subjective

    Return Type:
        void

    Parameters:
        Referential< Locational< Subjective > >
            locality
            
    Description:

        Subjective:  
            Type of the deallocation subject.
        
        Given a reference to a location, free the memory at location then assign 
        the null pointer to locality. 


                               VARIABLE TEMPLATES


::allocation::stdlib::DefaultMalloc

    Template Parameters:
        typename Subjective

    Type:
        DefaultAllocative< Subjective >

    Description:

        Subjective:  
            Type of the allocation table subject.
        
        Malloc allocation and free then null assignment deallocation function
        reference table.        


::allocation::stdlib::FastDefaultMalloc

    Template Parameters:
        typename Subjective

    Type:
        DefaultAllocative< Subjective >

    Description:

        Subjective:  
            Type of the allocation table subject.
        
        Malloc allocation and free only deallocation function reference table.        
           

::allocation::stdlib::ArrayMalloc

    Template Parameters:
        typename Subjective

    Type:
        ArrayAllocative< Subjective, size_t >

    Description:

        Subjective:  
            Type of the allocation table subject.
        
        Malloc allocation and free then null assignment deallocation function
        reference table.        


::allocation::stdlib::FastArrayMalloc

    Template Parameters:
        typename Subjective

    Type:
        ArrayAllocative< Subjective, size_t >

    Description:

        Subjective:  
            Type of the allocation table subject.
        
        Malloc allocation and free only deallocation function reference table.        
           

::allocation::stdlib::DefaultCalloc

    Template Parameters:
        typename Subjective

    Type:
        DefaultAllocative< Subjective >

    Description:

        Subjective:  
            Type of the allocation table subject.
        
        Calloc allocation and free then null assignment deallocation function
        reference table.        
           

::allocation::stdlib::FastDefaultCalloc

    Template Parameters:
        typename Subjective
        typename Natural

    Type:
        DefaultAllocative< Subjective >

    Description:

        Subjective:  
            Type of the allocation table subject.
        
        Calloc allocation and free only deallocation function reference table.        


::allocation::stdlib::ArrayCalloc

    Template Parameters:
        typename Subjective
        typename Natural

    Type:
        ArrayAllocative< Subjective, size_t >

    Description:

        Subjective:  
            Type of the allocation table subject.
        
        Calloc allocation and free then null assignment deallocation function
        reference table.        
           

::allocation::stdlib::FastArrayCalloc

    Template Parameters:
        typename Subjective

    Type:
        ArrayAllocative< Subjective, size_t >

    Description:

        Subjective:  
            Type of the allocation table subject.
        
        Calloc allocation and free only deallocation function reference table.        


--------------------------------------------------------------------------------


                                   Trajection

                                    NAMESPACE


::trajection

    Spatial trajection type, prototype and function templates.  These templates
    can be used to represent trajectories through memory spaces such as arrays 
    or through hypothetical spaces such as stepped integer counting.  If the 
    space is altered, all instances of positions into that space should 
    immediately be considered invalidated when metaprogramming with spaces and 
    positions as template parameter types.


                                TYPE TEMPLATES


::trajection::Reachable (prototype alias)

    Template Parameters:
        typename Spatial

    Return Type:
        bool
    
    Parameter Types:
        Referential< const Spatial >

    Description:
        
        Spatial:  
            Type of the space being considered.
    
        Spatial reachability determination function prototype template.  Given a
        reference to a constant space, return true if at least one position
        can be reached in the context of trajection through that space.


::trajection::Traversable (prototype alias)

    Template Parameters:
        typename Spatial
        typename Positional

    Return Type:
        bool
    
    Parameter Types:
        Referential< const Spatial >
        Referential< const Positional >

    Description:
        
        Spatial: 
            Type of the space being considered.
        Positional:  
            Type of a position within the space.
    
        Positional traversability determination function prototype template.  
        Given a reference to a constant space and a reference to a constant 
        position, return true if the position can be traversed in the context of 
        trajection through that space.


::trajection::Trajectile (prototype alias)

    Template Parameters:
        typename Spatial
        typename Positional

    Return Type:
        Referential< const Positional >
    
    Parameter Types:
        Referential< Spatial >
        Referential< Positional >

    Description:
        
        Spatial:  
            Type of the space being considered.
        Positional:  
            Type of a position within the space.
    
        Spatial trajection function prototype template.  Given a reference to a
        space and a reference to a position, assign or modify the position 
        according to the context of trajection and return a reference to the 
        constant position.


::trajection::Expositive (prototype alias)

    Template Parameters:
        typename Spatial
        typename Positional
        typename Endemical

    Return Type:
        Conferential< Endemical >
    
    Parameter Types:
        Referential< Spatial >
        Referential< const Positional >

    Description:
        
        Spatial:  
            Type of the space being considered.
        Positional:  
            Type of a position within the space.
        Endemical:  
            Type of a subspace within the space.
    
        Subspace exposition function prototype template.  Given a reference to a
        space and a reference constant position, return a conferment reference 
        to the subspace at position.


::trajection::Vectorial (struct)

    Template Parameters:
        typename Spatial
        typename Positional
        typename Endemical

    Members:
        Referential< Traversable< Spatial, Positional > >
            contains
        Referential< Expositive< Spatial, Positional, Endemical > >
            go

    Description:
        
        Spatial:  
            Type of the space being considered.
        Positional:  
            Type of a position within the space.
        Endemical:  
            Type of a subspace within the space.
        
        contains:  
            Verify if a position exists in a given space.
        go:  
            Expose the subspace at position in the given space.
    
        Vectorial trajection function reference table type template.
        Supports direct trajectories to positions in spaces.  The invoking
        function must provide the positions with vectorial access. 


::trajection::Scalar (struct)

    Template Parameters:
        typename Spatial
        typename Positional
        typename Endemical

    Members:
        Referential< Trajectile< Spatial, Positional > >
            begin
            traverse
        Referential< Expositive< Spatial, Positional, Endemical > >
            go

    Description:
    
        Spatial:  
            Type of the space being considered.
        Positional:  
            Type of a position within the space.
        Endemical:  
            Type of a subspace within the space.
        
        begin:  
            Assign the first position in the given space. 
        traverse:  
            Assign the subsequent position relative to the current position in 
            the given space.
        go:  
            Expose the subspace at position in the given space.

        Scalar trajection function reference table type template.
        Supports sequential trajectories to positions in spaces.


::trajection::Lineal (struct)

    Template Parameters:
        typename Spatial
        typename Positional
        typename Endemical

    Members:
        Referential< const Scalar< Spatial, Positional, Endemical > >
            increment
            decrement

    Description:

        Spatial:  
            Type of the space being considered.
        Positional:  
            Type of a position within the space.
        Endemical:  
            Type of a subspace within the space.
        
        increment:  
            Scalar increment function reference table.
        decrement:  
            Scalar decrement function reference table.
    
        Lineal trajection function reference table type template.
        Supports invertible sequential trajectories to positions in spaces.


::trajection::Directional (struct)

    Template Parameters:
        typename Spatial
        typename Positional
        typename Endemical

    Members:
        Referential< const Scalar< Spatial, Positional, Endemical > >
            scale
        Referential< Reachable< Spatial > >
            direction
        Referential< Traversable< Spatial, Positional > >
            traversable
        Referential< Traversable< Spatial, Positional > >
            meets

    Description:
    
        Spatial:  
            Type of the space being considered.
        Positional:  
            Type of a position within the space.
        Endemical:  
            Type of a subspace within the space.
        
        scale:  
            Reference to scalar trajection function reference table. 
        begins:  
            Verifies if there is at least one position along this directional 
            trajectory through the given space.
        traversable:  
            Verifies if there is a subsequent position from the current position 
            along this directional trajectory through the given space.
        meets:  
            Verify if a position exists along this directional trajectory 
            through the given space.

        Directional trajection function reference table type template.
        Supports determinate sequential trajectories to positions in spaces.


::trajection::Axial (struct)

    Template Parameters:
        typename Spatial
        typename Positional
        typename Endemical

    Members:
        Referential< const Directional< Spatial, Positional, Endemical > >
            increment
            decrement

    Description:

        Spatial:  
            Type of the space being considered.
        Positional:  
            Type of a position within the space.
        Endemical:  
            Type of a subspace within the space.
        
        increment:  
            Incremental directional function reference table.
        decrement:  
            Decremental directional function reference table.
    
        Axial trajection function reference table type template.
        Supports determinate invertible sequential trajectories to positions in 
        spaces.


                               FUNCTION TEMPLATES


::trajection::Count

    Template Parameters:
        typename Spatial
        typename Positional
        typename Endemical
        typename Natural

    Return Type:
        bool

    Parameters:
        Referential< Spatial >
            space
        Referential< const Directional< Spatial, Positional, Endemical > >
            direction
        Referential< Positional >
            position
        Referential< Natural >
            count
            
    Description:

        Spatial:  
            Type of the space being considered.
        Positional:  
            Type of a position within the space.
        Endemical:  
            Type of a subspace within the space.
        Natural:  
            Type of the natural integer node counts.
        
        Given a reference to a space, a reference to a constant direction, a 
        reference to a modifiable position and a reference to a modifiable 
        count, assigns the number of positions along the direction of travel to 
        count and returns true if at least one position was reached.


::trajection::Count (overload)

    Template Parameters:
        typename Spatial
        typename Positional
        typename Endemical
        typename Natural
        Referential< const Directional< Spatial, Positional, Endemical > >
            Direction

    Return Type:
        bool

    Parameters:
        Referential< Spatial >
            space
        Referential< Positional >
            position
        Referential< Natural >
            count
            
    Description:

        Spatial:  
            Type of the space being considered.
        Positional:  
            Type of a position within the space.
        Endemical:  
            Type of a subspace within the space.
        Natural:  
            Type of the natural integer node counts.
        Direction:  
            Direction (constexpr) of travel to count positions along.

        Given a reference to a space, a reference to a modifiable position and a
        reference to a modifiable count, assigns the number of positions along 
        the direction of travel to count and returns true if at least one 
        position was reached.


--------------------------------------------------------------------------------


                                    Sortation


                                    NAMESPACE


::sortation

    Spatial sortation prototype and function templates.  These templates are 
    used to search for positions in spaces linearly or bisectionally.  Trivial 
    relational operator based equate and order function templates are also 
    provided for use with the search function templates.  If the space is 
    altered, all instances of positions into that space should immediately be 
    considered invalidated when metaprogramming with spaces and positions as 
    template parameter types.


                                TYPE TEMPLATES


::sortation::Assortive (prototype alias)

    Template Parameters:
        typename Evaluative

    Return Type:
        bool
    
    Parameter Types:
        Referential< const Evaluative >
        Referential< const Evaluative >

    Description:

        Evaluative:  
            Type of the values being evaluated.
    
        Sortation function prototype template.  Given two respective references
        to constant values, return true if the semantic context of sortation is 
        correct.  Used to determine one of either equality or order.


                               FUNCTION TEMPLATES


::sortation::EquateRelationally

    Template Parameters:
        typename Relational

    Return Type:
        bool

    Parameters:
        Referential< const Relational >
            base
        Referential< const Relational >
            relative

    Description:
         
         Relational:  
             Type of the relational values being evaluated.
         
         Given a reference to a constant base value and a reference to a 
         constant relative value, returns true if base is equal to relative.


::sortation::OrderRelationally

    Template Parameters:
        typename Relational

    Return Type:
        bool

    Parameters:
        Referential< const Relational >
            base
        Referential< const Relational >
            relative

    Description:
         
         Relational:  
             Type of the relational values being evaluated.
         
         Given a reference to a constant base value and a reference to a 
         constant relative value, returns true if base is less than relative.


::sortation::OrderInversely

    Template Parameters:
        typename Relational

    Return Type:
        bool

    Parameters:
        Referential< const Relational >
            base
        Referential< const Relational >
            relative

    Description:
         
         Relational:  
             Type of the relational values being evaluated.
         
         Given a reference to a constant base value and a reference to a 
         constant relative value, returns true if base is greater than relative.


::sortation::SearchLinearly

    Template Parameters:
        typename Spatial
        typename Positional
        typename Evaluative
        Referential< Assortive< Evaluative > >
            Equate

    Return Type:
        bool

    Parameters:
        Referential< const Spatial >
            space
        Referential< const Directional< const Spatial, Positional, const Evaluative > >
            direction
        Referential< const Evaluative >
            value
        Referential< Positional >
            position
            
    Description:

        Spatial:  
            Type of the space to search.
        Positional:  
            Type of a position within the space.
        Evaluative:  
            Type of the values being evaluated.
        Equate:  
            Function which will compare values for equality.
        
        Given a reference to a constant space, a reference to a constant 
        direction, a reference to a constant value and a reference to a 
        modifiable position, returns true if value is found in the space. Makes 
        use of the linear search algorithm, visiting each position along the 
        direction of travel, verifying equivalence at each position.


::sortation::SearchLinearly (overload)

    Template Parameters:
        typename Spatial
        typename Positional
        typename Evaluative
        Referential< Assortive< Evaluative > >
            Equate
        Referential< const Directional< const Spatial, Positional, const Evaluative > >
            Direction

    Return Type:
        bool

    Parameters:
        Referential< const Spatial >
            space
        Referential< const Evaluative >
            value
        Referential< Positional >
            position
            
    Description:

        Spatial:  
            Type of the space to search.
        Positional:  
            Type of a position within the space.
        Evaluative:  
            Type of the values being evaluated.
        Equate:  
            Function which will compare values for equality.
        Direction:  
            Direction (constexpr) of travel through the space.
        
        Given a reference to a constant space, a reference to a constant value 
        and a reference to a modifiable position, returns true if value is found
        in the space.  Makes use of the linear search algorithm, visiting each
        position along the direction of travel, verifying equivalence at each 
        position.


::sortation::SearchBisectionally

    Template Parameters:
        typename Spatial
        typename Positional
        typename Natural
        typename Evaluative
        Referential< Assortive< Evaluative > >
            Equate
        Referential< Assortive< Evaluative > >
            Order

    Return Type:
        bool

    Parameters:
        Referential< const Spatial >
            space
        Referential< const Axial< const Spatial, Positional, const Evaluative > >
            axis
        Referential< const Natural >
            count
        Referential< const Evaluative >
            value
        Referential< Positional >
            position
            
    Description:

        Spatial:  
            Type of the space to search.
        Positional:  
            Type of a position within the space.
        Natural:  
            Type of the natural integer element count in the space.
        Evaluative:  
            Type of the values being evaluated.
        Equate:  
            Function which will compare values for equality.
        Order:  
            Function which will compare values for determination of order.
        
        Given a reference to a constant space, a reference to a constant axis, a
        reference to a constant count, a reference to a constant value and a 
        reference to a modifiable position, returns true if value is found in 
        the space.  Makes use of the bisectional search algorithm visiting 
        positions at half the remaining range for each step, verifying 
        equivalence at each position and order when not equal to indicate
        direction.


::sortation::SearchBisectionally (overload)

    Template Parameters:
        typename Spatial
        typename Positional
        typename Natural
        typename Evaluative
        Referential< const Axial< const Spatial, Positional, const Evaluative > >
            Axis
        Referential< Assortive< Evaluative > >
            Equate
        Referential< Assortive< Evaluative > >
            Order

    Return Type:
        bool

    Parameters:
        Referential< const Spatial >
            space
        Referential< const Natural >
            count
        Referential< const Evaluative >
            value
        Referential< Positional >
            position
            
    Description:
    
        Spatial:  
            Type of the space to search.
        Positional:  
            Type of a position within the space.
        Natural:  
            Type of the natural integer element count in the space.
        Evaluative:  
            Type of the values being evaluated.
        Axis:  
            Axis (constexpr) of travel through the consolidated space.
        Equate:  
            Function which will compare values for equality.
        Order:  
            Function which will compare values for determination of order.
        
        Given a reference to a constant space, a reference to a constant axis, a
        reference to a constant count, a reference to a constant value and a 
        reference to a modifiable position, returns true if value is found in 
        the space.  Makes use of the bisectional search algorithm visiting 
        positions at half the remaining range for each step, verifying 
        equivalence at each position and order when not equal to indicate
        direction.


--------------------------------------------------------------------------------


                                   Consecution


                                    NAMESPACE


::consecution

    Sequence operation type templates.  These templates are used to manipulate a
    sequence in order to add or remove elements in the space.  After the space 
    is altered, all instances of positions into that space should immediately be 
    considered invalidated when metaprogramming with spaces and positions as 
    template parameter types.


                                TYPE TEMPLATES


::consecution::Conjoint (struct)

    Template Parameters:
        typename Consolidative
        typename Positional
        typename Relative
        typename Appositional
        typename Elemental

    Members:
        Referential< bool(
			Referential< Consolidative >,
			Referential< const Directional< const Relative, Appositional, const Elemental > >,
			Referential< const Relative >,
			Referential< const Appositional >,
			Referential< const Appositional >
        ) >
            accede
        Referential< bool(
			Referential< Consolidative >,
			Referential< const Positional >,
			Referential< const Directional< const Relative, Appositional, const Elemental > >,
			Referential< const Relative >,
			Referential< const Appositional >,
			Referential< const Appositional >
		) >
            precede
        Referential< bool(
            Referential< Consolidative >,
            Referential< const Directional< const Relative, Appositional, const Elemental > >,
            Referential< const Relative >,
            Referential< const Appositional >,
            Referential< const Appositional >
        ) >
            proceed

    Description:
    
        Consolidative:  
            Type of the operand sequence.
        Positional:  
            Type of a position in the sequence.
        Relative:  
            Type of the relative space to read from.
        Appositional:  
            Type of a position in the relative space.
        Elemental:  
            Type of the elements in all cases.
        
        accede:  
            Add zero or more elements to the beginning of the sequence.  Returns 
            true if at least one element was effectively added to the sequence.  
            Appositional positions are expected to be in directional order.
        precede:  
            Insert zero or more elements at a given position in the sequence. 
            Returns true if at least one element was effectively added to the 
            sequence.  Appositional positions are expected to be in directional
            order.
        proceed:  
            Add zero or more elements to the end of the sequence.  Returns true 
            if at least one element was effectively added to the sequence.  
            Appositional positions are expected to be in directional order.
    
        Sequence batch operations function reference table type template.
        Supports adding zero or more elements from a relative space, which may
        differ from the consolidative space.  Useful when adding multiple
        elements from an array into a linked list in generic programming
        circumstances, for example.


::consecution::Sequent (struct)

    Template Parameters:
        typename Consolidative
        typename Positional
        typename Natural
        typename Elemental

    Members:
        Referential< bool(
            Referential< Consolidative >,
            Referential< const Natural >
        ) >
            antecede
        Referential< Natural(
            Referential< const Consolidative >
        ) >
            account
        Referential< bool(
            Referential< Consolidative >,
            Referential< const Elemental >
        ) >
            accede
        Referential< bool(
            Referential< Consolidative >,
            Referential< const Positional >,
            Referential< const Elemental >
        ) >
            precede
        Referential< bool(
            Referential< Consolidative >,
            Referential< const Elemental >
        ) >
            proceed
        Referential< bool(
            Referential< Consolidative >,
            Referential< const Natural >
        ) >
            succeed
        Referential< bool(
            Referential< Consolidative >,
            Referential< const Positional >,
            Referential< const Natural >
        ) >
            concede
        Referential< bool(
            Referential< Consolidative >,
            Referential< const Natural >
        ) >
            recede
        Referential< bool(
            Referential< Consolidative >
        ) >
            secede
        Referential< bool(
            Referential< Consolidative >
        ) >
            condense
        Referential< const Conjoint< Consolidative, Positional, Consolidative, Positional, Elemental > >
            conjoiner

    Description:
    
        Consolidative:  
            Type of the operand sequence.
        Positional:  
            Type of the consolidative sequence's position.
        Natural:  
            Type of natural integer counts.
        Elemental:  
            Type of the elements in the sequence.
        
        antecede:  
            Return true if and only if by the end of this function called by 
            reference, the consolidative space has pre-allocated enough space to
            add the number of requested elements to the sequence. Return false 
            if this consolidative space does not support this operation.
        account:  
            Return the length of the sequence.
        accede:  
            Add one element to the beginning of the sequence, return true if the 
            operation completed successfully.
        precede:  
            Insert one element at a given position in the sequence, return true 
            if the operation completed successfully.
        proceed:  
            Add elements to the end of the sequence, return true if the 
            operation completed successfully.
        succeed:  
            Remove count elements from the beginning of the sequence, return 
            true if the operation completed successfully.  Must return false 
            non-destructively if count is greater than the length of the 
            sequence.
        concede:  
            Remove count elements from the given position in the sequence, 
            return true if the operation completed successfully.  Must return 
            false non-destructively if count is greater than the number of 
            elements available beginning with the given position.
        recede:  
            Remove count elements from the end of the sequence, return true if 
            the operation completed successfully.  Must return false 
            non-destructively if count is greater than the length of the 
            sequence.
        secede:  
            Remove all elements which may exist in the sequence, return true if 
            and only if at least one element existed and the sequence is now 
            empty (0 length).
        condense:  
            Return true if and only if this reentrant memory deallocation 
            function has more work to process after this call.  Return false if 
            this consolidative space does not support this operation.
        conjoiner:  
            Conjoint batch operation function reference table which can only 
            read from another consolidative type space.

        Sequence operations function reference table type template.
        Supports generic sequence operations, including adding or removing
        zero or more elements at the beginning, at a given position or at the 
        end of the sequence, as well as generic memory management facilities for
        the sequence.  After any function alters the space, all positions in the
        space should immediately be considered invalidated.


--------------------------------------------------------------------------------


                                   Composition


                                    NAMESPACE


::composition

    Composition operation type template.  This template is used to manipulate
compositions which may or may not have a specific semantic contract.  For
instance it may or may not be valid to compose the same element twice in a
composition, depending on the context of it's use.


                                TYPE TEMPLATES

::composition::Compositional (struct)

    Template Parameters:
        typename Consolidative
        typename Natural
        typename Elemental

    Members:
        Referential< bool(
			Referential< Consolidative >,
			Referential< const Natural >
        ) >
            precompose
        Referential< bool(
			Referential< const Consolidative >,
			Referential< const Elemental  >
		) >
            accredit
        Referential< bool(
			Referential< Consolidative >,
			Referential< const Elemental  >
		) >
            compose
        Referential< bool(
			Referential< Consolidative >,
			Referential< const Elemental  >,
			Referential< const Elemental  >
		) >
            recompose
        Referential< bool(
			Referential< Consolidative >,
			Referential< const Elemental  >
		) >
            discompose
        Referential< bool(
			Referential< Consolidative >
		) >
            decompose
        Referential< bool(
			Referential< Consolidative >
		) >
            dispose

    Description:

        Consolidative:  
            Type of the operand composition.
        Natural:  
            Type of the natural integer counts.
        Elemental:  
            Type of the elements in the composition.
        
        precompose:  
            Return true if and only if by the end of this function called by 
            reference, the consolidative space has pre-allocated enough space to
            add elements to the composition if compose was subsequently called 
            this number of times.  Return false if this consolidative space does 
            not support this operation.
        accredit:  
            Return true if this composition contains this element.
        compose:  
            Return true if adding this element has meaningfully altered the 
            composition.
        recompose:  
            Return true if substituting one element for another has meaningfully 
            altered the composition.
        discompose:  
            Return true if removing this element has meaningfully altered the 
            composition.
        decompose:  
            Return true if and only if clearing the composition has meaningfully
            altered the composition.
        dispose:  
            Return true if and only if this reentrant memory deallocation 
            function has more work to process after this call.  Return false if 
            this consolidative space does not support this operation.
    
        Composition operations function reference table type template.
        Supports generic composition operations, including composing, 
        accrediting, recomposing, discomposing and decomposing elements in 
        compositions, as well as generic memory management facilities for the 
        composition.  There are no semantic expectations regarding uniqueness of
        compositional elements, nor regarding individuality of element
        composition with respect to the compose, recompose or discompose 
        operations. 


--------------------------------------------------------------------------------


                                   Selection


                                    NAMESPACE


::selection

    Unsorted set operation type, prototype and function templates.  These 
    templates are used to manipulate, operate, duplicate or compare unsorted 
    sets.  Sets shall not contain duplicate elements in order to achieve finer 
    optimization of operations.


                                TYPE TEMPLATES


::selection::Duplicative (prototype alias)

    Template Parameters:
        typename Consolidative
        typename Basic
        typename BasicPositional
        typename Elemental

    Return Type:
        bool
    
    Parameter Types:
        Referential< Consolidative >
        Referential< const Directional< const Basic, BasicPositional, const Elemental > >
        Referential< const Basic >

    Description:
    
        Consolidative:
            Type of the operand set.
        Basic:  
            Type of the base set.
        BasicPositional:  
            Type of a base set position.
        Elemental:  
            Type of the elements in the sets.
        
        Given a reference to a modifiable operand set, a reference to a constant 
        directional basis and a reference to a constant base set, duplicate the
        base set in operand and return true if the operation completed 
        successfully.


::selection::Equative (prototype alias)

    Template Parameters:
        typename Basic
        typename BasicPositional
        typename Relative
        typename RelativePositional
        typename Elemental

    Return Type:
        bool
    
    Parameter Types:
        Referential< const Directional< const Basic, BasicPositional, const Elemental > >
        Referential< const Basic >
        Referential< const Directional< const Relative, RelativePositional, const Elemental > >
        Referential< const Relative >

    Description:
    
        Basic:  
            Type of the base set.
        BasicPositional:  
            Type of a base set position.
        Relative:  
            Type of the relative set.
        RelativePositional:  
            Type of a relative set position.
        Elemental:  
            Type of the elements in the sets.
        
        Given a reference to a constant directional basis, a reference to a 
        constant base set, a reference to a constant directional relativity and
        a reference to a constant relative set, return true if the sets are 
        identical including when both are empty.


::selection::Sectional (struct)

    Template Parameters:
        typename Consolidative
        typename Basic
        typename Positional
        typename Relative
        typename Oppositional
        typename Elemental

    Members:
        Referential< bool(
            Referential< Consolidative >,
            Referential< const Directional< const Basic, Positional, const Elemental > >,
            Referential< const Basic >,
            Referential< const Directional< const Relative, Oppositional, const Elemental > >,
            Referential< const Relative >
        ) >
            complement
            differentiate
            intersect
            unite

    Description:

        Consolidative:  
            Type of the operand set.
        Basic:  
            Type of the base set.
        Positional:  
            Type of the base set position.
        Relative:  
            Type of the relative set.
        Oppositional:  
            Type of the relative set position.
        Elemental:  
            Type of the elements in the sets.
        
        complement:  
            Empty the consolidative set and compose into it the relative 
            complement (or difference of sets) of a base set with respect to 
            relative set.  Return true if the operation completed successfully,
            even if the consolidative set is empty.  The consolidative set must 
            not be the same as either the base or relative set.
        differentiate:  
            Compose the symmetric difference (or disjunctive union) of a base 
            and relative set.  Return true if the operation completed 
            successfully, even if the consolidative set is empty.  The 
            consolidative set must not be the same as either the base or 
            relative set.
        intersect:  
            Empty the consolidative set and compose into it the intersection of
            a base and relative set.  Return true if the operation completed 
            successfully, even if the consolidative set is empty.  The 
            consolidative set must not be the same as either the base or 
            relative set.
        unite:  
            Empty the consolidative set and compose into it the union of a base 
            and relative set.  Return true if the operation completed 
            successfully, even if the consolidative set is empty.  The 
            consolidative set must not be the same as either the base or 
            relative set.
    
        Unsorted set on set operations function reference table type template.
        Supports generic set on set operations into consolidative type sets.
        Duplicate elements must not exist in any one set.  Useful when the base 
        or relative sets are not the same type as the consolidative set.  Also 
        useful when the base and relative sets are not in the same sorted order 
        as the consolidative set or the consolidative set itself is unsorted.


::selection::Selective (struct)

    Template Parameters:
        typename Consolidative
        typename Positional
        typename Natural
        typename Elemental

    Members:
        Referential< const Compositional< Consolidative, Natural, Elemental > >
            composer
        Referential< const Sectional< Consolidative, Consolidative, Positional, Consolidative, Positional, Elemental > >
            section
        Referential< Duplicative< Consolidative, Consolidative, Positional, Elemental > >
            duplicate
        Referential< Equative< Consolidative, Positional, Consolidative, Positional, Elemental > >
            equate
        Referential< Natural( 
        	Referential< const Consolidative > 
        ) >
            count

    Description:

        Consolidative:  
            Type of the operand set.
        Positional:  
            Type of the consolidative set position.
        Natural:  
            Type of the natural integer counts.
        Elemental:  
            Type of the elements in the sets.
        
        composer:  
            The composer must not allow duplicate elements in the set.  If 
            compose is called and the element already exists in the set, it 
            should return false.  If recompose is called and the replacement 
            element already exists in the set, it should return false without 
            removing the original element from the set.
        section:  
            Sectional set on set operation function reference table which can 
            only read from another consolidative type space.  See the Sectional 
            description above.
        duplicate:
            Return true if the base set was duplicated.  The base set should be
            presumed to be in unsorted or dissimilar order to the operand set.
        equate:  
            Return true if both sets contain the same elements.  The sets should
            be presumed to be in unsorted or dissimilar orders.
        count:  
            Return the count of elements in the set.
    
        Set operations function reference table type template.
        Supports generic elementary and set on set operations on consolidative 
        type sets.


                               FUNCTION TEMPLATES


::selection::EquateSelections

    Template Parameters:
        typename Basic
        typename BasicPositional
        typename Relative
        typename RelativePositional
        typename Elemental
        Referential< Assortive< Elemental > >
            Equate

    Return Type:
        bool

    Parameters:
        Referential< const Directional< const Basic, BasicPositional, const Elemental > >
            basis
        Referential< const Basic >
            base_set
        Referential< const Directional< const Relative, RelativePositional, const Elemental > >
            relativity
        Referential< const Relative >
            relative_set
            
    Description:
    
        Basic:  
            Type of the base set.
        BasicPositional:  
            Type of a base set position.
        Relative:  
            Type of the relative set.
        RelativePositional:  
            Type of a relative set position.
        Elemental:  
            Type of the elements in the sets.
        Equate:  
            Function which will compare values for equality.  
        
        Given a reference to a constant directional basis, a reference to a 
        constant base set, a reference to a constant directional relativity and
        a reference to a constant relative set, returns true if both sets 
        contain the same elements or both are empty.  Returns false if the sets 
        differ or one is empty and the other is not.  Respects the semantics of 
        the "Selective" member "equate".


--------------------------------------------------------------------------------


                                   Collection


                                    NAMESPACE


::collection

    Sorted set operation type, prototype and function templates.  These 
    templates are used to manipulate, operate, duplicate or compare sorted sets.
    Sets shall not contain duplicate elements in order to achieve finer 
    optimization of operations.


                                TYPE TEMPLATES


::selection::Collative (prototype alias)

    Template Parameters:
        typename Consolidative
        typename Basic
        typename BasicPositional
        typename Elemental

    Return Type:
        bool
    
    Parameter Types:
        Referential< Consolidative >
        Referential< const Axial< const Basic, BasicPositional, const Elemental > >
        Referential< const Basic >

    Description:
    
        Consolidative:
            Type of the operand set.
        Basic:  
            Type of the base set.
        BasicPositional:  
            Type of a base set position.
        Elemental:  
            Type of the elements in the sets.
        
        Given a reference to a modifiable operand sorted set, a reference to a 
        constant axial basis and a reference to a constant sorted base set, 
        duplicate the base set in operand and return true if the operation 
        completed successfully.  Should only be used when the operand and base
        sets are in the same sortation order.


::collection::Bisectional (struct)

    Template Parameters:
        typename Consolidative
        typename Basic
        typename Positional
        typename Relative
        typename Oppositional
        typename Elemental

    Members:
        Referential< bool(
            Referential< Consolidative >,
            Referential< const Axial< const Basic, Positional, const Elemental > >,
            Referential< const Basic >,
            Referential< const Axial< const Relative, Oppositional, const Elemental > >,
            Referential< const Relative >
        ) >
            complement
            differentiate
            intersect
            unite

    Description:
    
        Consolidative:  
            Type of the operand set.
        Basic:  
            Type of the base set.
        Positional:  
            Type of the base set position.
        Relative:  
            Type of the relative set.
        Oppositional:  
            Type of the relative set position.
        Elemental:  
            Type of the elements in the sets.
        
        complement:  
            Empty the consolidative set and compose into it the relative 
            complement (or difference of sets) of a base set with respect to 
            relative set.  Return true if the operation completed successfully, 
            even if the consolidative set is empty.  The consolidative set must 
            not be the same as either the base or relative set.
        differentiate:  
            Compose the symmetric difference (or disjunctive union) of a base 
            and relative set.  Return true if the operation completed 
            successfully, even if the consolidative set is empty.  The 
            consolidative set must not be the same as either the base or 
            relative set.
        intersect:  
            Empty the consolidative set and compose into it the intersection of
            a base and relative set.  Return true if the operation completed 
            successfully, even if the consolidative set is empty.  The 
            consolidative set must not be the same as either the base or 
            relative set.
        unite:  
            Empty the consolidative set and compose into it the union of a base 
            and relative set.  Return true if the operation completed 
            successfully, even if the consolidative set is empty.  The 
            consolidative set must not be the same as either the base or 
            relative set.

        Sorted set operations function reference table type template.
        Supports generic operations on consolidative type sets.  Duplicate
        elements must not exist in any set.  Should only be used if all three
        sets are in the same sortation order.

                
::collection::Collective (struct)

    Template Parameters:
        typename Consolidative
        typename Positional
        typename Natural
        typename Elemental

    Members:
        Referential< const Selective< Consolidative, Positional, Natural, Elemental > >
            selector
        Referential< const Bisectional< Consolidative, Consolidative, Positional, Consolidative, Positional, Elemental > >
            bisection
        Referential< const Collative< Consolidative, Consolidative, Positional, Elemental > >
            collate
        Referential< Equative< Consolidative, Positional, Consolidative, Positional, Elemental > >
            equate

    Description:

        Consolidative:  
            Type of the operand set.
        Positional:  
            Type of the consolidative set position.
        Natural:  
            Type of the natural integer counts.
        Elemental:  
            Type of the elements in the sets.
        
        selector:  
            The selector must enforce semantic expectations as documented in the
            selection documentation above.  The section table must be capable of
            performing set on set operations with base and relative sets which 
            are not in the same sortation order as the sorted set collection.
        bisection:  
            Bisectional set on set operation function reference table which can 
            only read from another consolidative type space. See the Bisectional 
            description above.
        collate:
            Return true if the base set was duplicated.  The base set must be in
            the same sortation order as the operand set.
        equate:  
            Return true if both sets contain the same elements or both are 
            empty.  Return false if the sets differ or one is empty and the 
            other is not.  The directions provided should read the elements of 
            their corresponding sets in the sortation order of the operand set.
            For example if the operand set is in alphabetical order, the base 
            set could also be in alphabetical order with an increment 
            directional basis and the relative set could be in reverse 
            alphabetical order with a decrement directional relativity where 
            both would read the elements in the same order as the consolidative 
            type operand set.
    
        Sorted set operations function reference table type template.
        Supports generic elementary and set on set operations on consolidative 
        type sorted sets.


                               FUNCTION TEMPLATES


::collection::EquateCollections

    Template Parameters:
        typename Basic
        typename BasicPositional
        typename Relative
        typename RelativePositional
        typename Elemental
        Referential< Assortive< Elemental > >
            Equate

    Return Type:
        bool

    Parameters:
        Referential< const Directional< const Basic, BasicPositional, const Elemental > >
            basis
        Referential< const Basic >
            base_set
        Referential< const Directional< const Relative, RelativePositional, const Elemental > >
            relativity
        Referential< const Relative >
            relative_set
            
    Description:

        Basic:  
            Type of the base set.
        BasicPositional:  
            Type of the base set position.
        Relative:  
            Type of the relative set.
        RelativePositional:  
            Type of the relative set position.
        Elemental:  
            Type of the elements in the sets.
        Equate:  
            Function which will compare values for equality.  
        
        Given a reference to a constant directional basis, a reference to a 
        constant base set, a reference to a constant directional relativity and
        a reference to a constant relative set, returns true if the sorted sets 
        are equivalent.  Respects the semantics of the "Collective" member 
        "equate".


--------------------------------------------------------------------------------


                                   Association


                                    NAMESPACE


::association

    Associative mapping operation type templates.  These templates are used to
    manipulate and optionally constitute associative maps.  Maps shall not 
    contain duplicate keys in order to achieve finer optimization of operations.


                                TYPE TEMPLATES


::association::Associative (struct)

    Template Parameters:
        typename Consolidative
        typename Natural
        typename Correlative
        typename Evaluative

    Members:
        Referential< bool(
            Referential< Consolidative >,
            Referential< const Natural >
        ) >
            prepare
        Referential< Natural(
            Referential< const Consolidative >
        ) >
            grade
        Referential< bool(
            Referential< const Consolidative >,
            Referential< const Correlative >
        ) >
            correspond
        Referential< bool(
            Referential< Consolidative >,
            Referential< const Correlative >,
            Referential< const Evaluative >
        ) >
            associate
        Referential< bool(
            Referential< Consolidative >,
            Referential< const Correlative >,
            Referential< const Correlative >
        ) >
            reassociate
        Referential< bool(
            Referential< Consolidative >,
            Referential< const Correlative >
        ) >
            disassociate
        Referential< bool(
            Referential< Consolidative >
        ) >
            disband
        Referential< bool(
            Referential< Consolidative >
        ) >
            dissolve

    Description:

        Consolidative:  
            Type of the operand map space.
        Natural:  
            Type of the natural integer counts.
        Correlative:  
            Type of the relator keys in the association.
        Evaluative:  
            Type of the value elements in the association.
        
        prepare:  
            Return true if and only if by the end of this function called by 
            reference, the consolidative space has pre-allocated enough space to
            add associations if associate was subsequently called this number of
            times.  Return false if this consolidative space does not support 
            this operation.
        grade:  
            Return the number of associations in the associative mapping.
        correspond:  
            Return true if this association contains this relator.
        associate:  
            Return true if adding this pairing has meaningfully altered the 
            association.  Return false if the key relator already exists in the
            map.
        reassociate:  
            Return true if substituting one element for another has meaningfully 
            altered the association.  Return false non-destructively if the 
            replacement relator already exists in the map.
        disassociate: 
            Return true if removing this element has meaningfully altered the 
            composition.
        disband:  
            Return true if and only if clearing the composition has meaningfully 
            altered the composition.
        dissolve:  
            Return true if and only if this reentrant memory deallocation 
            function has more work to process after this call.  Return false if 
            this consolidative space does not support this operation.
    
        Associative map operations function reference table type template.
        Supports generic association operations, including associating, 
        corresponding, reassociationg, disassociating and disbanding
        associations, as well as generic memory management facilities for the 
        association. 


::association::Associational (struct)

    Template Parameters:
        typename Correlative
        typename Evaluative

    Members:
        Correlative
            relator
        Evaluative
            value

    Description:
    
        Correlative:  
            Type of the key relators in the association.
        Evaluative:  
            Type of the value elements in the association.
        
        Associational relator-value pairing type template.  Made available for
        convenience, though not necessary when implementating an associative
        map operations table.


--------------------------------------------------------------------------------


                                   Localization


                                    NAMESPACE


::localization

    Pointer trajection type, function and variable templates.  These templates 
    are used to traverse elements relative to a pointer space.


                                TYPE TEMPLATES

                                
::localization::WriteLocal (type alias)

    Template Parameters:
        typename Elemental

    Aliased Type:
        const Locational< Elemental >

    Description:
    
        Elemental:  
            Type of the elements in the pointer local space.
        
        Localization spatial type template.  Used to represent a pointer to a 
        modifiable space.


::localization::ReadLocal (type alias)

    Template Parameters:
        typename Elemental

    Aliased Type:
        const Locational< const Elemental >

    Description:
    
        Elemental:  
            Type of the elements in the pointer local space.
        
        Localization spatial type template.  Used to represent a pointer to a 
        constant space.


::localization::WritePositional (type alias)

    Template Parameters:
        typename Elemental

    Aliased Type:
        Locational< Elemental >

    Description:
    
        Elemental:  
            Type of the elements in the pointer local space.
        
        Localization positional type template.  Used to represent a local 
        position in a pointer to modifiable space.


::localization::ReadPositional (type alias)

    Template Parameters:
        typename Elemental

    Aliased Type:
        Locational< const Elemental >

    Description:
    
        Elemental:  
            Type of the elements in the pointer local space.
        
        Localization positional type template.  Used to represent a local 
        position in a pointer to constant space.


                               FUNCTION TEMPLATES


::localization::PositionalGo

    Template Parameters:
        typename Elemental

    Return Type:
        Conferential< Elemental >

    Parameters:
        Referential< const Locational< Elemental > >
            locality
        Referential< const Locational< Elemental > >
            position
            
    Description:
    
        Elemental:  
            Type of the elements in the pointer local space.
        
        Given a reference to a constant location and a reference to a constant
        position, returns the element located at position.  Implements the "go"
        member for pointer location based scalar trajection.


::localization::PositionalGoChecksForNull

    Template Parameters:
        typename Elemental

    Return Type:
        Conferential< Elemental >

    Parameters:
        Referential< const Locational< Elemental > >
            locality
        Referential< const Locational< Elemental > >
            position
            
    Description:
    
        Elemental:  
            Type of the elements in the pointer local space.
        
        Given a reference to a constant location and a reference to a constant
        position, throws position if it is null.  Returns the element located at
        position.  Implements the "go" member for pointer location based scalar
        trajection.


::localization::Begin

    Template Parameters:
        typename Elemental

    Return Type:
        Referential< const Locational< Elemental > >

    Parameters:
        Referential< const Locational< Elemental > >
            locality
        Referential< Locational< Elemental > >
            position
            
    Description:
    
        Elemental:  
            Type of the elements in the pointer local space.
        
        Given a reference to a constant location and a reference to a modifiable
        position, assigns location to position.  Returns a reference to position
        as constant.  Implements the "begin" member for pointer location based 
        scalar trajection.


::localization::BeginChecksForNull

    Template Parameters:
        typename Elemental

    Return Type:
        Referential< const Locational< Elemental > >

    Parameters:
        Referential< const Locational< Elemental > >
            locality
        Referential< Locational< Elemental > >
            position
            
    Description:
    
        Elemental:  
            Type of the elements in the pointer local space.
        
        Given a reference to a constant location and a reference to a modifiable
        position, throws location if it is null.  Assigns location to position.
        Returns a reference to position as constant.  Implements the "begin" 
        member for pointer location based scalar trajection.


::localization::TraverseIncrement

    Template Parameters:
        typename Elemental

    Return Type:
        Referential< const Locational< Elemental > >

    Parameters:
        Referential< const Locational< Elemental > >
            locality
        Referential< Locational< Elemental > >
            position
            
    Description:
    
        Elemental:  
            Type of the elements in the pointer local space.
        
        Given a reference to a constant location and a reference to a modifiable
        position, assigns the next increment to position then returns a 
        reference to position as constant.  Implements the "traverse" member 
        for pointer location based scalar trajection.


::localization::TraverseIncrementChecksForNull

    Template Parameters:
        typename Elemental

    Return Type:
        Referential< const Locational< Elemental > >

    Parameters:
        Referential< const Locational< Elemental > >
            locality
        Referential< Locational< Elemental > >
            position
            
    Description:
    
        Elemental:  
            Type of the elements in the pointer local space.
        
        Given a reference to a constant location and a reference to a modifiable
        position, throws position if it is null.  Assigns the next increment to 
        position then returns a reference to position as constant. Implements
        the "traverse" member for pointer location based scalar trajection.


::localization::TraverseDecrement

    Template Parameters:
        typename Elemental

    Return Type:
        Referential< const Locational< Elemental > >

    Parameters:
        Referential< const Locational< Elemental > >
            locality
        Referential< Locational< Elemental > >
            position
            
    Description:
    
        Elemental:  
            Type of the elements in the pointer local space.
        
        Given a reference to a constant location and a reference to a modifiable
        position, assigns the next decrement to position then returns a 
        reference to position as constant.  Implements the "traverse" member 
        for pointer location based scalar trajection.


::localization::TraverseDecrementChecksForNull

    Template Parameters:
        typename Elemental

    Return Type:
        Referential< const Locational< Elemental > >

    Parameters:
        Referential< const Locational< Elemental > >
            locality
        Referential< Locational< Elemental > >
            position
            
    Description:
    
        Elemental:  
            Type of the elements in the pointer local space.
        
        Given a reference to a constant location and a reference to a modifiable
        position, throws position if it is null.  Assigns the next decrement to 
        position then returns a reference to position as constant.  Implements 
        the "traverse" member for pointer location based scalar trajection.


                               VARIABLE TEMPLATES
                               

::localization::ReadIncrementScale

    Template Parameters:
        typename Elemental

    Type:
        Scalar< const Locational< const Elemental >, Locational< const Elemental >, const Elemental >

    Description:
    
        Elemental:  
            Type of the elements in the pointer local space.
        
        Increment scale trajection from a pointer location function reference 
        table.  Returns references to constant elements.


::localization::ReadIncrementScaleChecksForNull

    Template Parameters:
        typename Elemental

    Type:
        Scalar< const Locational< const Elemental >, Locational< const Elemental >, const Elemental >

    Description:
    
        Elemental:  
            Type of the elements in the pointer local space.
        
        Increment scale trajection from a pointer location function reference 
        table.  Throws null pointers before any operators are applied.  Returns 
        references to constant elements.  


::localization::WriteIncrementScale

    Template Parameters:
        typename Elemental

    Type:
        Scalar< const Locational< const Elemental >, Locational< const Elemental >, const Elemental >

    Description:
    
        Elemental:  
            Type of the elements in the pointer local space.
        
        Increment scale trajection from a pointer location function reference 
        table.  Returns references to modifiable elements.


::localization::WriteIncrementScaleChecksForNull

    Template Parameters:
        typename Elemental

    Type:
        Scalar< const Locational< const Elemental >, Locational< const Elemental >, const Elemental >

    Description:
    
        Elemental:  
            Type of the elements in the pointer local space.
        
        Increment scale trajection from a pointer location function reference 
        table.  Throws null pointers before any operators are applied.  Returns 
        references to modifiable elements.


::localization::ReadDecrementScale

    Template Parameters:
        typename Elemental

    Type:
        Scalar< const Locational< const Elemental >, Locational< const Elemental >, const Elemental >

    Description:
    
        Elemental:  
            Type of the elements in the pointer local space.
        
        Decrement scale trajection from a pointer location function reference 
        table.  Returns references to constant elements.
        NOTE:  Starts at pointer location, moves in decrement direction.


::localization::ReadDecrementScaleChecksForNull

    Template Parameters:
        typename Elemental

    Type:
        Scalar< const Locational< const Elemental >, Locational< const Elemental >, const Elemental >

    Description:
    
        Elemental:  
            Type of the elements in the pointer local space.
        
        Decrement scale trajection from a pointer location function reference 
        table.  Throws null pointers before any operators are applied.  Returns 
        references to constant elements.  
        NOTE:  Starts at pointer location, moves in decrement direction.

::localization::WriteDecrementScale

    Template Parameters:
        typename Elemental

    Type:
        Scalar< const Locational< const Elemental >, Locational< const Elemental >, const Elemental >

    Description:
    
        Elemental:  
            Type of the elements in the pointer local space.
        
        Decrement scale trajection from a pointer location function reference 
        table.  Returns references to modifiable elements.


::localization::WriteDecrementScaleChecksForNull

    Template Parameters:
        typename Elemental

    Type:
        Scalar< const Locational< const Elemental >, Locational< const Elemental >, const Elemental >

    Description:
    
        Elemental:  
            Type of the elements in the pointer local space.
        
        Decrement scale trajection from a pointer location function reference 
        table.  Throws null pointers before any operators are applied.  Returns 
        references to modifiable elements.


::localization::ReadLiner

    Template Parameters:
        typename Elemental

    Type:
        Lineal< const Locational< const Elemental >, Locational< const Elemental >, const Elemental >

    Description:
    
        Elemental:  
            Type of the elements in the pointer local space.
        
        Increment and decrement trajection from a pointer location function
        reference table.  Returns references to elements as constants.


::localization::ReadLinerChecksForNull

    Template Parameters:
        typename Elemental

    Type:
        Lineal< const Locational< const Elemental >, Locational< const Elemental >, const Elemental >

    Description:
    
        Elemental:  
            Type of the elements in the pointer local space.
        
        Increment and decrement trajection from a pointer location function
        reference table.  Throws null pointers before applying any operators.  
        Returns references to elements as constants.


::localization::WriteLiner

    Template Parameters:
        typename Elemental

    Type:
        Lineal< const Locational< const Elemental >, Locational< const Elemental >, const Elemental >

    Description:
    
        Elemental:  
            Type of the elements in the pointer local space.
        
        Increment and decrement trajection from a pointer location function
        reference table.  Returns references to modifiable elements.


::localization::WriteLinerChecksForNull

    Template Parameters:
        typename Elemental

    Type:
        Lineal< const Locational< const Elemental >, Locational< const Elemental >, const Elemental >

    Description:
    
        Elemental:  
            Type of the elements in the pointer local space.
        
        Increment and decrement trajection from a pointer location function
        reference table.  Throws null pointers before any applied operators.
        Returns references to modifiable elements.


--------------------------------------------------------------------------------


                                  Segmentation


                                    NAMESPACE


::segmentation

    Pointer based segment trajection type, function and variable templates.  
    These templates are used to traverse elements of a segment forward relative 
    to a pointer.  The number of elements must be known at compile time in order 
    to use a pointer as the basis of a segment.

                                
                               FUNCTION TEMPLATES


::segmentation::ContainsIndex

    Template Parameters:
        typename Indexical
        Indexical Length
        typename Elemental

    Return Type:
        bool

    Parameters:
        Referential< const Locational< Elemental > >
            locality
        Referential< const Indexical >
            index

    Description:
    
        Elemental:  
            Type of the elements in the pointer segment space.
        
        Given a reference to a constant segment location and a reference to a
        constant index, returns true if index is within the segment.  Implements 
        the "contains" member for segment location based vectorial trajection.


::segmentation::ContainsIndexChecksForNull

    Template Parameters:
        typename Indexical
        Indexical Length
        typename Elemental

    Return Type:
        bool

    Parameters:
        Referential< const Locational< Elemental > >
            locality
        Referential< const Indexical >
            index

    Description:
    
        Indexical:  
            Type of the segment length indicator.
        Length:  
            Length of the segment.
        Elemental:  
            Type of the elements in the pointer segment space.
        
        Given a reference to a constant segment location and a reference to a
        constant index, throws location if it is null.  Returns true if index is
        within the segment.  Implements the "contains" member for segment 
        location based vectorial trajection.


::segmentation::IndexicalGo

    Template Parameters:
        typename Indexical
        typename Elemental

    Return Type:
        Conferential< Elemental >

    Parameters:
        Referential< const Locational< Elemental > >
            locality
        Referential< const Indexical >
            index

    Description:
    
        Indexical:  
            Type of the segment length indicator.
        Elemental:  
            Type of the elements in the pointer segment space.
        
        Given a reference to a constant segment location and a reference to a 
        constant index, returns the elemental subspace located at index.  
        Implements the "go" member for segment location based vectorial 
        trajection.
        

::segmentation::IndexicalGoSafely

    Template Parameters:
        typename Indexical
        typename Elemental

    Return Type:
        Conferential< Elemental >

    Parameters:
        Referential< const Locational< Elemental > >
            locality
        Referential< const Indexical >
            index

    Description:
    
        Indexical:  
            Type of the segment length indicator.
        Elemental:  
            Type of the elements in the pointer segment space.
        
        Given a reference to a constant segment location and a reference to a 
        constant index, throws location if it is null.  Throws index if it is
        out of bounds.  Returns the elemental subspace located at index.  
        Implements the "go" member for segment location based vectorial 
        trajection.
        

::segmentation::ContainsPosition

    Template Parameters:
        typename Indexical
        Indexical Length
        typename Elemental

    Return Type:
        bool

    Parameters:
        Referential< const Locational< Elemental > >
            locality
        Referential< const Locational< Elemental > >
            position

    Description:
    
        Indexical:  
            Type of the segment length indicator.
        Length:  
            Length of the segment.
        Elemental:  
            Type of the elements in the pointer segment space.
        
        Given a reference to a constant segment location and a reference to a 
        constant position, returns true if position is within the segment.
        Implements the "contains" member for segment location based directional
        trajection.


::segmentation::ContainsPositionChecksForNull

    Template Parameters:
        typename Indexical
        Indexical Length
        typename Elemental

    Return Type:
        bool

    Parameters:
        Referential< const Locational< Elemental > >
            locality
        Referential< const Locational< Elemental > >
            position

    Description:
    
        Indexical:  
            Type of the segment length indicator.
        Length:  
            Length of the segment.
        Elemental:  
            Type of the elements in the pointer segment space.
        
        Given a reference to a constant segment location and a reference to a 
        constant position, throws location or position if either is null.  
        Returns true if position is within the segment.  Implements the 
        "contains" member for segment location based directional trajection.


::segmentation::PositionalGoSafely

    Template Parameters:
        typename Indexical
        Indexical Length
        typename Elemental

    Return Type:
        Conferential< Elemental >

    Parameters:
        Referential< const Locational< Elemental > >
            locality
        Referential< const Locational< Elemental > >
            position

    Description:
    
        Indexical:  
            Type of the segment length indicator.
        Length:  
            Length of the segment.
        Elemental:  
            Type of the elements in the pointer segment space.
        
        Given a reference to a constant segment location and a reference to a 
        constant position, throws location if it is null.  Throws position if it
        is null or out of bounds.  Returns the elemental subspace located at 
        position.  Implements the "go" member for segment location based scalar
        trajection.


::segmentation::Begins

    Template Parameters:
        typename Indexical
        Indexical Length
        typename Elemental

    Return Type:
        bool

    Parameters:
        Referential< const Locational< Elemental > >
            locality

    Description:
    
        Indexical:  
            Type of the segment length indicator.
        Length:  
            Length of the segment.
        Elemental:  
            Type of the elements in the pointer segment space.
        
        Given a reference to a constant segment location, returns true if Length 
        is greater than 0.  Implements the "begins" member for segment location 
        based directional trajection.


::segmentation::BeginsChecksForNull

    Template Parameters:
        typename Indexical
        Indexical Length
        typename Elemental

    Return Type:
        bool

    Parameters:
        Referential< const Locational< Elemental > >
            locality

    Description:
    
        Indexical:  
            Type of the segment length indicator.
        Length:  
            Length of the segment.
        Elemental:  
            Type of the elements in the pointer segment space.
        
        Given a reference to a constant segment location, throws location if it 
        is null.  Returns true if Length is greater than 0.  Implements the 
        "begins" member for segment location based directional trajection.


::segmentation::BeginIncrementSafely

    Template Parameters:
        typename Indexical
        Indexical Length
        typename Elemental

    Return Type:
        Referential< const Locational< Elemental > >

    Parameters:
        Referential< const Locational< Elemental > >
            locality
        Referential< Locational< Elemental > >
            position

    Description:
    
        Indexical:  
            Type of the segment length indicator.
        Length:  
            Length of the segment.
        Elemental:  
            Type of the elements in the pointer segment space.
        
        Given a reference to a constant segment location and a reference to a 
        modifiable position, throws Length if it is 0 or less.  Throws location 
        if it is null.  Assigns location to position.  Returns a reference to 
        position as constant.  Implements the "begin" member for segment 
        location based scalar trajection.


::segmentation::BeginDecrement

    Template Parameters:
        typename Indexical
        Indexical Length
        typename Elemental

    Return Type:
        Referential< const Locational< Elemental > >

    Parameters:
        Referential< const Locational< Elemental > >
            locality
        Referential< Locational< Elemental > >
            position

    Description:
    
        Indexical:  
            Type of the segment length indicator.
        Length:  
            Length of the segment.
        Elemental:  
            Type of the elements in the pointer segment space.
        
        Given a reference to a constant segment location and a reference to a 
        modifiable position, assigns the last position in the segment to 
        position.  Returns a reference to position as constant. Implements the
        "begin" member for segment location based scalar trajection.


::segmentation::BeginDecrementSafely

    Template Parameters:
        typename Indexical
        Indexical Length
        typename Elemental

    Return Type:
        Referential< const Locational< Elemental > >

    Parameters:
        Referential< const Locational< Elemental > >
            locality
        Referential< Locational< Elemental > >
            position

    Description:
    
        Indexical:  
            Type of the segment length indicator.
        Length:  
            Length of the segment.
        Elemental:  
            Type of the elements in the pointer segment space.
        
        Given a reference to a constant segment location and a reference to a 
        modifiable position, throws Length if it is 0 or less.  Throws location 
        if it is null.  Assigns the last position in the segment to position.  
        Returns a reference to position as constant.  Implements the "begin"
        member for segment location based scalar trajection.


::segmentation::IncrementTraversable

    Template Parameters:
        typename Indexical
        Indexical Length
        typename Elemental

    Return Type:
        bool

    Parameters:
        Referential< const Locational< Elemental > >
            locality
        Referential< const Locational< Elemental > >
            position

    Description:
    
        Indexical:  
            Type of the segment length indicator.
        Length:  
            Length of the segment.
        Elemental:  
            Type of the elements in the pointer segment space.
        
        Given a reference to a constant segment location and a reference to a 
        constant position, returns true if position is not the last position in
        the segment.  Implements the "traversable" member for segment location 
        based directional trajection.


::segmentation::IncrementTraversableChecksForNull

    Template Parameters:
        typename Indexical
        Indexical Length
        typename Elemental

    Return Type:
        bool

    Parameters:
        Referential< const Locational< Elemental > >
            locality
        Referential< const Locational< Elemental > >
            position

    Description:
    
        Indexical:  
            Type of the segment length indicator.
        Length:  
            Length of the segment.
        Elemental:  
            Type of the elements in the pointer segment space.
        
        Given a reference to a constant segment location and a reference to a 
        constant position, throws location if it is null.  Throws position if it
        is null.  Returns true if position is not the last position in the 
        segment.  Implements the "traversable" member for segment location based
        directional trajection.


::segmentation::DecrementTraversable

    Template Parameters:
        typename Indexical
        Indexical Length
        typename Elemental

    Return Type:
        bool

    Parameters:
        Referential< const Locational< Elemental > >
            locality
        Referential< const Locational< Elemental > >
            position

    Description:
    
        Indexical:
            Type of the segment length indicator.
        Length:  
            Length of the segment.
        Elemental:  
            Type of the elements in the pointer segment space.
        
        Given a reference to a constant segment location and a reference to a 
        constant position, returns true if position is not the first position in 
        the segment.  Implements the "traversable" member for segment location 
        based directional trajection.


::segmentation::DecrementTraversableChecksForNull

    Template Parameters:
        typename Indexical
        Indexical Length
        typename Elemental

    Return Type:
        bool

    Parameters:
        Referential< const Locational< Elemental > >
            locality
        Referential< const Locational< Elemental > >
            position

    Description:
    
        Indexical:  
            Type of the segment length indicator.
        Length:  
            Length of the segment.
        Elemental:  
            Type of the elements in the pointer segment space.
        
        Given a reference to a constant segment location and a reference to a 
        constant position, throws location if it is null.  Throws position if it
        is null.  Returns true if position is not the first in the segment.  
        Implements the "traversable" member for segment location based 
        directional trajection.


::segmentation::TraverseIncrementSafely

    Template Parameters:
        typename Indexical
        Indexical Length
        typename Elemental

    Return Type:
        Referential< const Locational< Elemental > >

    Parameters:
        Referential< const Locational< Elemental > >
            locality
        Referential< Locational< Elemental > >
            position

    Description:
    
        Indexical:  
            Type of the segment length indicator.
        Length:  
            Length of the segment.
        Elemental:  
            Type of the elements in the pointer segment space.
        
        Given a reference to a constant segment location and a reference to a 
        modifiable position, throws location if it is null.  Throws position if 
        it is null or is the last position in the segment.  Assigns the next 
        increment to position and returns a reference to position as constant.
        Implements the "traverse" member for segment location based scalar 
        trajection.


::segmentation::TraverseDecrementSafely

    Template Parameters:
        typename Indexical
        Indexical Length
        typename Elemental

    Return Type:
        Referential< const Locational< Elemental > >

    Parameters:
        Referential< const Locational< Elemental > >
            locality
        Referential< Locational< Elemental > >
            position

    Description:
    
        Indexical:  
            Type of the segment length indicator.
        Length:  
            Length of the segment.
        Elemental:  
            Type of the elements in the pointer segment space.
        
        Given a reference to a constant segment location and a reference to a 
        modifiable position, throws location if it is null.  Throws position if 
        it is null or is the first position in the segment.  Assigns the next 
        decrement to position and returns a reference to position as constant.
        Implements the "traverse" member for segment location based scalar 
        trajection.


                               VARIABLE TEMPLATES


::segmentation::ReadVector

    Template Parameters:
        typename Indexical
        Indexical Length
        typename Elemental

    Type:
        Vectorial< const Locational< const Elemental >, Indexical, const Elemental >

    Description:
    
        Indexical:  
            Type of the segment length indicator.
        Length:  
            Length of the segment.
        Elemental:  
            Type of the elements in the pointer segment space.
        
        Vectorial trajection through a pointer location function reference 
        table.  Returns references to constant elements.


::segmentation::SafeReadVector

    Template Parameters:
        typename Indexical
        Indexical Length
        typename Elemental

    Type:
        Vectorial< const Locational< const Elemental >, Indexical, const Elemental >

    Description:
    
        Indexical:  
            Type of the segment length indicator.
        Length:  
            Length of the segment.
        Elemental:  
            Type of the elements in the pointer segment space.
        
        Safe vectorial trajection through a pointer location function reference 
        table.  Throws null pointers and out of bounds indices.  Returns 
        references to constant elements.  


::segmentation::WriteVector

    Template Parameters:
        typename Indexical
        Indexical Length
        typename Elemental

    Type:
        Vectorial< const Locational< Elemental >, Indexical, Elemental >

    Description:
    
        Indexical:  
            Type of the segment length indicator.
        Length:  
            Length of the segment.
        Elemental:  
            Type of the elements in the pointer segment space.
        
        Vectorial trajection through a pointer location function reference 
        table.  Returns references to modifiable elements.


::segmentation::SafeWriteVector

    Template Parameters:
        typename Indexical
        Indexical Length
        typename Elemental

    Type:
        Vectorial< const Locational< Elemental >, Indexical, Elemental >

    Description:
    
        Indexical:  
            Type of the segment length indicator.
        Length:  
            Length of the segment.
        Elemental:  
            Type of the elements in the pointer segment space.
        
        Safe vectorial trajection through a pointer location function reference 
        table.  Throws exceptions on null pointers and out of bounds indices.
        Returns references to modifiable elements.  


::segmentation::SafeReadIncrementScale

    Template Parameters:
        typename Indexical
        Indexical Length
        typename Elemental

    Type:
        Scalar< const Locational< const Elemental >, Locational< const Elemental >, const Elemental >

    Description:
    
        Indexical:  
            Type of the segment length indicator.
        Length:  
            Length of the segment.
        Elemental:  
            Type of the elements in the pointer segment space.
        
        Safe increment scale trajection from a pointer location function 
        reference table.  Throws exceptions on null pointers and out of bounds
        pointer positions. Returns references to constant elements.  


::segmentation::SafeWriteIncrementScale

    Template Parameters:
        typename Indexical
        Indexical Length
        typename Elemental

    Type:
        Scalar< const Locational< Elemental >, Locational< Elemental >, Elemental >

    Description:
    
        Indexical:  
            Type of the segment length indicator.
        Length:  
            Length of the segment.
        Elemental:  
            Type of the elements in the pointer segment space.
        
        Safe increment scale trajection from a pointer location function 
        reference table.  Throws exceptions on null pointers and out of bounds
        pointer positions. Returns references to modifiable elements.  


::segmentation::ReadDecrementScale

    Template Parameters:
        typename Indexical
        Indexical Length
        typename Elemental

    Type:
        Scalar< const Locational< const Elemental >, Locational< const Elemental >, const Elemental >

    Description:
    
        Indexical:  
            Type of the segment length indicator.
        Length:  
            Length of the segment.
        Elemental:  
            Type of the elements in the pointer segment space.
        
        Decrement scale trajection from a pointer location function reference 
        table.  Returns references to constant elements.


::segmentation::SafeReadDecrementScale

    Template Parameters:
        typename Indexical
        Indexical Length
        typename Elemental

    Type:
        Scalar< const Locational< const Elemental >, Locational< const Elemental >, const Elemental >

    Description:
    
        Indexical:  
            Type of the segment length indicator.
        Length:  
            Length of the segment.
        Elemental:  
            Type of the elements in the pointer segment space.
        
        Safe decrement scale trajection from a pointer location function 
        reference table.  Throws exceptions on null pointers and out of bounds
        pointer positions. Returns references to constant elements.  


::segmentation::WriteDecrementScale

    Template Parameters:
        typename Indexical
        Indexical Length
        typename Elemental

    Type:
        Scalar< const Locational< Elemental >, Locational< Elemental >, Elemental >

    Description:
    
        Indexical:  
            Type of the segment length indicator.
        Length:  
            Length of the segment.
        Elemental:  
            Type of the elements in the pointer segment space.
        
        Decrement scale trajection from a pointer location function reference 
        table.  Returns references to modifiable elements.


::segmentation::SafeWriteDecrementScale

    Template Parameters:
        typename Indexical
        Indexical Length
        typename Elemental

    Type:
        Scalar< const Locational< Elemental >, Locational< Elemental >, Elemental >

    Description:
    
        Indexical:  
            Type of the segment length indicator.
        Length:  
            Length of the segment.
        Elemental:  
            Type of the elements in the pointer segment space.
        
        Safe decrement scale trajection from a pointer location function 
        reference table.  Throws exceptions on null pointers and out of bounds
        pointer positions. Returns references to modifiable elements.  


::segmentation::SafeReadLiner

    Template Parameters:
        typename Indexical
        Indexical Length
        typename Elemental

    Type:
        Lineal< const Locational< const Elemental >, Locational< const Elemental >, const Elemental >

    Description:
    
        Indexical:  
            Type of the segment length indicator.
        Length:  
            Length of the segment.
        Elemental:  
            Type of the elements in the pointer segment space.
        
        Increment and decrement trajection from a pointer location function
        reference table.  Throws exceptions on null pointers and out of bounds
        pointer positions.  Returns references to constant elements.


::segmentation::SafeWriteLiner

    Template Parameters:
        typename Indexical
        Indexical Length
        typename Elemental

    Type:
        Lineal< const Locational< Elemental >, Locational< Elemental >, Elemental >

    Description:
    
        Indexical:  
            Type of the segment length indicator.
        Length:  
            Length of the segment.
        Elemental:  
            Type of the elements in the pointer segment space.
        
        Increment and decrement trajection from a pointer location function
        reference table.  Throws exceptions on null pointers and out of bounds
        pointer positions.  Returns references to modifiable elements.


::segmentation::ReadIncrementDirection

    Template Parameters:
        typename Indexical
        Indexical Length
        typename Elemental

    Type:
        Directional< const Locational< const Elemental >, Locational< const Elemental >, const Elemental >

    Description:
    
        Indexical:  
            Type of the segment length indicator.
        Length:  
            Length of the segment.
        Elemental:  
            Type of the elements in the pointer segment space.
        
        Increment direction trajection from a pointer location function 
        reference table.  Returns references to constant elements.


::segmentation::SafeReadIncrementDirection

    Template Parameters:
        typename Indexical
        Indexical Length
        typename Elemental

    Type:
        Directional< const Locational< const Elemental >, Locational< const Elemental >, const Elemental >

    Description:
    
        Indexical: 
            Type of the segment length indicator.
        Length:  
            Length of the segment.
        Elemental:  
            Type of the elements in the pointer segment space.
        
        Increment direction trajection from a pointer location function 
        reference table.  Throws exceptions on null pointers and out of bounds
        pointer positions.  Returns references to constant elements.


::segmentation::WriteIncrementDirection

    Template Parameters:
        typename Indexical
        Indexical Length
        typename Elemental

    Type:
        Directional< const Locational< Elemental >, Locational< Elemental >, Elemental >

    Description:
    
        Indexical:  
            Type of the segment length indicator.
        Length:  
            Length of the segment.
        Elemental:  
            Type of the elements in the pointer segment space.
        
        Increment direction trajection from a pointer location function 
        reference table.  Returns references to modifiable elements.


::segmentation::SafeWriteIncrementDirection

    Template Parameters:
        typename Indexical
        Indexical Length
        typename Elemental

    Type:
        Directional< const Locational< Elemental >, Locational< Elemental >, Elemental >

    Description:
    
        Indexical:  
            Type of the segment length indicator.
        Length:  
            Length of the segment.
        Elemental:  
            Type of the elements in the pointer segment space.
        
        Increment direction trajection from a pointer location function 
        reference table.  Throws exceptions on null pointers and out of bounds
        pointer positions.  Returns references to modifiable elements.


::segmentation::ReadDecrementDirection

    Template Parameters:
        typename Indexical
        Indexical Length
        typename Elemental

    Type:
        Directional< const Locational< Elemental >, Locational< Elemental >, Elemental >

    Description:
    
        Indexical:  
            Type of the segment length indicator.
        Length:  
            Length of the segment.
        Elemental:  
            Type of the elements in the pointer segment space.
        
        Decrement direction trajection from a pointer location function 
        reference table.  Returns references to constant elements.


::segmentation::SafeReadDecrementDirection

    Template Parameters:
        typename Indexical
        Indexical Length
        typename Elemental

    Type:
        Directional< const Locational< Elemental >, Locational< Elemental >, Elemental >

    Description:
    
        Indexical:  
            Type of the segment length indicator.
        Length:  
            Length of the segment.
        Elemental:  
            Type of the elements in the pointer segment space.
        
        Decrement direction trajection from a pointer location function 
        reference table.  Throws exceptions on null pointers and out of bounds
        pointer positions.  Returns references to constant elements.


::segmentation::WriteDecrementDirection

    Template Parameters:
        typename Indexical
        Indexical Length
        typename Elemental

    Type:
        Directional< const Locational< Elemental >, Locational< Elemental >, Elemental >

    Description:
    
        Indexical:  
            Type of the segment length indicator.
        Length:  
            Length of the segment.
        Elemental:  
            Type of the elements in the pointer segment space.
        
        Decrement direction trajection from a pointer location function 
        reference table.  Returns references to modifiable elements.


::segmentation::SafeWriteDecrementDirection

    Template Parameters:
        typename Indexical
        Indexical Length
        typename Elemental

    Type:
        Directional< const Locational< Elemental >, Locational< Elemental >, Elemental >

    Description:
    
        Indexical:  
            Type of the segment length indicator.
        Length:  
            Length of the segment.
        Elemental:  
            Type of the elements in the pointer segment space.
        
        Decrement direction trajection from a pointer location function 
        reference table.  Throws exceptions on null pointers and out of bounds
        pointer positions.  Returns references to modifiable elements.


::segmentation::ReadAxis

    Template Parameters:
        typename Indexical
        Indexical Length
        typename Elemental

    Type:
        Axial< const Locational< const Elemental >, Locational< const Elemental >, const Elemental >

    Description:
    
        Indexical:  
            Type of the segment length indicator.
        Length:  
            Length of the segment.
        Elemental:  
            Type of the elements in the pointer segment space.
        
        Increment and decrement directional trajection from a pointer location 
        function reference table.  Returns references to constant elements.


::segmentation::SafeReadAxis

    Template Parameters:
        typename Indexical
        Indexical Length
        typename Elemental

    Type:
        Axial< const Locational< const Elemental >, Locational< const Elemental >, const Elemental >

    Description:
    
        Indexical:  
            Type of the segment length indicator.
        Length:  
            Length of the segment.
        Elemental:  
            Type of the elements in the pointer segment space.
        
        Increment and decrement directional trajection from a pointer location 
        function reference table.  Throws exceptions on null pointers and out of
        bounds pointer positions.  Returns references to constant elements.


::segmentation::WriteAxis

    Template Parameters:
        typename Indexical
        Indexical Length
        typename Elemental

    Type:
        Axial< const Locational< Elemental >, Locational< Elemental >, Elemental >

    Description:
    
        Indexical:  
            Type of the segment length indicator.
        Length:  
            Length of the segment.
        Elemental:  
            Type of the elements in the pointer segment space.
        
        Increment and decrement directional trajection from a pointer location 
        function reference table.  Returns references to modifiable elements.


::segmentation::SafeWriteAxis

    Template Parameters:
        typename Indexical
        Indexical Length
        typename Elemental

    Type:
        Axial< const Locational< Elemental >, Locational< Elemental >, Elemental >

    Description:
    
        Indexical:  
            Type of the segment length indicator.
        Length:  
            Length of the segment.
        Elemental:  
            Type of the elements in the pointer segment space.
        
        Increment and decrement directional trajection from a pointer location 
        function reference table.  Throws exceptions on null pointers and out of
        bounds pointer positions.  Returns references to modifiable elements.


--------------------------------------------------------------------------------


                                   Ordination


                                    NAMESPACE


::ordination

    Array trajection type, function and variable templates.  These templates are 
    used to traverse elements of an array.  The indexical type is a template 
    parameter in order to prevent inclusion of an unintended standard library 
    when including the ordination.hpp file.  The std::size_t type is the 
    appropriate portable type choice for the indexical type parameter.


                                TYPE TEMPLATES


::ordination::WriteOrdinal (type alias)

    Template Parameters:
    	typename Indexical
    	Indexical Length
        typename Elemental

    Aliased Type:
        Elemental[Length]

    Description:
    
        Indexical:  
            Type of the array length indicator.
        Length:  
            Length of the array.
        Elemental:  
            Type of the elements in the array space.
        
        Ordination spatial type template.  Used to represent a modifiable 
        array space.


::ordination::ReadOrdinal (type alias)

    Template Parameters:
    	typename Indexical
    	Indexical Length
        typename Elemental

    Aliased Type:
        const Elemental[Length]

    Description:
    
        Indexical:  
            Type of the array length indicator.
        Length:  
            Length of the array.
        Elemental:  
            Type of the elements in the array space.        
        
        Ordination spatial type template.  Used to represent a constant array
        space.


::ordination::WritePositional (type alias)

    Template Parameters:
        typename Elemental

    Aliased Type:
        Locational< Elemental >

    Description:
    
        Elemental:  
            Type of the elements in the array space.
        
        Ordination positional type template.  Used to represent a position 
        in a modifiable array space.


::ordination::ReadPositional (type alias)

    Template Parameters:
        typename Elemental

    Aliased Type:
        Locational< const Elemental >

    Description:
    
        Elemental:  
            Type of the elements in the array space.
        
        Localization positional type template.  Used to represent a position 
        in a constant array space.


                               FUNCTION TEMPLATES


::ordination::ContainsIndex

    Template Parameters:
        typename Indexical
        Indexical Length
        typename Elemental

    Return Type:
        bool

    Parameters:
        Referential< const Elemental[Length] >
            array
        Referential< const Indexical >
            index

    Description:
    
        Indexical:  
            Type of the array length indicator.
        Length:  
            Length of the array.
        Elemental:  
            Type of the elements in the array space.
        
        Given a reference to a constant array and a reference to a constant 
        index, returns true if index is within the array.  Implements the 
        "contains" member for array based vectorial trajection.


::ordination::IndexicalGo

    Template Parameters:
        typename Indexical
        Indexical Length
        typename Elemental

    Return Type:
        Conferential< Elemental >

    Parameters:
        Referential< Elemental[Length] >
            array
        Referential< const Indexical >
            index

    Description:
    
        Indexical:  
            Type of the array length indicator.
        Length:  
            Length of the array.
        Elemental:  
            Type of the elements in the array space.
        
        Given a reference to an array and a reference to a constant index, 
        returns the element located at index.  Implements the "go" member for 
        segment location based vectorial trajection.
        

::ordination::IndexicalGoSafely

    Template Parameters:
        typename Indexical
        Indexical Length
        typename Elemental

    Return Type:
        Conferential< Elemental >

    Parameters:
        Referential< Elemental[Length] >
            array
        Referential< const Indexical >
            index

    Description:
    
        Indexical:  
            Type of the array length indicator.
        Length:  
            Length of the array.
        Elemental:  
            Type of the elements in the array space.
        
        Given a reference to an array and a reference to a constant index, 
        throws index if it is out of bounds.  Returns the element located at 
        index.  Implements the "go" member for array based vectorial trajection.
        

::ordination::ContainsPosition

    Template Parameters:
        typename Indexical
        Indexical Length
        typename Elemental

    Return Type:
        bool

    Parameters:
        Referential< const Elemental[Length] >
            array
        Referential< const Locational< Elemental > >
            position

    Description:
    
        Indexical:  
            Type of the array length indicator.
        Length:  
            Length of the array.
        Elemental:  
            Type of the elements in the array space.
        
        Given a reference to a constant array and a reference to a constant 
        position, returns true if position is within the array.  Implements the 
        "contains" member for array based directional trajection.


::ordination::ContainsPositionChecksForNull

    Template Parameters:
        typename Indexical
        Indexical Length
        typename Elemental

    Return Type:
        bool

    Parameters:
        Referential< const Elemental[Length] >
            array
        Referential< const Locational< Elemental > >
            position

    Description:
    
        Indexical:  
            Type of the array length indicator.
        Length:  
            Length of the array.
        Elemental:  
            Type of the elements in the array space.
        
        Given a reference to a constant array and a reference to a constant 
        position, throws position if it is null.  Returns true if position is 
        within the array.  Implements the "contains" member for array based 
        directional trajection.


::ordination::PositionalGo

    Template Parameters:
        typename Indexical
        Indexical Length
        typename Elemental

    Return Type:
        Conferential< Elemental >

    Parameters:
        Referential< Elemental[Length] >
            array
        Referential< const Locational< Elemental > >
            position

    Description:
    
        Indexical:  
            Type of the array length indicator.
        Length:  
            Length of the array.
        Elemental:  
            Type of the elements in the array space.
        
        Given a reference to an array and a reference to a constant position, 
        returns the element at position.  Implements the "go" member for array 
        based scalar trajection.


::ordination::PositionalGoSafely

    Template Parameters:
        typename Indexical
        Indexical Length
        typename Elemental

    Return Type:
        Conferential< Elemental >

    Parameters:
        Referential< Elemental[Length] >
            array
        Referential< const Locational< Elemental > >
            position

    Description:
    
        Indexical:  
            Type of the array length indicator.
        Length:  
            Length of the array.
        Elemental:  
            Type of the elements in the array space.
        
        Given a reference to an array and a reference to a constant position, 
        throws position if it is null or out of bounds.  Returns the element at 
        position.  Implements the "go" member for array based scalar trajection.


::ordination::Begins

    Template Parameters:
        typename Indexical
        Indexical Length
        typename Elemental

    Return Type:
        bool

    Parameters:
        Referential< const Elemental[Length] >
            array

    Description:
    
        Indexical:  
            Type of the array length indicator.
        Length:  
            Length of the array.
        Elemental:  
            Type of the elements in the array space.
        
        Given a reference to a constant array, returns true if Length is greater
        than 0.  Implements the "begins" member for array based directional 
        trajection.


::ordination::BeginIncrement

    Template Parameters:
        typename Indexical
        Indexical Length
        typename Elemental

    Return Type:
        Referential< const Locational< Elemental > >

    Parameters:
        Referential< Elemental[Length] >
            array
        Referential< Locational< Elemental > >
            position

    Description:
    
        Indexical:  
            Type of the array length indicator.
        Length:  
            Length of the array.
        Elemental:  
            Type of the elements in the array space.
        
        Given a reference to an array and a reference to a modifiable position, 
        assigns the first position in the array to position.  Returns a 
        reference to position as constant.  Implements the "begin" member for 
        array based scalar trajection.


::ordination::BeginDecrement

    Template Parameters:
        typename Indexical
        Indexical Length
        typename Elemental

    Return Type:
        Referential< const Locational< Elemental > >

    Parameters:
        Referential< Elemental[Length] >
            array
        Referential< Locational< Elemental > >
            position

    Description:
    
        Indexical:  
            Type of the array length indicator.
        Length:  
            Length of the array.
        Elemental:  
            Type of the elements in the array space.
        
        Given a reference to an array and a reference to a modifiable position, 
        assigns the last position in the array to position.  Returns a reference
        to position as constant.  Implements the "begin" member for array based 
        scalar trajection.


::ordination::IncrementTraversable

    Template Parameters:
        typename Indexical
        Indexical Length
        typename Elemental

    Return Type:
        bool

    Parameters:
        Referential< const Elemental[Length] >
            array
        Referential< const Locational< Elemental > >
            position

    Description:
    
        Indexical:  
            Type of the array length indicator.
        Length:  
            Length of the array.
        Elemental:  
            Type of the elements in the array space.
        
        Given a reference to a constant array and a reference to a constant 
        position, returns true if position comes before the last position in the 
        array.  Implements the "traversable" member for array based directional 
        trajection.


::ordination::IncrementTraversableChecksForNull

    Template Parameters:
        typename Indexical
        Indexical Length
        typename Elemental

    Return Type:
        bool

    Parameters:
        Referential< const Elemental[Length] >
            array
        Referential< const Locational< Elemental > >
            position

    Description:
    
        Indexical:  
            Type of the array length indicator.
        Length:  
            Length of the array.
        Elemental:  
            Type of the elements in the array space.
        
        Given a reference to a constant array and a reference to a constant 
        position, throws position if it is null. Returns true if position is not 
        the last position in the segment.  Implements the "traversable" member 
        for array based directional trajection.


::ordination::DecrementTraversable

    Template Parameters:
        typename Indexical
        Indexical Length
        typename Elemental

    Return Type:
        bool

    Parameters:
        Referential< const Elemental[Length] >
            array
        Referential< const Locational< Elemental > >
            position

    Description:
    
        Indexical:  
            Type of the array length indicator.
        Length:  
            Length of the array.
        Elemental:  
            Type of the elements in the array space.
        
        Given a reference to a constant array and a reference to a constant 
        position, returns true if position comes after the first position in the 
        array.  Implements the "traversable" member for array based directional 
        trajection.


::ordination::DecrementTraversableChecksForNull

    Template Parameters:
        typename Indexical
        Indexical Length
        typename Elemental

    Return Type:
        bool

    Parameters:
        Referential< const Elemental[Length] >
            array
        Referential< const Locational< Elemental > >
            position

    Description:
    
        Indexical:  
            Type of the array length indicator.
        Length:  
            Length of the array.
        Elemental:  
            Type of the elements in the array space.
        
        Given a reference to a constant array and a reference to a constant 
        position, throws position if it is null.  Returns true if position comes 
        after the first position in the array.  Implements the "traversable" 
        member for array based  directional trajection.


::ordination::TraverseIncrement

    Template Parameters:
        typename Indexical
        Indexical Length
        typename Elemental

    Return Type:
        Referential< const Locational< Elemental > >

    Parameters:
        Referential< Elemental[Length] >
            array
        Referential< Locational< Elemental > >
            position

    Description:
    
        Indexical:  
            Type of the array length indicator.
        Length:  
            Length of the array.
        Elemental: 
            Type of the elements in the array space.
        
        Given a reference to an array and a reference to a modifiable position, 
        assigns the next increment to position.  Returns a reference to position 
        as constant.  Implements the "traverse" member for array based scalar 
        trajection.


::ordination::TraverseIncrementSafely

    Template Parameters:
        typename Indexical
        Indexical Length
        typename Elemental

    Return Type:
        Referential< const Locational< Elemental > >

    Parameters:
        Referential< Elemental[Length] >
            array
        Referential< Locational< Elemental > >
            position

    Description:
    
        Indexical:  
            Type of the array length indicator.
        Length:  
            Length of the array.
        Elemental:  
            Type of the elements in the array space.
        
        Given a reference to an array and a reference to a modifiable position, 
        throws position if it is null, out of bounds or is the last position in
        the array.  Assigns the next increment to position.  Returns a reference 
        to position as constant.  Implements the "traverse" member for array 
        based scalar trajection.


::ordination::TraverseDecrement

    Template Parameters:
        typename Indexical
        Indexical Length
        typename Elemental

    Return Type:
        Referential< const Locational< Elemental > >

    Parameters:
        Referential< Elemental[Length] >
            array
        Referential< Locational< Elemental > >
            position

    Description:
    
        Indexical:  
            Type of the array length indicator.
        Length:  
            Length of the array.
        Elemental:  
            Type of the elements in the array space.
        
        Given a reference to an array and a reference to a modifiable position, 
        assigns the next decrement to position.  Returns a reference to position 
        as constant.  Implements the "traverse" member for array based scalar 
        trajection.


::ordination::TraverseDecrementSafely

    Template Parameters:
        typename Indexical
        Indexical Length
        typename Elemental

    Return Type:
        Referential< const Locational< Elemental > >

    Parameters:
        Referential< Elemental[Length] >
            array
        Referential< Locational< Elemental > >
            position

    Description:
    
        Indexical:  
            Type of the array length indicator.
        Length:  
            Length of the array.
        Elemental:  
            Type of the elements in the array space.
        
        Given a reference to an array and a reference to a modifiable position, 
        throws position if it is null, throws position if it is null, out of 
        bounds or is the first position in the array.  Assigns the next 
        decrement to position.  Returns a reference to position as constant.  
        Implements the "traverse" member for array based scalar trajection.


                               VARIABLE TEMPLATES


::ordination::ReadVector

    Template Parameters:
        typename Indexical
        Indexical Length
        typename Elemental

    Type:
        Vectorial< const Elemental[Length], Indexical, const Elemental >

    Description:
    
        Indexical:  
            Type of the array length indicator.
        Length:
            Length of the array.
        Elemental:  
            Type of the elements in the array space.
        
        Vectorial trajection through an array function reference table.  Returns 
        references to constant elements.


::ordination::SafeReadVector

    Template Parameters:
        typename Indexical
        Indexical Length
        typename Elemental

    Type:
        Vectorial< const Elemental[Length], Indexical, const Elemental >

    Description:
    
        Indexical:  
            Type of the array length indicator.
        Length:  
            Length of the array.
        Elemental:  
            Type of the elements in the array space.
        
        Safe vectorial trajection through an array function reference table.  
        Throws out of bounds indices.  Returns references to constant elements.  


::ordination::WriteVector

    Template Parameters:
        typename Indexical
        Indexical Length
        typename Elemental

    Type:
        Vectorial< Elemental[Length], Indexical, Elemental >

    Description:
    
        Indexical:  
            Type of the array length indicator.
        Length:  
            Length of the array.
        Elemental:  
            Type of the elements in the array space.
        
        Vectorial trajection through an array function reference table.  Returns 
        references to modifiable elements.


::ordination::SafeWriteVector

    Template Parameters:
        typename Indexical
        Indexical Length
        typename Elemental

    Type:
        Vectorial< Elemental[Length], Indexical, Elemental >

    Description:
    
        Indexical:  
            Type of the array length indicator.
        Length:  
            Length of the array.
        Elemental:  
            Type of the elements in the array space.
        
        Safe vectorial trajection through an array function reference table.  
        Throws out of bounds indices. Returns references to modifiable elements.  


::ordination::ReadIncrementScale

    Template Parameters:
        typename Indexical
        Indexical Length
        typename Elemental

    Type:
        Scalar< const Elemental[Length], Locational< const Elemental >, const Elemental >

    Description:
    
        Indexical:  
            Type of the array length indicator.
        Length:  
            Length of the array.
        Elemental:  
            Type of the elements in the array space.
        
        Increment scale trajection through an array function reference table.  
        Returns references to constant elements.  


::ordination::SafeReadIncrementScale

    Template Parameters:
        typename Indexical
        Indexical Length
        typename Elemental

    Type:
        Scalar< const Elemental[Length], Locational< const Elemental >, const Elemental >

    Description:
    
        Indexical:  
            Type of the array length indicator.
        Length:  
            Length of the array.
        Elemental:  
            Type of the elements in the array space.
        
        Safe increment scale trajection through an array function reference 
        table.  Throws exceptions on null pointers and out of bounds
        pointer positions.  Returns references to constant elements.  


::ordination::WriteIncrementScale

    Template Parameters:
        typename Indexical
        Indexical Length
        typename Elemental

    Type:
        Scalar< Elemental[Length], Locational< Elemental >, Elemental >

    Description:
    
        Indexical:  
            Type of the array length indicator.
        Length:  
            Length of the array.
        Elemental:  
            Type of the elements in the array space.
        
        Increment scale trajection through an array function reference table.  
        Returns references to modifiable elements.  


::ordination::SafeWriteIncrementScale

    Template Parameters:
        typename Indexical
        Indexical Length
        typename Elemental

    Type:
        Scalar< Elemental[Length], Locational< Elemental >, Elemental >

    Description:
    
        Indexical:  
            Type of the array length indicator.
        Length:  
            Length of the array.
        Elemental:  
            Type of the elements in the array space.
        
        Safe increment scale trajection through an array function reference 
        table.  Throws exceptions on null pointers and out of bounds
        pointer positions.  Returns references to modifiable elements.  


::ordination::ReadDecrementScale

    Template Parameters:
        typename Indexical
        Indexical Length
        typename Elemental

    Type:
        Scalar< const Elemental[Length], Locational< const Elemental >, const Elemental >

    Description:
    
        Indexical:  
            Type of the array length indicator.
        Length:  
            Length of the array.
        Elemental:  
            Type of the elements in the array space.
        
        Decrement scale trajection through an array function reference table.  
        Returns references to constant elements.  


::ordination::SafeReadDecrementScale

    Template Parameters:
        typename Indexical
        Indexical Length
        typename Elemental

    Type:
        Scalar< const Elemental[Length], Locational< const Elemental >, const Elemental >

    Description:
    
        Indexical:  
            Type of the array length indicator.
        Length:  
            Length of the array.
        Elemental:  
            Type of the elements in the array space.
        
        Safe decrement scale trajection through an array function reference 
        table.  Throws exceptions on null pointers and out of bounds
        pointer positions.  Returns references to constant elements.  


::ordination::WriteDecrementScale

    Template Parameters:
        typename Indexical
        Indexical Length
        typename Elemental

    Type:
        Scalar< Elemental[Length], Locational< Elemental >, Elemental >

    Description:
    
        Indexical:  
            Type of the array length indicator.
        Length:  
            Length of the array.
        Elemental:  
            Type of the elements in the array space.
        
        Decrement scale trajection through an array function reference table.  
        Returns references to modifiable elements.  


::ordination::SafeWriteDecrementScale

    Template Parameters:
        typename Indexical
        Indexical Length
        typename Elemental

    Type:
        Scalar< Elemental[Length], Locational< Elemental >, Elemental >

    Description:
    
        Indexical:  
            Type of the array length indicator.
        Length:  
            Length of the array.
        Elemental:  
            Type of the elements in the array space.
        
        Safe decrement scale trajection through an array function reference 
        table.  Throws exceptions on null pointers and out of bounds
        pointer positions.  Returns references to modifiable elements.  


::ordination::ReadLiner

    Template Parameters:
        typename Indexical
        Indexical Length
        typename Elemental

    Type:
        Lineal< const Elemental[Length] >, Locational< const Elemental >, const Elemental >

    Description:
    
        Indexical:  
            Type of the array length indicator.
        Length:  
            Length of the array.
        Elemental:  
            Type of the elements in the array space.
        
        Increment and decrement trajection through an array function reference 
        table.  Returns references to constant elements.


::ordination::SafeReadLiner

    Template Parameters:
        typename Indexical
        Indexical Length
        typename Elemental

    Type:
        Lineal< const Elemental[Length] >, Locational< const Elemental >, const Elemental >

    Description:
    
        Indexical:  
            Type of the array length indicator.
        Length:  
            Length of the array.
        Elemental:  
            Type of the elements in the array space.
        
        Increment and decrement trajection through an array function reference 
        table.  Throws exceptions on null pointers and out of bounds pointer 
        positions.  Returns references to constant elements.


::ordination::WriteLiner

    Template Parameters:
        typename Indexical
        Indexical Length
        typename Elemental

    Type:
        Lineal< Elemental[Length] >, Locational< Elemental >, Elemental >

    Description:
    
        Indexical:  
            Type of the array length indicator.
        Length:  
            Length of the array.
        Elemental:  
            Type of the elements in the array space.
        
        Increment and decrement trajection through an array function reference 
        table.  Returns references to modifiable elements.


::ordination::SafeWriteLiner

    Template Parameters:
        typename Indexical
        Indexical Length
        typename Elemental

    Type:
        Lineal< Elemental[Length] >, Locational< Elemental >, Elemental >

    Description:
    
        Indexical:  
            Type of the array length indicator.
        Length:  
            Length of the array.
        Elemental: 
            Type of the elements in the array space.
        
        Increment and decrement trajection through an array function reference 
        table.  Throws exceptions on null pointers and out of bounds pointer 
        positions.  Returns references to modifiable elements.


::ordination::ReadIncrementDirection

    Template Parameters:
        typename Indexical
        Indexical Length
        typename Elemental

    Type:
        Directional< const Elemental[Length] >, Locational< const Elemental >, const Elemental >

    Description:
    
        Indexical:  
            Type of the array length indicator.
        Length:  
            Length of the array.
        Elemental:  
            Type of the elements in the array space.
        
        Increment direction trajection through an array function reference 
        table.  Returns references to constant elements.


::ordination::SafeReadIncrementDirection

    Template Parameters:
        typename Indexical
        Indexical Length
        typename Elemental

    Type:
        Directional< const Elemental[Length] >, Locational< const Elemental >, const Elemental >

    Description:
    
        Indexical:  
            Type of the array length indicator.
        Length:  
            Length of the array.
        Elemental:  
            Type of the elements in the array space.
        
        Increment direction trajection through an array function reference 
        table.  Throws exceptions on null pointers and out of bounds pointer 
        positions.  Returns references to constant elements.


::ordination::WriteIncrementDirection

    Template Parameters:
        typename Indexical
        Indexical Length
        typename Elemental

    Type:
        Directional< Elemental[Length] >, Locational< Elemental >, Elemental >

    Description:
    
        Indexical:  
            Type of the array length indicator.
        Length:  
            Length of the array.
        Elemental:  
            Type of the elements in the array space.
        
        Increment direction trajection through an array function reference 
        table.  Returns references to modifiable elements.


::ordination::SafeWriteIncrementDirection

    Template Parameters:
        typename Indexical
        Indexical Length
        typename Elemental

    Type:
        Directional< Elemental[Length] >, Locational< Elemental >, Elemental >

    Description:
    
        Indexical:  
            Type of the array length indicator.
        Length:  
            Length of the array.
        Elemental:  
            Type of the elements in the array space.
        
        Increment direction trajection through an array function reference 
        table.  Throws exceptions on null pointers and out of bounds pointer 
        positions.  Returns references to modifiable elements.


::ordination::ReadDecrementDirection

    Template Parameters:
        typename Indexical
        Indexical Length
        typename Elemental

    Type:
        Directional< const Elemental[Length] >, Locational< const Elemental >, const Elemental >

    Description:
    
        Indexical:  
            Type of the array length indicator.
        Length:  
            Length of the array.
        Elemental:  
            Type of the elements in the array space.
        
        Decrement direction trajection through an array function reference 
        table.  Returns references to constant elements.


::ordination::SafeReadDecrementDirection

    Template Parameters:
        typename Indexical
        Indexical Length
        typename Elemental

    Type:
        Directional< const Elemental[Length] >, Locational< const Elemental >, const Elemental >

    Description:
    
        Indexical:  
            Type of the array length indicator.
        Length:  
            Length of the array.
        Elemental:  
            Type of the elements in the array space.
        
        Decrement direction trajection through an array function reference 
        table.  Throws exceptions on null pointers and out of bounds pointer 
        positions.  Returns references to constant elements.


::ordination::WriteDecrementDirection

    Template Parameters:
        typename Indexical
        Indexical Length
        typename Elemental

    Type:
        Directional< Elemental[Length] >, Locational< Elemental >, Elemental >

    Description:
    
        Indexical:  
            Type of the array length indicator.
        Length:  
            Length of the array.
        Elemental:  
            Type of the elements in the array space.
        
        Decrement direction trajection through an array function reference 
        table.  Returns references to modifiable elements.


::ordination::SafeWriteDecrementDirection

    Template Parameters:
        typename Indexical
        Indexical Length
        typename Elemental

    Type:
        Directional< Elemental[Length] >, Locational< Elemental >, Elemental >

    Description:
    
        Indexical:  
            Type of the array length indicator.
        Length:  
            Length of the array.
        Elemental:  
            Type of the elements in the array space.
        
        Decrement direction trajection through an array function reference 
        table.  Throws exceptions on null pointers and out of bounds pointer 
        positions.  Returns references to modifiable elements.


::ordination::ReadAxis

    Template Parameters:
        typename Indexical
        Indexical Length
        typename Elemental

    Type:
        Axial< const Elemental[Length] >, Locational< const Elemental >, const Elemental >

    Description:
    
        Indexical:  
            Type of the array length indicator.
        Length:  
            Length of the array.
        Elemental:  
            Type of the elements in the array space.
        
        Increment and decrement directional trajection through an array function 
        reference table.  Returns references to constant elements.


::ordination::SafeReadAxis

    Template Parameters:
        typename Indexical
        Indexical Length
        typename Elemental

    Type:
        Axial< const Elemental[Length] >, Locational< const Elemental >, const Elemental >

    Description:
    
        Indexical:  
            Type of the array length indicator.
        Length:  
            Length of the array.
        Elemental:  
            Type of the elements in the array space.
        
        Increment and decrement directional trajection through an array function
        reference table.  Throws exceptions on null pointers and out of bounds 
        pointer positions.  Returns references to constant elements.


::ordination::WriteAxis

    Template Parameters:
        typename Indexical
        Indexical Length
        typename Elemental

    Type:
        Axial< Elemental[Length] >, Locational< Elemental >, Elemental >

    Description:
    
        Indexical:  
            Type of the array length indicator.
        Length:  
            Length of the array.
        Elemental:  
            Type of the elements in the array space.
        
        Increment and decrement directional trajection through an array function 
        reference table.  Returns references to modifiable elements.


::ordination::SafeWriteAxis

    Template Parameters:
        typename Indexical
        Indexical Length
        typename Elemental

    Type:
        Axial< Elemental[Length] >, Locational< Elemental >, Elemental >

    Description:
    
        Indexical:  
            Type of the array length indicator.
        Length:  
            Length of the array.
        Elemental:  
            Type of the elements in the array space.
        
        Increment and decrement directional trajection through an array function
        reference table.  Throws exceptions on null pointers and out of bounds 
        pointer positions.  Returns references to modifiable elements.


--------------------------------------------------------------------------------


                                    Junction


::junction

    Linked list common type, function and variable templates.  These templates 
    are used to traverse and manage elements of a doubly linked list.  The 
    positional type template exists as a single member pointer structure in 
    order to overload relational operators for linked list positions without 
    affecting the relational operators of the pointer to junctional node type.


                                 TYPE TEMPLATES


::junction::Junctional (struct)

    Template Parameters:
        typename Elemental

    Members:
        Locational< Junctional< Elemental > >
            previous
            next
        Elemental
            element
            
    Description:

        Elemental:  
            Type of the node element.
        
        previous:  
            Memory location of the previous node in the list.
        next:  
            Memory location of the next node in the list.
        element:
            Instance of the node element.

        Linked list nodal type struct template.


::junction::Junctive (struct)

    Template Parameters:
        typename Natural
        typename Elemental

    Members:
        Natural
            count
            total
        Locational< Junctional< Elemental > >
            first
            last
            unused
            
    Description:

        Natural:  
            Type of the natural integer counts.
        Elemental:  
            Type of the node element.
        
        count:  
            Number of active nodes in the list.
        total:  
            Number of total nodes, including unused nodes.
        first:  
            Memory location of the first node in the list.
        last:  
            Memory location of the last node in the list.
        unused:  
            Memory location of the first unused node in the unused list.

        Linked list container type struct template.


::junction::Adjunctive (struct)

    Template Parameters:
        typename Natural
        typename Elemental

    Members:
        Referential< Locational< Junctional< Elemental > >(
            Referential< Junctive< Natural, Elemental > >
        ) >
            allocate
        Referential< bool(
            Referential< Junctive< Natural, Elemental > >,
            Referential< Locational< Junctional< Elemental > > >
        ) >
            deallocate
        Referential< Locational< Junctional< Elemental > >(
            Referential< Junctive< Natural, Elemental > >,
            Referential< const Elemental >
        ) >
            proclaim
            
    Description:

        Natural:  
            Type of the natural integer counts.
        Elemental:  
            Type of the node element.
        
        allocate:  
            Allocate a new node.  If successful, increment the list's total but 
            do not link the new node into the list.  Return the location of the
            new node or null if unsupported by the allocation scheme.
        deallocate:  
            Deallocate the node at the provided location.  If successful, 
            decrement the list's total.  Return true if the node should be 
            considered successfully deleted, return false if the deallocation 
            was not successful and deallocation for the linked list should be 
            postponed.
        proclaim:  
            Assign a node which will be subsequently inserted into the list by 
            the calling function, with the provided elemental reference to 
            constant value.  If successful, return the location of the selected 
            node, which should not be linked into the list or null if allocation 
            is not successful at this time.  When making use of the Reclaim 
            function template, do not increment the list total.  If making 
            internal use of the same function as the "allocate" member, do not 
            increment the total twice.  If allocating the node using some 
            function other than the same function providing "allocate", do not 
            forget to increment the total.

        Linked list memory allocation management type struct template.  This
        table is used when determining how to allocate new nodes, whether to
        recycle unused nodes and how to deallocate unused nodes when requested.


::junction::Positional (type alias)

    Template Parameters:
        typename Elemental

    Aliased Type:
        Positive< Junctional< Elemental > >

    Description:
    
        Elemental:  
            Type of the node element.
        
        Linked list positional type template.  Used to represent a position 
        in the active linked list.  Do not use these to represent nodes which
        are not yet in the active linked list, including nodes in the unused 
        sublist.


                               FUNCTION TEMPLATES


::junction::operator==

    Template Parameters:
        typename Elemental

    Return Type:
        bool

    Parameters:
        Referential< const Positional< Elemental > >
            base
        Referential< const Positional< Elemental > >
            relative

    Description:
    
        Elemental:  
            Type of the node element.
        
        Given a reference to a constant base position and a reference to a 
        constant relative position, returns true if the base position is equal 
        to the relative position.


::junction::operator!=

    Template Parameters:
        typename Elemental

    Return Type:
        bool

    Parameters:
        Referential< const Positional< Elemental > >
            base
        Referential< const Positional< Elemental > >
            relative

    Description:
    
        Elemental:  
            Type of the node element.
        
        Given a reference to a constant base position and a reference to a 
        constant relative position, returns true if the base position is not 
        equal to the relative position.

::junction::operator>

    Template Parameters:
        typename Elemental

    Return Type:
        bool

    Parameters:
        Referential< const Positional< Elemental > >
            base
        Referential< const Positional< Elemental > >
            relative

    Description:
    
        Elemental:  
            Type of the node element.
        
        Given a reference to a constant base position and a reference to a 
        constant relative position, throws base or relative if either's location
        is null.  Returns true if base is found to come after relative in the 
        list.


::junction::operator<

    Template Parameters:
        typename Elemental

    Return Type:
        bool

    Parameters:
        Referential< const Positional< Elemental > >
            base
        Referential< const Positional< Elemental > >
            relative

    Description:
    
        Elemental:  
            Type of the node element.
        
        Given a reference to a constant base position and a reference to a 
        constant relative position, throws base or relative if either's location
        is null.  Returns true if base is found to come before relative in the 
        list.


::junction::operator>=

    Template Parameters:
        typename Elemental

    Return Type:
        bool

    Parameters:
        Referential< const Positional< Elemental > >
            base
        Referential< const Positional< Elemental > >
            relative

    Description:
    
        Elemental:  
            Type of the node element.
        
        Given a reference to a constant base position and a reference to a 
        constant relative position, throws base or relative if either's location 
        is null.  Returns true if base is the same as or found to come after 
        relative in the list.


::junction::operator<

    Template Parameters:
        typename Elemental

    Return Type:
        bool

    Parameters:
        Referential< const Positional< Elemental > >
            base
        Referential< const Positional< Elemental > >
            relative

    Description:
    
        Elemental:  
            Type of the node element.
        
        Given a reference to a constant base position and a reference to a 
        constant relative position, throws base or relative if either's location 
        is null.  Returns true if base is the same as or found to come before 
        relative in the list.


::junction::Initialize

    Template Parameters:
        typename Natural
        typename Elemental

    Return Type:
        Referential< Junctive< Natural, Elemental > >

    Parameters:
        Referential< Junctive< Natural, Elemental > >
            list

    Description:
    
        Natural:  
            Type of the natural integer node counts.
        Elemental:  
            Type of the node element.
        
        Given a reference to a modifiable list, assigns 0 to the list's count 
        and total.  Then assigns null to the list's first, last and unused 
        nodes.  Returns a modifiable reference to the list.


::junction::Empty

    Template Parameters:
        typename Natural
        typename Elemental

    Return Type:
        bool

    Parameters:
        Referential< Junctive< Natural, Elemental > >
            list

    Description:
    
        Natural:  
            Type of the natural integer node counts.
        Elemental:  
            Type of the node element.
        
        Given a reference to a modifiable list, if there are any nodes in the 
        list, moves them all to the unused sublist, assigns null to the first 
        and last nodes of the list, assigns 0 to the active list node count and 
        returns true.  Returns false if no nodes were located in the active 
        list.


::junction::Reclaim

    Template Parameters:
        typename Natural
        typename Elemental

    Return Type:
        Locational< Junctional< Elemental > >

    Parameters:
        Referential< Junctive< Natural, Elemental > >
            list

    Description:
    
        Natural:  
            Type of the natural integer node counts.
        Elemental:  
            Type of the node element.
        
        Given a reference to a modifiable list, if a node is found in the unused
        sublist, removes it from the unused sublist and returns it's location.  
        If no node was found in the unused sublist, returns null.


::junction::Remove

    Template Parameters:
        typename Natural
        typename Elemental
        Referential< const Adjunctive< Natural, Elemental > >
            Adjunct

    Return Type:
        bool

    Parameters:
        Referential< Junctive< Natural, Elemental > >
            list

    Description:
    
        Natural:  
            Type of the natural integer node counts.
        Elemental:  
            Type of the node element.
        Adjunct:  
            Memory management function table.
        
        Given a reference to a modifiable list, returns true if and only if 
        there are more nodes available to be removed after one node has been 
        freed.


::junction::AllocateNothing

    Template Parameters:
        typename Natural
        typename Elemental

    Return Type:
        Locational< Junctional< Elemental > >

    Parameters:
        Referential< Junctive< Natural, Elemental > >
            list

    Description:
    
        Natural:  
            Type of the natural integer node counts.
        Elemental:  
            Type of the node element.
        
        Given a reference to a modifiable list, simply returns null.  Can be 
        used when allocation is not available without initialization values.


::junction::AllocateDefault

    Template Parameters:
        typename Disclaimable
        typename Natural
        typename Elemental
        Referential< const Allocative< DefaultClaimable< Junctional< Elemental > >, Disclaimable > >
            Allocator

    Return Type:
        Locational< Junctional< Elemental > >

    Parameters:
        Referential< Junctive< Natural, Elemental > >
            list

    Description:
    
    	Disclaimable:  
    	    Prototype of deallocation function. 
        Natural:  
            Type of the natural integer node counts.
        Elemental:  
            Type of the node element.
        Allocator:  
            Allocation and deallocation function table.
        
        Given a reference to a modifiable list, allocates one node and 
        assigns the increment to the list total and returns the location of the 
        allocated node.  Returns null otherwise.  The allocated node is not yet
        part of the active or unused sublist.


::junction::DeallocateDefault

    Template Parameters:
        typename Claimable
        typename Natural
        typename Elemental
        Referential< const Allocative< Claimable, DefaultDisclaimable< Junctional< Elemental > > > >
            Allocator

    Return Type:
        bool

    Parameters:
        Referential< Junctive< Natural, Elemental > >
            list
        Referential< Locational< Junctional< Elemental > > >
            node

    Description:
    
    	Claimable:  
    	    Prototype of allocation function. 
        Natural:  
            Type of the natural integer node counts.
        Elemental:  
            Type of the node element.
        Allocator:  
            Allocation and deallocation function table.
        
        Given a reference to a modifiable list and a reference to a modifiable
        node location, if node location is not null, deallocates the node and 
        assigns the decrement to the list total and returns true.  Returns false 
        otherwise.  Does not remove the node from the active or unused sublist.


::junction::ProclaimDefault

    Template Parameters:
        typename Disclaimable
        typename Natural
        typename Elemental
        Referential< const Allocative< DefaultClaimable< Junctional< Elemental > >, Disclaimable > >
            Allocator

    Return Type:
        Locational< Junctional< Elemental > >

    Parameters:
        Referential< Junctive< Natural, Elemental > >
            list
        Referential< const Elemental >
            value

    Description:
    
    	Disclaimable:  
    	    Prototype of deallocation function. 
        Natural:  
            Type of the natural integer node counts.
        Elemental:  
            Type of the node element.
        Allocator:  
            Allocation and deallocation function table.
        
        Given a reference to a modifiable list and a reference to a constant 
        element value, reclaims or allocates a node and returns it's location.  
        Returns null if a node was unable to be reclaimed or allocated.  The 
        proclaimed node is not yet linked into the active or unused sublists.


::junction::ProclaimCopy

    Template Parameters:
        typename Disclaimable
        typename Natural
        typename Elemental
        Referential< const Allocative< DefaultClaimable< Junctional< Elemental > >, Disclaimable > >
            Allocator

    Return Type:
        Locational< Junctional< Elemental > >

    Parameters:
        Referential< Junctive< Natural, Elemental > >
            list
        Referential< const Elemental >
            value

    Description:
    
    	Disclaimable:  
    	    Prototype of deallocation function. 
        Natural:  
            Type of the natural integer node counts.
        Elemental:  
            Type of the node element.
        Allocator:  
            Allocation and deallocation function table.
        
        Given a reference to a modifiable list and a reference to a constant 
        element value, initializes a new node and returns it's location.  
        Returns null if a node was unable to be allocated.  The proclaimed node 
        is not yet linked into the active or unused sublists.


::junction::Instantiate

    Template Parameters:
        typename Natural
        typename Elemental
        Referential< const Adjunctive< Natural, Elemental > >
            Adjunct

    Return Type:
        bool

    Parameters:
        Referential< Junctive< Natural, Elemental > >
            list
        Referential< const Natural >
            count

    Description:
    
        Natural:  
            Type of the natural integer node counts.
        Elemental:  
            Type of the node element.
        Adjunct:  
            Memory management function table.
        
        Given a reference to a modifiable list and a reference a constant count,
        attempts to allocate any required nodes in order to provide count nodes 
        in the unused sublist and place them in the sublist.  Returns true if 
        count nodes are available in the sublist or false otherwise.


::junction::Contains

    Template Parameters:
        typename Natural
        typename Elemental

    Return Type:
        bool

    Parameters:
        Referential< const Junctive< Natural, Elemental > >
            list
        Referential< const Positional< Elemental > >
            position

    Description:
    
        Natural:  
            Type of the natural integer node counts.
        Elemental:  
            Type of the node element.
        
        Given a reference to a constant list and a reference to a constant 
        position, returns true if position is in the active list.


::junction::ContainsChecksForNull

    Template Parameters:
        typename Natural
        typename Elemental

    Return Type:
        bool

    Parameters:
        Referential< const Junctive< Natural, Elemental > >
            list
        Referential< const Positional< Elemental > >
            position

    Description:
    
        Natural:  
            Type of the natural integer node counts.
        Elemental:  
            Type of the node element.
        
        Given a reference to a constant list and a reference to a constant 
        position, throws position if it's location is null.  Returns true if 
        position is in the active list.


::junction::GoRead

    Template Parameters:
        typename Natural
        typename Elemental

    Return Type:
        Conferential< const Elemental >

    Parameters:
        Referential< const Junctive< Natural, Elemental > >
            list
        Referential< const Positional< Elemental > >
            position

    Description:
    
        Natural:  
            Type of the natural integer node counts.
        Elemental:  
            Type of the node element.
        
        Given a reference to a constant list and a reference to a constant 
        position, returns a conferment reference to a constant value element.


::junction::GoReadSafely

    Template Parameters:
        typename Natural
        typename Elemental

    Return Type:
        Conferential< const Elemental >

    Parameters:
        Referential< const Junctive< Natural, Elemental > >
            list
        Referential< const Positional< Elemental > >
            position

    Description:
    
        Natural:  
            Type of the natural integer node counts.
        Elemental:  
            Type of the node element.
        
        Given a reference to a constant list and a reference to a constant 
        position, throws position if it's location is null.  Returns a 
        conferment reference to a constant value element.


::junction::GoWrite

    Template Parameters:
        typename Natural
        typename Elemental

    Return Type:
        Conferential< Elemental >

    Parameters:
        Referential< Junctive< Natural, Elemental > >
            list
        Referential< const Positional< Elemental > >
            position

    Description:
    
        Natural:  
            Type of the natural integer node counts.
        Elemental:  
            Type of the node element.
        
        Given a reference to a modifiable list and a reference to a constant 
        position, returns a conferment reference to a modifiable value element.


::junction::GoWriteSafely

    Template Parameters:
        typename Natural
        typename Elemental

    Return Type:
        Conferential< Elemental >

    Parameters:
        Referential< Junctive< Natural, Elemental > >
            list
        Referential< const Positional< Elemental > >
            position

    Description:
    
        Natural:  
            Type of the natural integer node counts.
        Elemental:  
            Type of the node element.
        
        Given a reference to a modifiable list and a reference to a constant 
        position, throws position if it's location is null.  Returns a 
        conferment reference to a constant value element.


::junction::BeginReadIncrement

    Template Parameters:
        typename Natural
        typename Elemental

    Return Type:
        Referential< const Positional< Elemental > >

    Parameters:
        Referential< const Junctive< Natural, Elemental > >
            list
        Referential< Positional< Elemental > >
            position

    Description:
    
        Natural:  
            Type of the natural integer node counts.
        Elemental:  
            Type of the node element.
        
        Given a reference to a constant list and a reference to a modifiable 
        position, assigns the first position in the active list to position and 
        returns a reference to the position as constant.


::junction::BeginReadIncrementSafely

    Template Parameters:
        typename Natural
        typename Elemental

    Return Type:
        Referential< const Positional< Elemental > >

    Parameters:
        Referential< const Junctive< Natural, Elemental > >
            list
        Referential< Positional< Elemental > >
            position

    Description:
    
        Natural:  
            Type of the natural integer node counts.
        Elemental:  
            Type of the node element.
        
        Given a reference to a constant list and a reference to a modifiable
        position, throws list if the first position in the active list's
        location is null.  Returns a reference to the position as constant.


::junction::BeginWriteIncrement

    Template Parameters:
        typename Natural
        typename Elemental

    Return Type:
        Referential< const Positional< Elemental > >

    Parameters:
        Referential< Junctive< Natural, Elemental > >
            list
        Referential< Positional< Elemental > >
            position

    Description:
    
        Natural:  
            Type of the natural integer node counts.
        Elemental:  
            Type of the node element.
        
        Given a reference to a modifiable list and a reference to a modifiable
        position, assigns the first position in the active list to position and 
        returns a reference to the position as constant.


::junction::BeginWriteIncrementSafely

    Template Parameters:
        typename Natural
        typename Elemental

    Return Type:
        Referential< const Positional< Elemental > >

    Parameters:
        Referential< Junctive< Natural, Elemental > >
            list
        Referential< Positional< Elemental > >
            position

    Description:
    
        Natural:  
            Type of the natural integer node counts.
        Elemental:  
            Type of the node element.
        
        Given a reference to a modifiable list and a reference to a modifiable 
        position, throws list if the first position in the active list's 
        location is null.  Returns a reference to the position as constant.


::junction::IncrementBegins

    Template Parameters:
        typename Natural
        typename Elemental

    Return Type:
        bool

    Parameters:
        Referential< const Junctive< Natural, Elemental > >
            list

    Description:
    
        Natural:  
            Type of the natural integer node counts.
        Elemental:  
            Type of the node element.
        
        Given a reference to a constant list, returns true if the first position 
        in the active list is not null.


::junction::TraverseReadIncrement

    Template Parameters:
        typename Natural
        typename Elemental

    Return Type:
        Referential< const Positional< Elemental > >

    Parameters:
        Referential< const Junctive< Natural, Elemental > >
            list
        Referential< Positional< Elemental > >
            position

    Description:
    
        Natural:  
            Type of the natural integer node counts.
        Elemental:  
            Type of the node element.
        
        Given a reference to a constant list and a reference to a modifiable 
        position, assigns the next position in the active list to position and 
        returns a reference to the position as constant.


::junction::TraverseReadIncrementSafely

    Template Parameters:
        typename Natural
        typename Elemental

    Return Type:
        Referential< const Positional< Elemental > >

    Parameters:
        Referential< const Junctive< Natural, Elemental > >
            list
        Referential< Positional< Elemental > >
            position

    Description:
    
        Natural:  
            Type of the natural integer node counts.
        Elemental:
            Type of the node element.
        
        Given a reference to a constant list and a reference to a modifiable 
        position, throws position if it or it's next position are null.  Returns 
        a reference to the position as constant.


::junction::TraverseWriteIncrement

    Template Parameters:
        typename Natural
        typename Elemental

    Return Type:
        Referential< const Positional< Elemental > >

    Parameters:
        Referential< Junctive< Natural, Elemental > >
            list
        Referential< Positional< Elemental > >
            position

    Description:
    
        Natural:  
            Type of the natural integer node counts.
        Elemental:  
            Type of the node element.
        
        Given a reference to a modifiable list and a reference to a modifiable
        position, assigns the next position in the active list to position and 
        returns a reference to the position as constant.


::junction::TraverseWriteIncrementSafely

    Template Parameters:
        typename Natural
        typename Elemental

    Return Type:
        Referential< const Positional< Elemental > >

    Parameters:
        Referential< Junctive< Natural, Elemental > >
            list
        Referential< Positional< Elemental > >
            position

    Description:
    
        Natural:  
            Type of the natural integer node counts.
        Elemental:  
            Type of the node element.
        
        Given a reference to a modifiable list and a reference to a modifiable
        position, throws position if it or it's next position are null.  Returns 
        a reference to the position as constant.


::junction::IncrementTraversable

    Template Parameters:
        typename Natural
        typename Elemental

    Return Type:
        bool

    Parameters:
        Referential< const Junctive< Natural, Elemental > >
            list
        Referential< const Positional< Elemental > >
            position

    Description:
    
        Natural:  
            Type of the natural integer node counts.
        Elemental:  
            Type of the node element.
        
        Given a reference to a constant list and a reference to a constant
        position, returns true if the next position is not null.


::junction::IncrementTraversableChecksForNull

    Template Parameters:
        typename Natural
        typename Elemental

    Return Type:
        bool

    Parameters:
        Referential< const Junctive< Natural, Elemental > >
            list
        Referential< const Positional< Elemental > >
            position

    Description:
    
        Natural:  
            Type of the natural integer node counts.
        Elemental:  
            Type of the node element.
        
        Given a reference to a constant list and a reference to a constant 
        position, throws position if it's location is null.  Returns true if the 
        next position is not null.


::junction::BeginReadDecrement

    Template Parameters:
        typename Natural
        typename Elemental

    Return Type:
        Referential< const Positional< Elemental > >

    Parameters:
        Referential< const Junctive< Natural, Elemental > >
            list
        Referential< Positional< Elemental > >
            position

    Description:
    
        Natural:  
            Type of the natural integer node counts.
        Elemental:  
            Type of the node element.
        
        Given a reference to a constant list and a reference to a modifiable 
        position, assigns the first position in the active list to position and 
        returns a reference to the position as constant.


::junction::BeginReadDecrementSafely

    Template Parameters:
        typename Natural
        typename Elemental

    Return Type:
        Referential< const Positional< Elemental > >

    Parameters:
        Referential< const Junctive< Natural, Elemental > >
            list
        Referential< Positional< Elemental > >
            position

    Description:
    
        Natural:  
            Type of the natural integer node counts.
        Elemental:  
            Type of the node element.
        
        Given a reference to a constant and a reference to a modifiable 
        position, throws list if the first position in the active list's 
        location is null.  Returns a reference to the position as constant.


::junction::BeginWriteDecrement

    Template Parameters:
        typename Natural
        typename Elemental

    Return Type:
        Referential< const Positional< Elemental > >

    Parameters:
        Referential< Junctive< Natural, Elemental > >
            list
        Referential< Positional< Elemental > >
            position

    Description:
    
        Natural:  
            Type of the natural integer node counts.
        Elemental:  
            Type of the node element.
        
        Given a reference to a modifiable list and a reference to a modifiable
        position, assigns the first position in the active list to position and 
        returns a reference to the position as constant.


::junction::BeginWriteDecrementSafely

    Template Parameters:
        typename Natural
        typename Elemental

    Return Type:
        Referential< const Positional< Elemental > >

    Parameters:
        Referential< Junctive< Natural, Elemental > >
            list
        Referential< Positional< Elemental > >
            position

    Description:
    
        Natural:  
            Type of the natural integer node counts.
        Elemental:  
            Type of the node element.
        
        Given a reference to a modifiable list and a reference to a modifiable
        position, throws list if the first position in the active list's
        location is null.  Returns a reference to the position as constant.


::junction::DecrementBegins

    Template Parameters:
        typename Natural
        typename Elemental

    Return Type:
        bool

    Parameters:
        Referential< const Junctive< Natural, Elemental > >
            list

    Description:
    
        Natural:  
            Type of the natural integer node counts.
        Elemental:  
            Type of the node element.
        
        Given a reference to a constant list, returns true if the last position 
        in the active list is not null.


::junction::TraverseReadDecrement

    Template Parameters:
        typename Natural
        typename Elemental

    Return Type:
        Referential< const Positional< Elemental > >

    Parameters:
        Referential< const Junctive< Natural, Elemental > >
            list
        Referential< Positional< Elemental > >
            position

    Description:
    
        Natural:  
            Type of the natural integer node counts.
        Elemental:  
            Type of the node element.
        
        Given a reference to a constant list and a reference to a modifiable
        position, assigns the previous position in the active list to position. 
        Returns a reference to the position as constant.


::junction::TraverseReadDecrementSafely

    Template Parameters:
        typename Natural
        typename Elemental

    Return Type:
        Referential< const Positional< Elemental > >

    Parameters:
        Referential< const Junctive< Natural, Elemental > >
            list
        Referential< Positional< Elemental > >
            position

    Description:
    
        Natural:  
            Type of the natural integer node counts.
        Elemental:  
            Type of the node element.
        
        Given a reference to a constant list and a reference to a modifiable 
        position, throws position if it or it's previous position are null.  
        Returns a reference to the position as constant.


::junction::TraverseWriteDecrement

    Template Parameters:
        typename Natural
        typename Elemental

    Return Type:
        Referential< const Positional< Elemental > >

    Parameters:
        Referential< Junctive< Natural, Elemental > >
            list
        Referential< Positional< Elemental > >
            position

    Description:
    
        Natural:  
            Type of the natural integer node counts.
        Elemental:  
            Type of the node element.
        
        Given a reference to a modifiable list and a reference to a modifiable
        position, assigns the previous position in the active list to position 
        and returns a reference to the position as constant.


::junction::TraverseWriteDecrementSafely

    Template Parameters:
        typename Natural
        typename Elemental

    Return Type:
        Referential< const Positional< Elemental > >

    Parameters:
        Referential< Junctive< Natural, Elemental > >
            list
        Referential< Positional< Elemental > >
            position

    Description:
    
        Natural:  
            Type of the natural integer node counts.
        Elemental:  
            Type of the node element.
        
        Given a reference to a modifiable list and a reference to a modifiable 
        position, throws position if it or it's previous position are null.  
        Returns a reference to the position as constant.


::junction::DecrementTraversable

    Template Parameters:
        typename Natural
        typename Elemental

    Return Type:
        bool

    Parameters:
        Referential< const Junctive< Natural, Elemental > >
            list
        Referential< const Positional< Elemental > >
            position

    Description:
    
        Natural:  
            Type of the natural integer node counts.
        Elemental:  
            Type of the node element.
        
        Given a reference to a constant list and a reference to a constant
        position, returns true if the previous position is not null.


::junction::DecrementTraversableChecksForNull

    Template Parameters:
        typename Natural
        typename Elemental

    Return Type:
        bool

    Parameters:
        Referential< const Junctive< Natural, Elemental > >
            list
        Referential< const Positional< Elemental > >
            position

    Description:
    
        Natural:  
            Type of the natural integer node counts.
        Elemental:  
            Type of the node element.
        
        Given a reference to a constant list and a reference to a constant 
        position, throws position if it's location is null.  Returns true if the
        previous position is not null.


                               VARIABLE TEMPLATES


::junction::DefaultNewAdjunct

    Template Parameters:
        typename Natural
        typename Elemental

    Type:
        Adjunctive< Natural, Elemental >

    Description:
    
        Natural:  
            Type of the natural integer node counts.
        Elemental:  
            Type of the node element.
        
        New default constructor nodal allocation function reference table.  
        Supports the pre-allocation of nodes and reuse of unused nodes, however 
        the elemental type must support assignment from a reference to a 
        constant element.


::junction::CopyNewAdjunct

    Template Parameters:
        typename Natural
        typename Elemental

    Type:
        Adjunctive< Natural, Elemental >

    Description:
    
        Natural:  
            Type of the natural integer node counts.
        Elemental:  
            Type of the node element.
        
        New copy constructor nodal allocation function reference table.  Does 
        not support the pre-allocation of nodes, does not reuse unused nodes and 
        the elemental type need not support assignment.


::junction::ReadVector

    Template Parameters:
        typename Natural
        typename Elemental

    Type:
        Vectorial< const Junctive< Natural, Elemental >, Positional< Elemental >, const Elemental >

    Description:
    
        Natural:  
            Type of the natural integer node counts.
        Elemental:  
            Type of the node element.
        
        Vectorial trajection through a linked list function reference table.  
        Returns references to constant elements.


::junction::SafeReadVector

    Template Parameters:
        typename Natural
        typename Elemental

    Type:
        Vectorial< const Junctive< Natural, Elemental >, Positional< Elemental >, const Elemental >

    Description:
    
        Natural:  
            Type of the natural integer node counts.
        Elemental:  
            Type of the node element.
        
        Vectorial trajection through a linked list function reference table.  
        Throws exceptions on positions who's locations are null and positions 
        which are not contained in the active linked list.  Returns references 
        to constant elements.


::junction::WriteVector

    Template Parameters:
        typename Natural
        typename Elemental

    Type:
        Vectorial< Junctive< Natural, Elemental >, Positional< Elemental >, Elemental >

    Description:
    
        Natural:  
            Type of the natural integer node counts.
        Elemental:  
            Type of the node element.
        
        Vectorial trajection through a linked list function reference table.  
        Returns references to modifiable elements.


::junction::SafeWriteVector

    Template Parameters:
        typename Natural
        typename Elemental

    Type:
        Vectorial< Junctive< Natural, Elemental >, Positional< Elemental >, Elemental >

    Description:
    
        Natural:  
            Type of the natural integer node counts.
        Elemental:  
            Type of the node element.
        
        Vectorial trajection through a linked list function reference table.  
        Throws exceptions on positions who's locations are null and positions 
        which are not contained in the active linked list.  Returns references 
        to modifiable elements.


::junction::ReadIncrementScale

    Template Parameters:
        typename Natural
        typename Elemental

    Type:
        Scalar< const Junctive< Natural, Elemental >, Positional< Elemental >, const Elemental >

    Description:
    
        Natural:  
            Type of the natural integer node counts.
        Elemental:  
            Type of the node element.
        
        Scalar increment trajection through a linked list function reference 
        table.  Returns references to constant elements.


::junction::SafeReadIncrementScale

    Template Parameters:
        typename Natural
        typename Elemental

    Type:
        Scalar< const Junctive< Natural, Elemental >, Positional< Elemental >, const Elemental >

    Description:
    
        Natural:  
            Type of the natural integer node counts.
        Elemental:  
            Type of the node element.
        
        Scalar increment trajection through a linked list function reference
        table.  Throws exceptions on positions who's locations are null and 
        positions which are not contained in the active linked list.  Returns
        references to constant elements.


::junction::WriteIncrementScale

    Template Parameters:
        typename Natural
        typename Elemental

    Type:
        Scalar< Junctive< Natural, Elemental >, Positional< Elemental >, Elemental >

    Description:
    
        Natural:  
            Type of the natural integer node counts.
        Elemental:  
            Type of the node element.
        
        Scalar increment trajection through a linked list function reference 
        table.  Returns references to modifiable elements.


::junction::SafeWriteIncrementScale

    Template Parameters:
        typename Natural
        typename Elemental

    Type:
        Scalar< Junctive< Natural, Elemental >, Positional< Elemental >, Elemental >

    Description:
    
        Natural:  
            Type of the natural integer node counts.
        Elemental:  
            Type of the node element.
        
        Scalar increment trajection through a linked list function reference 
        table.  Throws exceptions on positions who's locations are null and 
        positions which are not contained in the active linked list.  Returns
        references to modifiable elements.


::junction::ReadDecrementScale

    Template Parameters:
        typename Natural
        typename Elemental

    Type:
        Scalar< const Junctive< Natural, Elemental >, Positional< Elemental >, const Elemental >

    Description:
    
        Natural:  
            Type of the natural integer node counts.
        Elemental:  
            Type of the node element.
        
        Scalar decrement trajection through a linked list function reference 
        table.  Returns references to constant elements.


::junction::SafeReadDecrementScale

    Template Parameters:
        typename Natural
        typename Elemental

    Type:
        Scalar< const Junctive< Natural, Elemental >, Positional< Elemental >, const Elemental >

    Description:
    
        Natural:  
            Type of the natural integer node counts.
        Elemental:  
            Type of the node element.
        
        Scalar decrement trajection through a linked list function reference 
        table.  Throws exceptions on positions who's locations are null and 
        positions which are not contained in the active linked list.  Returns
        references to constant elements.


::junction::WriteDecrementScale

    Template Parameters:
        typename Natural
        typename Elemental

    Type:
        Scalar< Junctive< Natural, Elemental >, Positional< Elemental >, Elemental >

    Description:
    
        Natural:  
            Type of the natural integer node counts.
        Elemental:  
            Type of the node element.
        
        Scalar decrement trajection through a linked list function reference 
        table.  Returns references to modifiable elements.


::junction::SafeWriteDecrementScale

    Template Parameters:
        typename Natural
        typename Elemental

    Type:
        Scalar< Junctive< Natural, Elemental >, Positional< Elemental >, Elemental >

    Description:
    
        Natural: 
            Type of the natural integer node counts.
        Elemental:  
            Type of the node element.
        
        Scalar decrement trajection through a linked list function reference 
        table.  Throws exceptions on positions who's locations are null and 
        positions which are not contained in the active linked list.  Returns
        references to modifiable elements.


::junction::ReadLiner

    Template Parameters:
        typename Natural
        typename Elemental

    Type:
        Lineal< const Junctive< Natural, Elemental >, Positional< Elemental >, const Elemental >

    Description:
    
        Natural:  
            Type of the natural integer node counts.
        Elemental:  
            Type of the node element.
        
        Lineal trajection through a linked list function reference table.  
        Returns references to constant elements.


::junction::SafeReadLiner

    Template Parameters:
        typename Natural
        typename Elemental

    Type:
        Lineal< const Junctive< Natural, Elemental >, Positional< Elemental >, const Elemental >

    Description:
    
        Natural:  
            Type of the natural integer node counts.
        Elemental:  
            Type of the node element.
        
        Lineal trajection through a linked list function reference table.  
        Throws exceptions on positions who's locations are null and positions 
        which are not contained in the active linked list.  Returns references 
        to constant elements.


::junction::WriteLiner

    Template Parameters:
        typename Natural
        typename Elemental

    Type:
        Lineal< Junctive< Natural, Elemental >, Positional< Elemental >, Elemental >

    Description:
    
        Natural:  
            Type of the natural integer node counts.
        Elemental:  
            Type of the node element.
        
        Lineal trajection through a linked list function reference table.  
        Returns references to modifiable elements.


::junction::SafeWriteLiner

    Template Parameters:
        typename Natural
        typename Elemental

    Type:
        Lineal< Junctive< Natural, Elemental >, Positional< Elemental >, Elemental >

    Description:
    
        Natural:  
            Type of the natural integer node counts.
        Elemental:  
            Type of the node element.
        
        Lineal trajection through a linked list function reference table.  
        Throws exceptions on positions who's locations are null and positions 
        which are not contained in the active linked list.  Returns references 
        to modifiable elements.


::junction::ReadIncrementDirection

    Template Parameters:
        typename Natural
        typename Elemental

    Type:
        Directional< const Junctive< Natural, Elemental >, Positional< Elemental >, const Elemental >

    Description:
    
        Natural:  
            Type of the natural integer node counts.
        Elemental:  
            Type of the node element.
        
        Directional increment trajection through a linked list function
        reference table.  Returns references to constant elements.


::junction::SafeReadIncrementDirection

    Template Parameters:
        typename Natural
        typename Elemental

    Type:
        Directional< const Junctive< Natural, Elemental >, Positional< Elemental >, const Elemental >

    Description:
    
        Natural:  
            Type of the natural integer node counts.
        Elemental:  
            Type of the node element.
        
        Directional increment trajection through a linked list function 
        reference table.  Throws exceptions on positions who's locations are 
        null and positions which are not contained in the active linked list.  
        Returns references to constant elements.


::junction::WriteIncrementDirection

    Template Parameters:
        typename Natural
        typename Elemental

    Type:
        Directional< Junctive< Natural, Elemental >, Positional< Elemental >, Elemental >

    Description:
    
        Natural:  
            Type of the natural integer node counts.
        Elemental:  
            Type of the node element.
        
        Directional increment trajection through a linked list function 
        reference table.  Returns references to modifiable elements.


::junction::SafeWriteIncrementDirection

    Template Parameters:
        typename Natural
        typename Elemental

    Type:
        Directional< Junctive< Natural, Elemental >, Positional< Elemental >, Elemental >

    Description:
    
        Natural:  
            Type of the natural integer node counts.
        Elemental:  
            Type of the node element.
        
        Directional increment trajection through a linked list function 
        reference table.  Throws exceptions on positions who's locations are 
        null and positions which are not contained in the active linked list.  
        Returns references to modifiable elements.


::junction::ReadDecrementDirection

    Template Parameters:
        typename Natural
        typename Elemental

    Type:
        Directional< const Junctive< Natural, Elemental >, Positional< Elemental >, const Elemental >

    Description:
    
        Natural:
            Type of the natural integer node counts.
        Elemental:  
            Type of the node element.
        
        Directional decrement trajection through a linked list function 
        reference table.  Returns references to constant elements.


::junction::SafeReadDecrementDirection

    Template Parameters:
        typename Natural
        typename Elemental

    Type:
        Directional< const Junctive< Natural, Elemental >, Positional< Elemental >, const Elemental >

    Description:
    
        Natural:  
            Type of the natural integer node counts.
        Elemental:  
            Type of the node element.
        
        Directional decrement trajection through a linked list function 
        reference table.  Throws exceptions on positions who's locations are 
        null and positions which are not contained in the active linked list.
        Returns references to constant elements.


::junction::WriteDecrementDirection

    Template Parameters:
        typename Natural
        typename Elemental

    Type:
        Directional< Junctive< Natural, Elemental >, Positional< Elemental >, Elemental >

    Description:
    
        Natural:  
            Type of the natural integer node counts.
        Elemental:  
            Type of the node element.
        
        Directional decrement trajection through a linked list function 
        reference table.  Returns references to modifiable elements.


::junction::SafeWriteDecrementDirection

    Template Parameters:
        typename Natural
        typename Elemental

    Type:
        Directional< Junctive< Natural, Elemental >, Positional< Elemental >, Elemental >

    Description:
    
        Natural:  
            Type of the natural integer node counts.
        Elemental:  
            Type of the node element.
        
        Directional decrement trajection through a linked list function 
        reference table.  Throws exceptions on positions who's locations are 
        null and positions which are not contained in the active linked list.
        Returns references to modifiable elements.


::junction::ReadAxis

    Template Parameters:
        typename Natural
        typename Elemental

    Type:
        Axial< const Junctive< Natural, Elemental >, Positional< Elemental >, const Elemental >

    Description:
    
        Natural:  
            Type of the natural integer node counts.
        Elemental:  
            Type of the node element.
        
        Axial trajection through a linked list function reference table.  
        Returns references to constant elements.


::junction::SafeReadAxis

    Template Parameters:
        typename Natural
        typename Elemental

    Type:
        Axial< const Junctive< Natural, Elemental >, Positional< Elemental >, const Elemental >

    Description:
    
        Natural:  
            Type of the natural integer node counts.
        Elemental:  
            Type of the node element.
        
        Axial trajection through a linked list function reference table.  
        Throws exceptions on positions who's locations are null and positions 
        which are not contained in the active linked list.  Returns references 
        to constant elements.


::junction::WriteAxis

    Template Parameters:
        typename Natural
        typename Elemental

    Type:
        Axial< Junctive< Natural, Elemental >, Positional< Elemental >, Elemental >

    Description:
    
        Natural:  
            Type of the natural integer node counts.
        Elemental:  
            Type of the node element.
        
        Axial trajection through a linked list function reference table.  
        Returns references to modifiable elements.


::junction::SafeWriteAxis

    Template Parameters:
        typename Natural
        typename Elemental

    Type:
        Axial< Junctive< Natural, Elemental >, Positional< Elemental >, Elemental >

    Description:
    
        Natural:  
            Type of the natural integer node counts.
        Elemental:  
            Type of the node element.
        
        Axial trajection through a linked list function reference table.  
        Throws exceptions on positions who's locations are null and positions 
        which are not contained in the active linked list.  Returns references 
        to modifiable elements.


                                    NAMESPACE


::junction::stdlib

    Linked list stdlib memory management variable templates.  These templates 
    are used to allocate nodes of a doubly linked list using stdlib memory 
    management functions.


                               VARIABLE TEMPLATES


::junction::stdlib::DefaultMallocAdjunct

    Template Parameters:
        typename Natural
        typename Elemental

    Type:
        Adjunctive< Natural, Elemental >

    Description:
    
        Natural:  
            Type of the natural integer node counts.
        Elemental:  
            Type of the node element.
        
        Malloc default nodal allocation function reference table. Supports 
        pre-allocation of nodes, reuse of unused nodes however the elemental 
        type must support assignment from a reference to a constant element.


::junction::stdlib::DefaultCallocAdjunct

    Template Parameters:
        typename Natural
        typename Elemental

    Type:
        Adjunctive< Natural, Elemental >

    Description:
    
        Natural:
            Type of the natural integer node counts.
        Elemental:  
            Type of the node element.
        
        Calloc single element default nodal allocation function reference table.
        Supports pre-allocation of nodes, reuse of unused nodes however the 
        elemental type must support assignment from a reference to a constant 
        element.  Initializes allocated memory to boolean false state for all 
        addressable bits in the allocated memory space.


                                    NAMESPACE


::junction::consecution


    Linked list sequence prototype, function and variable templates.  These 
    templates are used to provide sequence operations tables for linked lists.


                                 TYPE TEMPLATES


::junction::consecution::Consequent (prototype alias)

    Template Parameters:
        typename Natural
        typename Elemental

    Return Type:
        bool
    
    Parameter Types:
        Referential< Junctive< Natural, Elemental > >
        Referential< const Elemental >

    Description:
    
        Natural: 
            Type of the natural integer node counts.
        Elemental:  
            Type of the node element.
            
        Linked list accede and proceed function prototype template.  Facilitates 
        template parameter declarations in junction's selection and collection 
        implementations.
    

::junction::consecution::Precedent (prototype alias)

    Template Parameters:
        typename Natural
        typename Elemental

    Return Type:
        bool
    
    Parameter Types:
        Referential< Junctive< Natural, Elemental > >
        Referential< const Positional< Elemental > >
        Referential< const Elemental >

    Description:
    
        Natural:  
            Type of the natural integer node counts.
        Elemental:  
            Type of the node element.
        
        Linked list precede function prototype template.  Facilitates template
        parameter declarations in junction's selection and collection 
        implementations.
    

::junction::consecution::Concessive (prototype alias)

    Template Parameters:
        typename Natural
        typename Elemental

    Return Type:
        bool
    
    Parameter Types:
        Referential< Junctive< Natural, Elemental > >
        Referential< const Positional< Elemental > >
        Referential< const Natural >

    Description:
    
        Natural:  
            Type of the natural integer node counts.
        Elemental:  
            Type of the node element.
        
        Linked list concede function prototype template.  Facilitates template
        parameter declarations in junction's selection and collection 
        implementations.
    

::junction::consecution::ConjointlyConsequent (prototype alias)

    Template Parameters:
		typename Relative
		typename Appositional
		typename Natural
		typename Elemental

    Return Type:
        bool
    
    Parameter Types:
        Referential< Junctive< Natural, Elemental > >
        Referential< const Directional< const Relative, Appositional, const Elemental > >
        Referential< const Relative >
        Referential< const Appositional >
        Referential< const Appositional >

    Description:
    
        Relative:  
            Type of the relative space.
        Appositional:  
            Type of a position in the relative space.
        Natural:  
            Type of the natural integer node counts.
        Elemental:  
            Type of the node element.
        
        Linked list batch accede and proceed function prototype template.  
        Facilitates template parameter declarations in junction's selection and 
        collection implementations.


                               FUNCTION TEMPLATES


::junction::consecution::Sequence

    Template Parameters:
		typename Relative
		typename Appositional
		typename Natural
		typename Elemental
		Referential< const Adjunctive< Natural, Elemental > >
			Adjunct

    Return Type:
        bool
    
    Parameters:
		Referential< Junctive< Natural, Elemental > >
			list
		Referential< Locational< Junctional< Elemental > > >
			head
		Referential< Locational< Junctional< Elemental > > >
			tail
		Referential< Natural >
			length
		Referential< const Directional< const Relative, Appositional, const Elemental > >
			direction
		Referential< const Relative >
			space
		Referential< const Appositional >
			from
		Referential< const Appositional >
			to

	Description:
    
        Relative:  
            Type of the relative space.
        Appositional:  
            Type of a position in the relative space.
        Natural:  
            Type of the natural integer node counts.
        Elemental:  
            Type of the node element.
        Adjunct:  
            Memory management function table.
        
        Given a reference to a modifiable list, a reference to a modifiable
        head node location, a reference to a modifiable tail node location, a
        reference to a modifiable length, a reference to a constant direction, 
        a reference to a constant relative space, a reference to a constant
        from position in the relative space and a reference to a constant to
        position in the relative space, returns true if a complete sequence of 
        nodes were sequenced, duplicating the element values in the positional
        range of the relative space.  The resulting sequence of nodes are not 
        linked into the active list.  On success, the head and tail will not be
        null and length will be assigned a value greater than zero.


::junction::consecution::Account

    Template Parameters:
		typename Natural
		typename Elemental

    Return Type:
        Natural
    
    Parameters:
		Referential< const Junctive< Natural, Elemental > >
			list

	Description:
	
        Natural:  
            Type of the natural integer node counts.
        Elemental:  
            Type of the node element.
        
        Given a reference to a constant list, returns the number of accounted 
        elements in the active linked list.


::junction::consecution::Accede

    Template Parameters:
		typename Natural
		typename Elemental
		Referential< const Adjunctive< Natural, Elemental > >
			Adjunct

    Return Type:
        bool
    
    Parameters:
		Referential< Junctive< Natural, Elemental > >
			list
	    Referential< const Elemental >
	        value

	Description:
	
        Natural:  
            Type of the natural integer node counts.
        Elemental:  
            Type of the node element.
        Adjunct:  
            Memory management function table.
        
        Given a reference to a modifiable list and a reference to a constant
        value element, returns true if a node was successfully added to the 
        beginning of the active linked list sequence.


::junction::consecution::Accede (overload)

    Template Parameters:
        typename Relative
        typename Appositional
		typename Natural
		typename Elemental
		Referential< const Adjunctive< Natural, Elemental > >
			Adjunct

    Return Type:
        bool
    
    Parameters:
		Referential< Junctive< Natural, Elemental > >
			list
		Referential< const Directional< const Relative, Appositional, const Elemental > >
			direction
		Referential< const Relative >
			space
		Referential< const Appositional >
			from
		Referential< const Appositional >
			to

    Description:
    
        Relative:  
            Type of the relative space.
        Appositional:  
            Type of a position in the relative space.
        Natural:  
            Type of the natural integer node counts.
        Elemental:  
            Type of the node element.
        Adjunct:  
            Memory management function table.
        
        Given a reference to a modifiable list, a reference to a constant
        direction, a reference to a constant relative space, a reference to a
        constant from position in the relative space and a reference to a
        constant to position in the relative space, returns true if one or more 
        nodes were successfully added to the beginning of the active linked list
        sequence in the order read from the relative space.


::junction::consecution::Precede

    Template Parameters:
		typename Natural
		typename Elemental
		Referential< const Adjunctive< Natural, Elemental > >
			Adjunct

    Return Type:
        bool
    
    Parameters:
		Referential< Junctive< Natural, Elemental > >
			list
		Referential< const Positional< Elemental > >
			rank
	    Referential< const Elemental >
	        value

	Description:
	
        Natural:  
            Type of the natural integer node counts.
        Elemental:  
            Type of the node element.
        Adjunct:  
            Memory management function table.
        
        Given a reference to a modifiable list, a reference to a constant rank
        position and a reference to a contant value element, returns true if a 
        node was successfully inserted before the given rank position in the 
        active linked list sequence.


::junction::consecution::PrecedeSafely

    Template Parameters:
		typename Natural
		typename Elemental
		Referential< const Adjunctive< Natural, Elemental > >
			Adjunct

    Return Type:
        bool
    
    Parameters:
		Referential< Junctive< Natural, Elemental > >
			list
		Referential< const Positional< Elemental > >
			rank
	    Referential< const Elemental >
	        value

	Description:
	
        Natural:  
            Type of the natural integer node counts.
        Elemental:  
            Type of the node element.
        Adjunct:  
            Memory management function table.
        
        Given a reference to a modifiable list, a reference to a constant rank
        position and a reference to a contant value element, throws rank if it's
        location is null.  Returns true if a node was successfully inserted 
        before the given rank position in the active linked list sequence.


::junction::consecution::Precede (overload)

    Template Parameters:
        typename Relative
        typename Appositional
		typename Natural
		typename Elemental
		Referential< const Adjunctive< Natural, Elemental > >
			Adjunct

    Return Type:
        bool
    
    Parameters:
		Referential< Junctive< Natural, Elemental > >
			list
		Referential< const Positional< Elemental > >
			rank
		Referential< const Directional< const Relative, Appositional, const Elemental > >
			direction
		Referential< const Relative >
			space
		Referential< const Appositional >
			from
		Referential< const Appositional >
			to

    Description:
    
        Relative:  
            Type of the relative space.
        Appositional:  
            Type of a position in the relative space.
        Natural:  
            Type of the natural integer node counts.
        Elemental:  
            Type of the node element.
        Adjunct:  
            Memory management function table.
        
        Given a reference to a modifiable list, a reference to a constant rank
        position, a reference to a constant direction, a reference to a constant 
        relative space, a reference to a constant from position in the relative 
        space and a reference to a constant to position in the relative space, 
        returns true if one or more nodes were successfully inserted before the 
        given rank position in the active linked list sequence.


::junction::consecution::PrecedeSafely (overload)

    Template Parameters:
        typename Relative
        typename Appositional
		typename Natural
		typename Elemental
		Referential< const Adjunctive< Natural, Elemental > >
			Adjunct

    Return Type:
        bool
    
    Parameters:
		Referential< Junctive< Natural, Elemental > >
			list
		Referential< const Positional< Elemental > >
			rank
		Referential< const Directional< const Relative, Appositional, const Elemental > >
			direction
		Referential< const Relative >
			space
		Referential< const Appositional >
			from
		Referential< const Appositional >
			to

    Description:
    
        Relative:  
            Type of the relative space.
        Appositional:  
            Type of a position in the relative space.
        Natural:  
            Type of the natural integer node counts.
        Elemental:  
            Type of the node element.
        Adjunct:  
            Memory management function table.
        
        Given a reference to a modifiable list, a reference to a constant rank
        position, a reference to a constant direction, a reference to a constant 
        relative space, a reference to a constant from position in the relative 
        space and a reference to a constant to position in the relative space, 
        throws rank if it's location is null.  Returns true if one or more nodes 
        were successfully inserted before the given rank position in the active 
        linked list sequence.


::junction::consecution::Proceed

    Template Parameters:
		typename Natural
		typename Elemental
		Referential< const Adjunctive< Natural, Elemental > >
			Adjunct

    Return Type:
        bool
    
    Parameters:
		Referential< Junctive< Natural, Elemental > >
			list
	    Referential< const Elemental >
	        value

	Description:
	
        Natural:  
            Type of the natural integer node counts.
        Elemental:
            Type of the node element.
        Adjunct:  
            Memory management function table.
        
        Given a reference to a modifiable list and a reference to a constant 
        value element, returns true if a node was successfully added to the end 
        of the active linked list sequence.


::junction::consecution::Proceed (overload)

    Template Parameters:
        typename Relative
        typename Appositional
		typename Natural
		typename Elemental
		Referential< const Adjunctive< Natural, Elemental > >
			Adjunct

    Return Type:
        bool
    
    Parameters:
		Referential< Junctive< Natural, Elemental > >
			list
		Referential< const Directional< const Relative, Appositional, const Elemental > >
			direction
		Referential< const Relative >
			space
		Referential< const Appositional >
			from
		Referential< const Appositional >
			to

    Description:
    
        Relative:  
            Type of the relative space.
        Appositional:  
            Type of a position in the relative space.
        Natural:  
            Type of the natural integer node counts.
        Elemental:  
            Type of the node element.
        Adjunct:  
            Memory management function table.
        
        Given a reference to a modifiable list, a reference to a constant
        direction, a reference to a constant relative space, a reference to a
        constant from position in the relative space and a reference to a
        constant to position in the relative space, returns true if one or more 
        nodes were successfully added to the end of the active linked list 
        sequence in the order read from the relative space.


::junction::consecution::Succeed

    Template Parameters:
		typename Natural
		typename Elemental
		Referential< const Adjunctive< Natural, Elemental > >
			Adjunct

    Return Type:
        bool
    
    Parameters:
		Referential< Junctive< Natural, Elemental > >
			list
	    Referential< const Natural >
	        count

	Description:
	
        Natural:  
            Type of the natural integer node counts.
        Elemental:  
            Type of the node element.
        Adjunct:  
            Memory management function table.
        
        Given a reference to a modifiable listand a reference to a constant
        count, returns true if count nodes were successfully removed from the 
        beginning of the active linked list.  If there are less than count nodes 
        in the active list, returns false without removing any nodes from the 
        active linked list.


::junction::consecution::Concede

    Template Parameters:
		typename Natural
		typename Elemental
		Referential< const Adjunctive< Natural, Elemental > >
			Adjunct

    Return Type:
        bool
    
    Parameters:
		Referential< Junctive< Natural, Elemental > >
			list
		Referential< const Positional< Elemental > >
			rank
	    Referential< const Natural >
	        count

	Description:
	
        Natural:  
            Type of the natural integer node counts.
        Elemental:  
            Type of the node element.
        Adjunct:  
            Memory management function table.
        
        Given a reference to a modifiable list, a reference to a constant rank 
        position and a reference to a constant count, returns true if count 
        nodes were successfully removed at the given rank in the active linked 
        list.  If there are less than count nodes available from the given rank 
        to the end of the list, returns false without removing any nodes from 
        the active linked list.


::junction::consecution::ConcedeSafely

    Template Parameters:
		typename Natural
		typename Elemental
		Referential< const Adjunctive< Natural, Elemental > >
			Adjunct

    Return Type:
        bool
    
    Parameters:
		Referential< Junctive< Natural, Elemental > >
			list
		Referential< const Positional< Elemental > >
			rank
	    Referential< const Natural >
	        count

	Description:
	
        Natural:  
            Type of the natural integer node counts.
        Elemental:  
            Type of the node element.
        Adjunct: 
            Memory management function table.
        
        Given a reference to a modifiable list, a reference to a constant rank 
        position and a reference to a constant count, throws rank if it's 
        location is null.  Returns true if count nodes were successfully removed 
        at the given rank in the active linked list.  If there are less than 
        count nodes available from the given rank to the end of the list, 
        returns false without removing any nodes from the active linked list.


::junction::consecution::Recede

    Template Parameters:
		typename Natural
		typename Elemental
		Referential< const Adjunctive< Natural, Elemental > >
			Adjunct

    Return Type:
        bool
    
    Parameters:
		Referential< Junctive< Natural, Elemental > >
			list
	    Referential< const Natural >
	        count

	Description:
	
        Natural:  
            Type of the natural integer node counts.
        Elemental:  
            Type of the node element.
        Adjunct:  
            Memory management function table.
        
        Given a reference to a modifiable list and a reference to a constant
        count, returns true if count nodes were successfully removed from the 
        end of the active linked list.  If there are less than count nodes in 
        the active list, returns false without removing any nodes from the 
        active linked list.


                               VARIABLE TEMPLATES


::junction::consecution::JunctionConjoiner

    Template Parameters:
        typename Relative
        typename Appositional
        typename Natural
        typename Elemental
		Referential< const Adjunctive< Natural, Elemental > >
			Adjunct

    Type:
        Conjoint< Junctive< Natural, Elemental >, Positional< Elemental >, Relative, Appositional, Elemental >

    Description:
    
        Relative:  
            Type of the relative space.
        Appositional:  
            Type of a position in the relative space.
        Natural:  
            Type of the natural integer node counts.
        Elemental:  
            Type of the node element.
        Adjunct:  
            Memory management function table.
        
        Linked list conjoiner function reference table.  Generates versions of
        function templates suitable for reading from any spatial type which
        supports directional trajection.


::junction::consecution::SafeJunctionConjoiner

    Template Parameters:
        typename Relative
        typename Appositional
        typename Natural
        typename Elemental
		Referential< const Adjunctive< Natural, Elemental > >
			Adjunct

    Type:
        Conjoint< Junctive< Natural, Elemental >, Positional< Elemental >, Relative, Appositional, Elemental >

    Description:
    
        Relative:  
            Type of the relative space.
        Appositional:  
            Type of a position in the relative space.
        Natural:  
            Type of the natural integer node counts.
        Elemental:  
            Type of the node element.
        Adjunct:  
            Memory management function table.
        
        Linked list conjoiner function reference table.  Throws exceptions on 
        null pointer locations.  Generates versions of function templates 
        suitable for reading from any spatial type which supports directional 
        trajection.


::junction::consecution::JunctionSequencer

    Template Parameters:
        typename Relative
        typename Appositional
        typename Natural
        typename Elemental
		Referential< const Adjunctive< Natural, Elemental > >
			Adjunct

    Type:
        Sequent< Junctive< Natural, Elemental >, Positional< Elemental >, Natural, Elemental >

    Description:
    
        Relative:  
            Type of the relative space.
        Appositional:  
            Type of a position in the relative space.
        Natural:  
            Type of the natural integer node counts.
        Elemental:  
            Type of the node element.
        Adjunct:  
            Memory management function table.
        
        Linked list sequence function reference table.  Implements the generic 
        sequent interface for linked lists.


::junction::consecution::SafeJunctionSequencer

    Template Parameters:
        typename Relative
        typename Appositional
        typename Natural
        typename Elemental
		Referential< const Adjunctive< Natural, Elemental > >
			Adjunct

    Type:
        Sequent< Junctive< Natural, Elemental >, Positional< Elemental >, Natural, Elemental >

    Description:
    
        Relative:  
            Type of the relative space.
        Appositional:  
            Type of a position in the relative space.
        Natural:  
            Type of the natural integer node counts.
        Elemental:  
            Type of the node element.
        Adjunct:  
            Memory management function table.
        
        Linked list sequence function reference table.  Throws exceptions on 
        null pointer locations.  Implements the generic sequent interface for 
        linked lists.


                                    NAMESPACE


::junction::selection


    Linked list unsorted set function and variable templates.  These templates 
    are used to provide unsorted set operations for linked lists.


                               FUNCTION TEMPLATES


::junction::selection::AccreditSelection

    Template Parameters:
		typename Natural
		typename Elemental
		Referential< Assortive< Elemental > >
			Equate

    Return Type:
        bool
    
    Parameters:
		Referential< const Junctive< Natural, Elemental > >
			set
	    Referential< const Elemental >
	        value

	Description:
	
        Natural:  
            Type of the natural integer node counts.
        Elemental:  
            Type of the node element.
        Equate:  
            Function which will compare values for equality.
        
        Given a reference to a constant set and a reference to a constant value
        element, returns true if this set contains this value.
        
     
::junction::selection::ComposeSelection

    Template Parameters:
		typename Natural
		typename Elemental
		Referential< Consequent< Natural, Elemental > >
			Proceed
		Referential< Assortive< Elemental > >
			Equate

    Return Type:
        bool
    
    Parameters:
		Referential< Junctive< Natural, Elemental > >
			set
	    Referential< const Elemental >
	        value

	Description:
	
        Natural:  
            Type of the natural integer node counts.
        Elemental:  
            Type of the node element.
        Proceed:  
            Function used to add a new node.
        Equate:  
            Function which will compare values for equality.
        
        Given a reference to a modifiable set and a reference to a constant 
        value element, returns true if value was added to the set.  If the
        set already contains value, simply returns false.
        
     
::junction::selection::DiscomposeSelection

    Template Parameters:
		typename Natural
		typename Elemental
		Referential< Concessive< Natural, Elemental > >
			Concede
		Referential< Assortive< Elemental > >
			Equate

    Return Type:
        bool
    
    Parameters:
		Referential< Junctive< Natural, Elemental > >
			set
	    Referential< const Elemental >
	        value

	Description:
	
        Natural:  
            Type of the natural integer node counts.
        Elemental:  
            Type of the node element.
        Concede:  
            Function used to remove a node.
        Equate:  
            Function which will compare values for equality.
        
        Given a reference to a modifiable set and a reference to a constant
        value element, returns true if value was removed from the set.
        
     
::junction::selection::RecomposeSelection

    Template Parameters:
		typename Natural
		typename Elemental
		Referential< Consequent< Natural, Elemental > >
			Proceed
		Referential< Concessive< Natural, Elemental > >
			Concede
		Referential< Assortive< Elemental > >
			Equate

    Return Type:
        bool
    
    Parameters:
		Referential< Junctive< Natural, Elemental > >
			set
	    Referential< const Elemental >
	        original
	    Referential< const Elemental >
	        replacement

	Description:
	
        Natural:  
            Type of the natural integer node counts.
        Elemental:  
            Type of the node element.
        Proceed:  
            Function used to add a new node.
        Concede:  
            Function used to remove a node.
        Equate:  
            Function which will compare values for equality.
        
        Given a reference to a modifiable set, a reference to a constant 
        original value element and a reference to a constant replacement value
        element, returns true if original was replaced by replacement.  Returns
        false if replacement already existed in the set, without removing 
        original.
        
     
::junction::selection::DuplicateSelection

    Template Parameters:
        typename Basic
        typename BasicPositional
		typename Natural
		typename Elemental
		Referential< Consequent< Natural, Elemental > >
			Proceed

    Return Type:
        bool
    
    Parameters:
		Referential< Junctive< Natural, Elemental > >
			operand
        Referential< const Directional< const Basic, BasicPositional, const Elemental > >
            basis
        Referential< const Basic >
            base

	Description:
	
        Basic:  
            Type of the base set.
        BasicPositional:  
            Type of a position in the base set.
        Natural:  
            Type of the natural integer node counts.
        Elemental:  
            Type of the node element.
        Proceed:  
            Function used to add a new node.
        
        Given a reference to a modifiable operand set, a reference to a constant 
        directional basis and a reference to a constant base set, duplicates the
        base set and returns true if the operation completed successfully.
        
     
::junction::selection::ComplementSelections

    Template Parameters:
		typename Basic
		typename BasicPositional
		typename Relative
		typename RelativePositional
		typename Natural
		typename Elemental
		Referential< Consequent< Natural, Elemental > >
			Proceed
		Referential< Assortive< Elemental > >
			Equate

    Return Type:
        bool
    
    Parameters:
		Referential< Junctive< Natural, Elemental > >
			operand
		Referential< const Directional< const Basic, BasicPositional, const Elemental > >
			basis
		Referential< const Basic >
			base_set
		Referential< const Directional< const Relative, RelativePositional, const Elemental > >
			relativity
		Referential< const Relative >
			relative_set

	Description:
	
        Basic:  
            Type of the base set.
        BasicPositional:  
            Type of a position in the base set.
        Relative:  
            Type of the relative set.
        RelativePositional:  
            Type of a position in the relative set.
        Natural:  
            Type of the natural integer node counts.
        Elemental:  
            Type of the node element.
        Proceed:  
            Function used to add a new node.
        Equate:  
            Function which will compare values for equality.
        
        Given a reference to a modifiable set, a reference to a constant 
        directional basis, a reference to a constant base set, a reference to a
        constant directional relativity and a reference to a constant relative
        set, returns true if the relative complement of sets was successfully 
        completed and the operand set contains the result, which may be empty.  
        If it does not complete succesfully, the operand set will be empty and 
        false is returned.  
        
     
::junction::selection::DifferentiateSelections

    Template Parameters:
		typename Basic
		typename BasicPositional
		typename Relative
		typename RelativePositional
		typename Natural
		typename Elemental
		Referential< Consequent< Natural, Elemental > >
			Proceed
		Referential< Assortive< Elemental > >
			Equate

    Return Type:
        bool
    
    Parameters:
		Referential< Junctive< Natural, Elemental > >
			operand
		Referential< const Directional< const Basic, BasicPositional, const Elemental > >
			basis
		Referential< const Basic >
			base_set
		Referential< const Directional< const Relative, RelativePositional, const Elemental > >
			relativity
		Referential< const Relative >
			relative_set

	Description:
	
        Basic:  
            Type of the base set.
        BasicPositional:  
            Type of a position in the base set.
        Relative:  
            Type of the relative set.
        RelativePositional:  
            Type of a position in the relative set.
        Natural:  
            Type of the natural integer node counts.
        Elemental:  
            Type of the node element.
        Proceed:  
            Function used to add a new node.
        Equate:  
            Function which will compare values for equality.
        
        Given a reference to a modifiable set, a reference to a constant 
        directional basis, a reference to a constant base set, a reference to a
        constant directional relativity and a reference to a constant relative
        set, returns true if the symmetric difference of sets was successfully 
        completed and the operand set contains the result, which may be empty.  
        If it does not complete succesfully, the operand set will be empty and 
        false is returned.  
        
     
::junction::selection::IntersectSelections

    Template Parameters:
		typename Basic
		typename BasicPositional
		typename Relative
		typename RelativePositional
		typename Natural
		typename Elemental
		Referential< Consequent< Natural, Elemental > >
			Proceed
		Referential< Assortive< Elemental > >
			Equate

    Return Type:
        bool
    
    Parameters:
		Referential< Junctive< Natural, Elemental > >
			operand
		Referential< const Directional< const Basic, BasicPositional, const Elemental > >
			basis
		Referential< const Basic >
			base_set
		Referential< const Directional< const Relative, RelativePositional, const Elemental > >
			relativity
		Referential< const Relative >
			relative_set

	Description:
	
        Basic:  
            Type of the base set.
        BasicPositional:  
            Type of a position in the base set.
        Relative:  
            Type of the relative set.
        RelativePositional:  
            Type of a position in the relative set.
        Natural:  
            Type of the natural integer node counts.
        Elemental:  
            Type of the node element.
        Proceed:  
            Function used to add a new node.
        Equate:  
            Function which will compare values for equality.
        
        Given a reference to a modifiable set, a reference to a constant 
        directional basis, a reference to a constant base set, a reference to a
        constant directional relativity and a reference to a constant relative
        set, returns true if the intersection of sets was successfully completed 
        and the operand set contains the result, which may be empty.  If it does
        not complete succesfully, the operand set will be empty and false is 
        returned.  
        
     
::junction::selection::UniteSelections

    Template Parameters:
		typename Basic
		typename BasicPositional
		typename Relative
		typename RelativePositional
		typename Natural
		typename Elemental
		Referential< Consequent< Natural, Elemental > >
			Proceed
		Referential< Assortive< Elemental > >
			Equate

    Return Type:
        bool
    
    Parameters:
		Referential< Junctive< Natural, Elemental > >
			operand
		Referential< const Directional< const Basic, BasicPositional, const Elemental > >
			basis
		Referential< const Basic >
			base_set
		Referential< const Directional< const Relative, RelativePositional, const Elemental > >
			relativity
		Referential< const Relative >
			relative_set

	Description:
	
        Basic:  
            Type of the base set.
        BasicPositional:  
            Type of a position in the base set.
        Relative:  
            Type of the relative set.
        RelativePositional:  
            Type of a position in the relative set.
        Natural:  
            Type of the natural integer node counts.
        Elemental:  
            Type of the node element.
        Proceed:  
            Function used to add a new node.
        Equate:  
            Function which will compare values for equality.
        
        Given a reference to a modifiable set, a reference to a constant 
        directional basis, a reference to a constant base set, a reference to a
        constant directional relativity and a reference to a constant relative
        set, returns true if the union of sets was successfully completed and 
        the operand set contains the result, which may be empty.  If it does not 
        complete succesfully, the operand set will be empty and false is 
        returned.  


                               VARIABLE TEMPLATES


::junction::selection::SearchSelection

    Template Parameters:
		typename Natural
		typename Elemental
		Referential< Assortive< Elemental > >
			Equate

    Type:
        auto

	Description:
	
        Natural:  
            Type of the natural integer node counts.
        Elemental:  
            Type of the node element.
        Equate:  
            Function which will compare values for equality.
        
        Linear search function reference template.  Shortens the template 
        specifier requirements in order to make use of the SearchLinealy 
        function template in the sortation namespace.


::junction::selection::JunctionComposer

    Template Parameters:
        typename Natural
        typename Elemental
		Referential< const Adjunctive< Natural, Elemental > >
			Adjunct
	    Referential< Assortive< Elemental > >
	        Equate

    Type:
        Compositional< Junctive< Natural, Elemental >, Natural, Elemental >

    Description:
	
        Natural:  
            Type of the natural integer node counts.
        Elemental:  
            Type of the node element.
        Adjunct:  
            Memory management function table.
        Equate:  
            Function which will compare values for equality.
        
        Linked list set composition function reference table.  Implements the 
        generic compositional interface for elementary set composition.  
        Respects the semantics of the "composer" member of the "Selective" type
        template.

    
::junction::selection::SafeJunctionComposer

    Template Parameters:
        typename Natural
        typename Elemental
		Referential< const Adjunctive< Natural, Elemental > >
			Adjunct
	    Referential< Assortive< Elemental > >
	        Equate

    Type:
        Compositional< Junctive< Natural, Elemental >, Natural, Elemental >

    Description:
	
        Natural:  
            Type of the natural integer node counts.
        Elemental:  
            Type of the node element.
        Adjunct:  
            Memory management function table.
        Equate:  
            Function which will compare values for equality.
        
        Linked list set composition function reference table.  Throws exceptions 
        on null pointer locations.  Implements the generic compositional 
        interface for elementary set composition.  Respects the semantics of the 
        "composer" member of the "Selective" type template.


::junction::selection::JunctionSection

    Template Parameters:
		typename Basic
		typename BasicPositional
		typename Relative
		typename RelativePositional
		typename Natural
		typename Elemental
		Referential< const Adjunctive< Natural, Elemental > >
			Adjunct
		Referential< Assortive< Elemental > >
			Equate

    Type:
        Sectional< Junctive< Natural, Elemental >, Basic, BasicPositional, Relative, RelativePositional, Elemental >

    Description:
	
        Basic:  
            Type of the base set.
        BasicPositional:  
            Type of a position in the base set.
        Relative:  
            Type of the relative set.
        RelativePositional:  
            Type of a position in the relative set.
        Natural:  
            Type of the natural integer node counts.
        Elemental:  
            Type of the node element.
        Adjunct:  
            Memory management function table.
        Equate:  
            Function which will compare values for equality.
        
        Linked list set section function reference table.  Implements the 
        generic sectional interface for set operations.


::junction::selection::SafeJunctionSection

    Template Parameters:
		typename Basic
		typename BasicPositional
		typename Relative
		typename RelativePositional
		typename Natural
		typename Elemental
		Referential< const Adjunctive< Natural, Elemental > >
			Adjunct
		Referential< Assortive< Elemental > >
			Equate

    Type:
        Sectional< Junctive< Natural, Elemental >, Basic, BasicPositional, Relative, RelativePositional, Elemental >

    Description:
	
        Basic:  
            Type of the base set.
        BasicPositional:  
            Type of a position in the base set.
        Relative:  
            Type of the relative set.
        RelativePositional:  
            Type of a position in the relative set.
        Natural:  
            Type of the natural integer node counts.
        Elemental:  
            Type of the node element.
        Adjunct:  
            Memory management function table.
        Equate:  
            Function which will compare values for equality.
        
        Linked list set section function reference table.  Throws exceptions on
        null pointer locations.  Implements the generic sectional interface for 
        set operations.


::junction::selection::JunctionSelector

    Template Parameters:
        typename Natural
        typename Elemental
		Referential< const Adjunctive< Natural, Elemental > >
			Adjunct
	    Referential< Assortive< Elemental > >
	        Equate

    Type:
        Selective< Junctive< Natural, Elemental >, Positional< Elemental >, Natural, Elemental >

    Description:
	
        Natural:  
            Type of the natural integer node counts.
        Elemental:  
            Type of the node element.
        Adjunct:  
            Memory management function table.
        Equate:  
            Function which will compare values for equality.
        
        Linked list set selection function reference table.  Implements the 
        generic selective interface for linked list based sets.  


::junction::selection::SafeJunctionSelector

    Template Parameters:
        typename Natural
        typename Elemental
		Referential< const Adjunctive< Natural, Elemental > >
			Adjunct
	    Referential< Assortive< Elemental > >
	        Equate

    Type:
        Selective< Junctive< Natural, Elemental >, Positional< Elemental >, Natural, Elemental >

    Description:
	
        Natural:  
            Type of the natural integer node counts.
        Elemental:  
            Type of the node element.
        Adjunct:  
            Memory management function table.
        Equate:  
            Function which will compare values for equality.
        
        Linked list set selection function reference table.  Throws exceptions 
        on null pointer locations.  Implements the generic selective interface 
        for linked list based sets.  


                                    NAMESPACE


::junction::collection

    Linked list sorted set function and variable templates.  These templates 
    are used to provide sorted set operations for linked lists.


                               FUNCTION TEMPLATES


::junction::collection::AccreditCollection

    Template Parameters:
		typename Natural
		typename Elemental
		Referential< Assortive< Elemental > >
			Equate
		Referential< Assortive< Elemental > >
			Order

    Return Type:
        bool
    
    Parameters:
		Referential< const Junctive< Natural, Elemental > >
			set
	    Referential< const Elemental >
	        value

	Description:
	
        Natural:  
            Type of the natural integer node counts.
        Elemental:  
            Type of the node element.
        Equate:  
            Function which will compare values for equality.
        Order:  
            Function which will compare values for determination of order.
        
        Given a reference to a constant sorted set and a reference to a constant
        value element, returns true if this set contains value.
        
     
::junction::collection::ComposeCollection

    Template Parameters:
		typename Natural
		typename Elemental
		Referential< Precedent< Natural, Elemental > >
			Precede
		Referential< Consequent< Natural, Elemental > >
			Proceed
		Referential< Assortive< Elemental > >
			Equate
		Referential< Assortive< Elemental > >
			Order

    Return Type:
        bool
    
    Parameters:
		Referential< Junctive< Natural, Elemental > >
			set
	    Referential< const Elemental >
	        value

	Description:
	
        Natural:  
            Type of the natural integer node counts.
        Elemental:  
            Type of the node element.
        Precede:  
            Function used to insert a node.
        Proceed:  
            Function used to suffix a node.
        Equate:  
            Function which will compare values for equality.
        Order:  
            Function which will compare values for determination of order.
        
        Given a reference to a modifiable sorted set and a reference to a 
        constant value element, returns true if value was added to the set.  If 
        the set already contains value, simply returns false.
        
     
::junction::collection::DiscomposeCollection

    Template Parameters:
		typename Natural
		typename Elemental
		Referential< Concessive< Natural, Elemental > >
			Concede
		Referential< Assortive< Elemental > >
			Equate
		Referential< Assortive< Elemental > >
			Order

    Return Type:
        bool
    
    Parameters:
		Referential< Junctive< Natural, Elemental > >
			set
	    Referential< const Elemental >
	        value

	Description:
	
        Natural:  
            Type of the natural integer node counts.
        Elemental:  
            Type of the node element.
        Concede:  
            Function used to remove a node.
        Equate:  
            Function which will compare values for equality.
        Order:  
            Function which will compare values for determination of order.
        
        Given a reference to a modifiable sorted set and a reference to a 
        constant value element, returns true if value was removed from the set.
        
     
::junction::collection::RecomposeCollection

    Template Parameters:
		typename Natural
		typename Elemental
		Referential< Precedent< Natural, Elemental > >
			Precede
		Referential< Consequent< Natural, Elemental > >
			Proceed
		Referential< Concessive< Natural, Elemental > >
			Concede
		Referential< Assortive< Elemental > >
			Equate
		Referential< Assortive< Elemental > >
			Order

    Return Type:
        bool
    
    Parameters:
		Referential< Junctive< Natural, Elemental > >
			set
	    Referential< const Elemental >
	        original
	    Referential< const Elemental >
	        replacement

	Description:
	
        Natural:  
            Type of the natural integer node counts.
        Elemental:  
            Type of the node element.
        Precede:  
            Function used to insert a node.
        Proceed:  
            Function used to suffix a node.
        Concede:  
            Function used to remove a node.
        Equate:  
            Function which will compare values for equality.
        Order:  
            Function which will compare values for determination of order.
        
        Given a reference to a modifiable sorted set, a reference to a constant 
        original value element and a reference to a constant replacement value
        element, returns true if original was replaced by replacement.  Returns 
        false if the replacement value already existed in the set, without 
        removing the original value.
        
     
::junction::collection::CollateSelection

    Template Parameters:
        typename Basic
        typename BasicPositional
		typename Natural
		typename Elemental
		Referential< Precedent< Natural, Elemental > >
			Precede
		Referential< Consequent< Natural, Elemental > >
			Proceed
		Referential< Assortive< Elemental > >
			Equate
		Referential< Assortive< Elemental > >
			Order

    Return Type:
        bool
    
    Parameters:
		Referential< Junctive< Natural, Elemental > >
			operand
        Referential< const Directional< const Basic, BasicPositional, const Elemental > >
            basis
        Referential< const Basic >
            base

	Description:
	
        Basic:  
            Type of the base set.
        BasicPositional:  
            Type of a position in the base set.
        Natural:  
            Type of the natural integer node counts.
        Elemental:  
            Type of the node element.
        Precede:  
            Function used to insert a node.
        Proceed:  
            Function used to add a new node.
        Equate:  
            Function which will compare values for equality.
        Order:  
            Function which will compare values for determination of order.
        
        Given a reference to a modifiable sorted set, a reference to a constant 
        directional basis and a reference to a constant base set, collates the
        base set into the operand set sorting the elements as they are added 
        and returns true if the operation completed successfully.  Useful when
        duplicating a base set which is unsorted or not in the same sortation 
        order as the operand set.
        
     
::junction::collection::CollateCollection

    Template Parameters:
        typename Basic
        typename BasicPositional
		typename Natural
		typename Elemental
        Referential< ConjointlyConsequent< Basic, BasicPositional, Natural, Elemental > >
            ProceedMany

    Return Type:
        bool
    
    Parameters:
		Referential< Junctive< Natural, Elemental > >
			operand
        Referential< const Axial< const Basic, BasicPositional, const Elemental > >
            basis
        Referential< const Basic >
            base

	Description:
	
        Basic:
            Type of the base set.
        BasicPositional:  
            Type of a position in the base set.
        Natural:
            Type of the natural integer node counts.
        Elemental:  
            Type of the node element.
        ProceedMany:  
            Function used to suffix multiple sequential nodes.
        
        Given a reference to a modifiable sorted set, a reference to a constant 
        axial basis and a reference to a constant base set, duplicates the
        base set into the operand set and returns true if the operation 
        completed successfully.  The base set must be in the same sortation 
        order as the operand set.
        
     
::junction::collection::ComplementSelections

    Template Parameters:
		typename Basic
		typename BasicPositional
		typename Relative
		typename RelativePositional
		typename Natural
		typename Elemental
		Referential< Precedent< Natural, Elemental > >
			Precede
		Referential< Consequent< Natural, Elemental > >
			Proceed
		Referential< Assortive< Elemental > >
			Equate
		Referential< Assortive< Elemental > >
			Order

    Return Type:
        bool
    
    Parameters:
		Referential< Junctive< Natural, Elemental > >
			operand
		Referential< const Directional< const Basic, BasicPositional, const Elemental > >
			basis
		Referential< const Basic >
			base_set
		Referential< const Directional< const Relative, RelativePositional, const Elemental > >
			relativity
		Referential< const Relative >
			relative_set

	Description:
	
        Basic:  
            Type of the base set.
        BasicPositional:  
            Type of a position in the base set.
        Relative:  
            Type of the relative set.
        RelativePositional:  
            Type of a position in the relative set.
        Natural:  
            Type of the natural integer node counts.
        Elemental:  
            Type of the node element.
        Precede:  
            Function used to insert a node.
        Proceed:  
            Function used to suffix a node.
        Equate:  
            Function which will compare values for equality.
        Order:  
            Function which will compare values for determination of order.
        
        Given a reference to a modifiable sorted set, a reference to a constant
        directional basis, a reference to a constant base set, a reference to a 
        constant directional relativity and a reference to a relative set, 
        returns true if the relative complement of sets was successfully 
        completed and the operand set contains the result, which may be empty.  
        If it does not complete succesfully, the operand set will be empty and 
        false is returned.  Useful when the base and/or relative sets are not 
        sorted or not in the same sorted order as the operand set.
        
     
::junction::collection::DifferentiateSelections

    Template Parameters:
		typename Basic
		typename BasicPositional
		typename Relative
		typename RelativePositional
		typename Natural
		typename Elemental
		Referential< Precedent< Natural, Elemental > >
			Precede
		Referential< Consequent< Natural, Elemental > >
			Proceed
		Referential< Assortive< Elemental > >
			Equate
		Referential< Assortive< Elemental > >
			Order

    Return Type:
        bool
    
    Parameters:
		Referential< Junctive< Natural, Elemental > >
			operand
		Referential< const Directional< const Basic, BasicPositional, const Elemental > >
			basis
		Referential< const Basic >
			base_set
		Referential< const Directional< const Relative, RelativePositional, const Elemental > >
			relativity
		Referential< const Relative >
			relative_set

	Description:
	
        Basic:  
            Type of the base set.
        BasicPositional:  
            Type of a position in the base set.
        Relative:  
            Type of the relative set.
        RelativePositional:  
            Type of a position in the relative set.
        Natural:  
            Type of the natural integer node counts.
        Elemental:  
            Type of the node element.
        Precede:  
            Function used to insert a node.
        Proceed:  
            Function used to suffix a node.
        Equate:  
            Function which will compare values for equality.
        Order:  
            Function which will compare values for determination of order.
        
        Given a reference to a modifiable sorted set, a reference to a constant
        directional basis, a reference to a constant base set, a reference to a 
        constant directional relativity and a reference to a relative set, 
        returns true if the symmetric difference of sets was successfully 
        completed and the operand set contains the result, which may be empty.  
        If it does not complete succesfully, the operand set will be empty and 
        false is returned.  Useful when the base and/or relative sets are not 
        sorted or not in the same sorted order as the operand set.
        
     
::junction::collection::IntersectSelections

    Template Parameters:
		typename Basic
		typename BasicPositional
		typename Relative
		typename RelativePositional
		typename Natural
		typename Elemental
		Referential< Precedent< Natural, Elemental > >
			Precede
		Referential< Consequent< Natural, Elemental > >
			Proceed
		Referential< Assortive< Elemental > >
			Equate
		Referential< Assortive< Elemental > >
			Order

    Return Type:
        bool
    
    Parameters:
		Referential< Junctive< Natural, Elemental > >
			operand
		Referential< const Directional< const Basic, BasicPositional, const Elemental > >
			basis
		Referential< const Basic >
			base_set
		Referential< const Directional< const Relative, RelativePositional, const Elemental > >
			relativity
		Referential< const Relative >
			relative_set

	Description:
	
        Basic: 
            Type of the base set.
        BasicPositional:  
            Type of a position in the base set.
        Relative:  
            Type of the relative set.
        RelativePositional:  
            Type of a position in the relative set.
        Natural:  
            Type of the natural integer node counts.
        Elemental:  
            Type of the node element.
        Precede:  
            Function used to insert a node.
        Proceed:  
            Function used to suffix a node.
        Equate:  
            Function which will compare values for equality.
        Order:  
            Function which will compare values for determination of order.
        
        Given a reference to a modifiable sorted set, a reference to a constant
        directional basis, a reference to a constant base set, a reference to a 
        constant directional relativity and a reference to a relative set, 
        returns true if the intersection of sets was successfully completed and 
        the operand set contains the result, which may be empty.  If it does not 
        complete succesfully, the operand set will be empty and false is 
        returned.  Useful when the base and/or relative sets are not sorted or 
        not in the same sorted order as the operand set.
        
     
::junction::collection::UniteSelections

    Template Parameters:
		typename Basic
		typename BasicPositional
		typename Relative
		typename RelativePositional
		typename Natural
		typename Elemental
		Referential< Precedent< Natural, Elemental > >
			Precede
		Referential< Consequent< Natural, Elemental > >
			Proceed
		Referential< Assortive< Elemental > >
			Equate
		Referential< Assortive< Elemental > >
			Order

    Return Type:
        bool
    
    Parameters:
		Referential< Junctive< Natural, Elemental > >
			operand
		Referential< const Directional< const Basic, BasicPositional, const Elemental > >
			basis
		Referential< const Basic >
			base_set
		Referential< const Directional< const Relative, RelativePositional, const Elemental > >
			relativity
		Referential< const Relative >
			relative_set

	Description:
	
        Basic:  
            Type of the base set.
        BasicPositional:  
            Type of a position in the base set.
        Relative:  
            Type of the relative set.
        RelativePositional:  
            Type of a position in the relative set.
        Natural:  
            Type of the natural integer node counts.
        Elemental:  
            Type of the node element.
        Precede:  
            Function used to insert a node.
        Proceed:  
            Function used to suffix a node.
        Equate:  
            Function which will compare values for equality.
        Order:  
            Function which will compare values for determination of order.
        
        Given a reference to a modifiable sorted set, a reference to a constant
        directional basis, a reference to a constant base set, a reference to a 
        constant directional relativity and a reference to a relative set, 
        returns true if the union of sets was successfully completed and the 
        operand set contains the result, which may be empty.  If it does not 
        complete succesfully, the operand set will be empty and false is 
        returned.  Useful when the base and/or relative sets are not sorted or 
        not in the same sorted order as the operand set.


::junction::collection::ComplementCollections

    Template Parameters:
		typename Basic
		typename BasicPositional
		typename Relative
		typename RelativePositional
		typename Natural
		typename Elemental
		Referential< Consequent< Natural, Elemental > >
			ProceedOne
		Referential< ConjointlyConsequent< Relative, RelativePositional, Natural, Elemental > >
			ProceedMany
		Referential< Assortive< Elemental > >
			Equate
		Referential< Assortive< Elemental > >
			Order

    Return Type:
        bool
    
    Parameters:
		Referential< Junctive< Natural, Elemental > >
			operand
		Referential< const Axial< const Basic, BasicPositional, const Elemental > >
			basis
		Referential< const Basic >
			base_set
		Referential< const Axial< const Relative, RelativePositional, const Elemental > >
			relativity
		Referential< const Relative >
			relative_set

	Description:
	
        Basic:  
            Type of the base set.
        BasicPositional:  
            Type of a position in the base set.
        Relative:  
            Type of the relative set.
        RelativePositional:  
            Type of a position in the relative set.
        Natural:  
            Type of the natural integer node counts.
        Elemental:  
            Type of the node element.
        ProceedOne:  
            Function used to suffix a single node.
        ProceedMany:  
            Function used to suffix multiple sequential nodes.
        Equate:  
            Function which will compare values for equality.
        Order:  
            Function which will compare values for determination of order.
        
        Given a reference to a modifiable sorted set, a reference to a constant
        directional basis, a reference to a constant base set, a reference to a 
        constant directional relativity and a reference to a relative set, 
        returns true if the relative complement of sets was successfully 
        completed and the operand set contains the result, which may be empty.  
        If it does not complete succesfully, the operand set will be empty and 
        false is returned.  Useful when the base and/or relative sets are not 
        sorted or not in the same sorted order as the operand set.
        
     
::junction::collection::DifferentiateCollections

    Template Parameters:
		typename Basic
		typename BasicPositional
		typename Relative
		typename RelativePositional
		typename Natural
		typename Elemental
		Referential< Consequent< Natural, Elemental > >
			ProceedOne
		Referential< ConjointlyConsequent< Relative, RelativePositional, Natural, Elemental > >
			ProceedMany
		Referential< Assortive< Elemental > >
			Equate
		Referential< Assortive< Elemental > >
			Order

    Return Type:
        bool
    
    Parameters:
		Referential< Junctive< Natural, Elemental > >
			operand
		Referential< const Axial< const Basic, BasicPositional, const Elemental > >
			basis
		Referential< const Basic >
			base_set
		Referential< const Axial< const Relative, RelativePositional, const Elemental > >
			relativity
		Referential< const Relative >
			relative_set

	Description:
	
        Basic:  
            Type of the base set.
        BasicPositional:  
            Type of a position in the base set.
        Relative:  
            Type of the relative set.
        RelativePositional:  
            Type of a position in the relative set.
        Natural:  
            Type of the natural integer node counts.
        Elemental:  
            Type of the node element.
        ProceedOne:  
            Function used to suffix a single node.
        ProceedMany:  
            Function used to suffix multiple sequential nodes.
        Equate:  
            Function which will compare values for equality.
        Order:  
            Function which will compare values for determination of order.
        
        Given a reference to a modifiable sorted set, a reference to a constant
        directional basis, a reference to a constant base set, a reference to a 
        constant directional relativity and a reference to a relative set, 
        returns true if the symmetric difference of sets was successfully 
        completed and the operand set contains the result, which may be empty.  
        If it does not complete succesfully, the operand set will be empty and 
        false is returned.  Useful when the base and/or relative sets are not 
        sorted or not in the same sorted order as the operand set.
        
     
::junction::collection::IntersectCollections

    Template Parameters:
		typename Basic
		typename BasicPositional
		typename Relative
		typename RelativePositional
		typename Natural
		typename Elemental
		Referential< Consequent< Natural, Elemental > >
			Proceed
		Referential< Assortive< Elemental > >
			Equate
		Referential< Assortive< Elemental > >
			Order

    Return Type:
        bool
    
    Parameters:
		Referential< Junctive< Natural, Elemental > >
			operand
		Referential< const Axial< const Basic, BasicPositional, const Elemental > >
			basis
		Referential< const Basic >
			base_set
		Referential< const Axial< const Relative, RelativePositional, const Elemental > >
			relativity
		Referential< const Relative >
			relative_set

	Description:
	
        Basic:  
            Type of the base set.
        BasicPositional:  
            Type of a position in the base set.
        Relative:  
            Type of the relative set.
        RelativePositional:  
            Type of a position in the relative set.
        Natural:  
            Type of the natural integer node counts.
        Elemental:  
            Type of the node element.
        Proceed:  
            Function used to suffix a node.
        Equate:  
            Function which will compare values for equality.
        Order:  
            Function which will compare values for determination of order.
        
        Given a reference to a modifiable sorted set, a reference to a constant
        directional basis, a reference to a constant base set, a reference to a 
        constant directional relativity and a reference to a relative set, 
        returns true if the intersection of sets was successfully completed and
        the operand set contains the result, which may be empty.  If it does not 
        complete succesfully, the operand set will be empty and false is 
        returned.  Useful when the base and/or relative sets are not sorted or 
        not in the same sorted order as the operand set.
        
        
     
::junction::collection::UniteCollections

    Template Parameters:
		typename Basic
		typename BasicPositional
		typename Relative
		typename RelativePositional
		typename Natural
		typename Elemental
		Referential< Consequent< Natural, Elemental > >
			ProceedOne
		Referential< ConjointlyConsequent< Relative, RelativePositional, Natural, Elemental > >
			ProceedMany
		Referential< Assortive< Elemental > >
			Equate
		Referential< Assortive< Elemental > >
			Order

    Return Type:
        bool
    
    Parameters:
		Referential< Junctive< Natural, Elemental > >
			operand
		Referential< const Axial< const Basic, BasicPositional, const Elemental > >
			basis
		Referential< const Basic >
			base_set
		Referential< const Axial< const Relative, RelativePositional, const Elemental > >
			relativity
		Referential< const Relative >
			relative_set

	Description:
	
        Basic:  
            Type of the base set.
        BasicPositional:
            Type of a position in the base set.
        Relative:  
            Type of the relative set.
        RelativePositional:  
            Type of a position in the relative set.
        Natural:  
            Type of the natural integer node counts.
        Elemental:  
            Type of the node element.
        ProceedOne:  
            Function used to suffix a single node.
        ProceedMany:  
            Function used to suffix multiple sequential nodes.
        Equate:  
            Function which will compare values for equality.
        Order:  
            Function which will compare values for determination of order.
        
        Given a reference to a modifiable sorted set, a reference to a constant
        directional basis, a reference to a constant base set, a reference to a 
        constant directional relativity and a reference to a relative set, 
        returns true if the union of sets was successfully completed and the 
        operand set contains the result, which may be empty.  If it does not 
        complete succesfully, the operand set will be empty and false is 
        returned.  Useful when the base and/or relative sets are not sorted or 
        not in the same sorted order as the operand set.


                               VARIABLE TEMPLATES


::junction::collection::SearchCollection

    Template Parameters:
		typename Natural
		typename Elemental
		Referential< Assortive< Elemental > >
			Equate
		Referential< Assortive< Elemental > >
			Order

    Type:
        auto

	Description:
	
        Natural:  
            Type of the natural integer node counts.
        Elemental:  
            Type of the node element.
        Equate:  
            Function which will compare values for equality.
        Order:
            Function which will compare values for determination of order.
        
        Bisection search function reference template.  Shortens the template 
        specifier requirements in order to make use of the SearchBisectionally 
        function template in the sortation namespace.


::junction::collection::JunctionOrderComposer

    Template Parameters:
        typename Natural
        typename Elemental
		Referential< const Adjunctive< Natural, Elemental > >
			Adjunct
	    Referential< Assortive< Elemental > >
	        Equate
		Referential< Assortive< Elemental > >
			Order

    Type:
        Compositional< Junctive< Natural, Elemental >, Natural, Elemental >

    Description:
	
        Natural: 
            Type of the natural integer node counts.
        Elemental:  
            Type of the node element.
        Adjunct:  
            Memory management function table.
        Equate:  
            Function which will compare values for equality.
        Order:  
            Function which will compare values for determination of order.
        
        Linked list sorted set composition function reference table.  Implements
        the generic compositional interface for elementary sorted set 
        composition.  Respects the semantics of the "composer" member of the 
        "Selective" type template.

    
::junction::collection::SafeOrderJunctionComposer

    Template Parameters:
        typename Natural
        typename Elemental
		Referential< const Adjunctive< Natural, Elemental > >
			Adjunct
	    Referential< Assortive< Elemental > >
	        Equate
		Referential< Assortive< Elemental > >
			Order

    Type:
        Compositional< Junctive< Natural, Elemental >, Natural, Elemental >

    Description:
	
        Natural:  
            Type of the natural integer node counts.
        Elemental:  
            Type of the node element.
        Adjunct:  
            Memory management function table.
        Equate:  
            Function which will compare values for equality.
        Order:  
            Function which will compare values for determination of order.
        
        Linked list sorted set composition function reference table.  Throws 
        exceptions on null pointer locations.  Implements the generic 
        compositional interface for elementary set composition.  Respects the 
        semantics of the "composer" member of the "Selective" type template.


::junction::collection::JunctionOrderSection

    Template Parameters:
		typename Basic
		typename BasicPositional
		typename Relative
		typename RelativePositional
		typename Natural
		typename Elemental
		Referential< const Adjunctive< Natural, Elemental > >
			Adjunct
		Referential< Assortive< Elemental > >
			Equate
		Referential< Assortive< Elemental > >
			Order

    Type:
        Sectional< Junctive< Natural, Elemental >, Basic, BasicPositional, Relative, RelativePositional, Elemental >

    Description:
	
        Basic:  
            Type of the base set.
        BasicPositional:  
            Type of a position in the base set.
        Relative:  
            Type of the relative set.
        RelativePositional:  
            Type of a position in the relative set.
        Natural:  
            Type of the natural integer node counts.
        Elemental:  
            Type of the node element.
        Adjunct:  
            Memory management function table.
        Equate:  
            Function which will compare values for equality.
        Order:  
            Function which will compare values for determination of order.
        
        Linked list sorted set section function reference table.  Implements 
        the generic sectional interface for set operations.


::junction::collection::SafeJunctionOrderSection

    Template Parameters:
		typename Basic
		typename BasicPositional
		typename Relative
		typename RelativePositional
		typename Natural
		typename Elemental
		Referential< const Adjunctive< Natural, Elemental > >
			Adjunct
		Referential< Assortive< Elemental > >
			Equate
		Referential< Assortive< Elemental > >
			Order

    Type:
        Sectional< Junctive< Natural, Elemental >, Basic, BasicPositional, Relative, RelativePositional, Elemental >

    Description:
	
        Basic:  
            Type of the base set.
        BasicPositional:  
            Type of a position in the base set.
        Relative:  
            Type of the relative set.
        RelativePositional:  
            Type of a position in the relative set.
        Natural:  
            Type of the natural integer node counts.
        Elemental:  
            Type of the node element.
        Adjunct:  
            Memory management function table.
        Equate:  
            Function which will compare values for equality.
        Order:  
            Function which will compare values for determination of order.
        
        Linked list sorted set section function reference table.  Throws 
        exceptions on null pointer locations.  Implements the generic sectional
        interface for set operations.


::junction::collection::JunctionOrderSelector

    Template Parameters:
        typename Natural
        typename Elemental
		Referential< const Adjunctive< Natural, Elemental > >
			Adjunct
	    Referential< Assortive< Elemental > >
	        Equate
		Referential< Assortive< Elemental > >
			Order

    Type:
        Selective< Junctive< Natural, Elemental >, Positional< Elemental >, Natural, Elemental >

    Description:
	
        Natural:  
            Type of the natural integer node counts.
        Elemental:  
            Type of the node element.
        Adjunct:  
            Memory management function table.
        Equate:  
            Function which will compare values for equality.
        Order:  
            Function which will compare values for determination of order.
        
        Linked list sorted set selection function reference table.  Implements 
        the generic selective interface for linked list based sorted sets.  


::junction::collection::SafeJunctionOrderSelector

    Template Parameters:
        typename Natural
        typename Elemental
		Referential< const Adjunctive< Natural, Elemental > >
			Adjunct
	    Referential< Assortive< Elemental > >
	        Equate
		Referential< Assortive< Elemental > >
			Order

    Type:
        Selective< Junctive< Natural, Elemental >, Positional< Elemental >, Natural, Elemental >

    Description:
	
        Natural:  
            Type of the natural integer node counts.
        Elemental: 
            Type of the node element.
        Adjunct:  
            Memory management function table.
        Equate:  
            Function which will compare values for equality.
        Order:  
            Function which will compare values for determination of order.
        
        Linked list sorted set selection function reference table.  Throws 
        exceptions on null pointer locations.  Implements the generic selective
        interface for linked list based sorted sets.  


::junction::collection::JunctionBisection

    Template Parameters:
		typename Basic
		typename BasicPositional
		typename Relative
		typename RelativePositional
		typename Natural
		typename Elemental
		Referential< const Adjunctive< Natural, Elemental > >
			Adjunct
		Referential< Assortive< Elemental > >
			Equate
		Referential< Assortive< Elemental > >
			Order

    Type:
        Bisectional< Junctive< Natural, Elemental >, Basic, BasicPositional, Relative, RelativePositional, Elemental >

    Description:
	
        Basic:  
            Type of the base set.
        BasicPositional:  
            Type of a position in the base set.
        Relative:  
            Type of the relative set.
        RelativePositional:  
            Type of a position in the relative set.
        Natural:  
            Type of the natural integer node counts.
        Elemental:  
            Type of the node element.
        Adjunct:  
            Memory management function table.
        Equate:  
            Function which will compare values for equality.
        Order:  
            Function which will compare values for determination of order.
        
        Linked list sorted set bisection function reference table.  Implements 
        the generic bisectional interface for sorted set operations.


::junction::collection::SafeJunctionBisection

    Template Parameters:
		typename Basic
		typename BasicPositional
		typename Relative
		typename RelativePositional
		typename Natural
		typename Elemental
		Referential< const Adjunctive< Natural, Elemental > >
			Adjunct
		Referential< Assortive< Elemental > >
			Equate
		Referential< Assortive< Elemental > >
			Order

    Type:
        Bisectional< Junctive< Natural, Elemental >, Basic, BasicPositional, Relative, RelativePositional, Elemental >

    Description:
	
        Basic:  
            Type of the base set.
        BasicPositional:  
            Type of a position in the base set.
        Relative:  
            Type of the relative set.
        RelativePositional:  
            Type of a position in the relative set.
        Natural:  
            Type of the natural integer node counts.
        Elemental:  
            Type of the node element.
        Adjunct:  
            Memory management function table.
        Equate:  
            Function which will compare values for equality.
        Order:  
            Function which will compare values for determination of order.
        
        Linked list sorted set bisection function reference table.  Throws 
        exceptions on null pointer locations.  Implements the generic 
        bisectional interface for sorted set operations.


::junction::collection::JunctionCollector

    Template Parameters:
        typename Natural
        typename Elemental
		Referential< const Adjunctive< Natural, Elemental > >
			Adjunct
	    Referential< Assortive< Elemental > >
	        Equate
		Referential< Assortive< Elemental > >
			Order

    Type:
        Collective< Junctive< Natural, Elemental >, Positional< Elemental >, Natural, Elemental >

    Description:
	
        Natural: 
            Type of the natural integer node counts.
        Elemental:  
            Type of the node element.
        Adjunct:  
            Memory management function table.
        Equate:  
            Function which will compare values for equality.
        Order: 
            Function which will compare values for determination of order.
        
        Linked list sorted set collection function reference table.  Implements 
        the generic collective interface for linked list based sorted sets.  


::junction::collection::SafeJunctionCollector

    Template Parameters:
        typename Natural
        typename Elemental
		Referential< const Adjunctive< Natural, Elemental > >
			Adjunct
	    Referential< Assortive< Elemental > >
	        Equate
		Referential< Assortive< Elemental > >
			Order

    Type:
        Collective< Junctive< Natural, Elemental >, Positional< Elemental >, Natural, Elemental >

    Description:
	
        Natural:  
            Type of the natural integer node counts.
        Elemental:  
            Type of the node element.
        Adjunct:  
            Memory management function table.
        Equate:  
            Function which will compare values for equality.
        Order:  
            Function which will compare values for determination of order.
        
        Linked list sorted set collection function reference table.  Throws 
        exceptions on null pointer locations.  Implements the generic collective
        interface for linked list based sorted sets.  


                                    NAMESPACE


::junction::association

    Linked map common type, function and variable templates.  These templates 
    are used to traverse and manage mappings in a doubly linked list.


                                 TYPE TEMPLATES


::junction::association::AssociativelyJunctional (type alias)

    Template Parameters:
        typename Correlative
        typename Elemental

    Aliased Type:
        Junctional< Associational< Correlative, Elemental > > 

    Description:

        Correlative:  
            Type of the node relator key.
        Elemental:  
            Type of the node value element.
        
        Linked map nodal type alias template.
        

::junction::association::AssociativelyPositional (type alias)

    Template Parameters:
        typename Correlative
        typename Elemental

    Aliased Type:
        Positional< Associational< Correlative, Elemental > > 

    Description:
        
        Correlative:  
            Type of the node relator key.
        Elemental:  
            Type of the node value element.
        
        Linked map positional type template.  Used to represent a position in 
        the active linked map.  Do not use these to represent nodes which are 
        not yet in the active linked map, including nodes in the unused sublist.


::junction::association::AssociativelyJunctive (type alias)

    Template Parameters:
        typename Natural
        typename Correlative
        typename Elemental

    Aliased Type:
        Junctive< Natural, Associational< Correlative, Elemental > >

    Description:
    
        Natural:  
            Type of the natural integer node counts.
        Correlative:  
            Type of the node relator key.
        Elemental:  
            Type of the node value element.
        
        Linked map container type struct template.


                               FUNCTION TEMPLATES


::junction::association::GoReadRelator

    Template Parameters:
        typename Natural
        typename Correlative
        typename Elemental

    Return Type:
        Conferential< const Correlative >
    
    Parameters:
		Referential< const AssociativelyJunctive< Natural, Correlative, Elemental > >
			map
		Referential< const AssociativelyPositional< Correlative, Elemental > >
			position

	Description:
    
        Natural:  
            Type of the natural integer node counts.
        Correlative:  
            Type of the node relator key.
        Elemental:  
            Type of the node value element.
        
        Given a reference to a constant linked map and a reference to a constant
        position, returns a conferment reference to the constant relator at that 
        position.


::junction::association::GoReadRelatorSafely

    Template Parameters:
        typename Natural
        typename Correlative
        typename Elemental

    Return Type:
        Conferential< const Correlative >
    
    Parameters:
		Referential< const AssociativelyJunctive< Natural, Correlative, Elemental > >
			map
		Referential< const AssociativelyPositional< Correlative, Elemental > >
			position

	Description:
    
        Natural:  
            Type of the natural integer node counts.
        Correlative:  
            Type of the node relator key.
        Elemental:  
            Type of the node value element.
        
        Given a reference to a constant linked map and a reference to a constant 
        position, throws position if it's location is null or it is not 
        contained in the map.  Returns a conferment reference to the constant 
        relator at that position.


::junction::association::GoReadElement

    Template Parameters:
        typename Natural
        typename Correlative
        typename Elemental

    Return Type:
        Conferential< const Elemental >
    
    Parameters:
		Referential< const AssociativelyJunctive< Natural, Correlative, Elemental > >
			map
		Referential< const AssociativelyPositional< Correlative, Elemental > >
			position

	Description:
    
        Natural:  
            Type of the natural integer node counts.
        Correlative:  
            Type of the node relator key.
        Elemental:  
            Type of the node value element.
        
        Given a reference to a constant linked map and a reference to a constant
        position, returns a conferment reference to the constant value element 
        at that position.


::junction::association::GoReadElementSafely

    Template Parameters:
        typename Natural
        typename Correlative
        typename Elemental

    Return Type:
        Conferential< const Elemental >
    
    Parameters:
		Referential< const AssociativelyJunctive< Natural, Correlative, Elemental > >
			map
		Referential< const AssociativelyPositional< Correlative, Elemental > >
			position

	Description:
    
        Natural:  
            Type of the natural integer node counts.
        Correlative:  
            Type of the node relator key.
        Elemental:  
            Type of the node value element.
        
        Given a reference to a constant linked map and a reference to a constant 
        position, throws position if it's location is null or it is not 
        contained in the map.  Returns a conferment reference to the constant 
        value element at that position.


::junction::association::GoWriteElement

    Template Parameters:
        typename Natural
        typename Correlative
        typename Elemental

    Return Type:
        Conferential< Elemental >
    
    Parameters:
		Referential< AssociativelyJunctive< Natural, Correlative, Elemental > >
			map
		Referential< const AssociativelyPositional< Correlative, Elemental > >
			position

	Description:
    
        Natural:  
            Type of the natural integer node counts.
        Correlative:  
            Type of the node relator key.
        Elemental:  
            Type of the node value element.
        
        Given a reference to a constant linked map and a reference to a 
        constant position, returns a conferment reference to the modifiable 
        value element at that position.


::junction::association::GoWriteElementSafely

    Template Parameters:
        typename Natural
        typename Correlative
        typename Elemental

    Return Type:
        Conferential< Elemental >
    
    Parameters:
		Referential< AssociativelyJunctive< Natural, Correlative, Elemental > >
			map
		Referential< const AssociativelyPositional< Correlative, Elemental > >
			position

	Description:
    
        Natural:  
            Type of the natural integer node counts.
        Correlative:  
            Type of the node relator key.
        Elemental:  
            Type of the node value element.
        
        Given a reference to a constant linked map and a reference to a constant 
        position, throws position if it's location is null or it is not 
        contained in the map.  Returns a conferment reference to the modifiable 
        value element at that position.


                               VARIABLE TEMPLATES


::junction::association::ReadRelatorIncrementScale

    Template Parameters:
        typename Natural
        typename Correlative
        typename Elemental

    Type:
        Scalar< const AssocativelyJunctive< Natural, Correlative, Elemental >, AssociativelyPositional< Correlative, Elemental >, const Correlative >

    Description:
    
        Natural:  
            Type of the natural integer node counts.
        Correlative:  
            Type of the node relator key.
        Elemental:  
            Type of the node value element.
        
        Scalar increment trajection through a linked map function reference 
        table.  Returns references to constant relator keys.


::junction::association::SafeReadRelatorIncrementScale

    Template Parameters:
        typename Natural
        typename Correlative
        typename Elemental

    Type:
        Scalar< const AssocativelyJunctive< Natural, Correlative, Elemental >, AssociativelyPositional< Correlative, Elemental >, const Correlative >

    Description:
    
        Natural:  
            Type of the natural integer node counts.
        Correlative:  
            Type of the node relator key.
        Elemental:  
            Type of the node value element.
        
        Scalar increment trajection through a linked map function reference 
        table.  Throws exceptions on null pointer locations.  Returns references 
        to constant relator keys.


::junction::association::ReadRelatorDecrementScale

    Template Parameters:
        typename Natural
        typename Correlative
        typename Elemental

    Type:
        Scalar< const AssocativelyJunctive< Natural, Correlative, Elemental >, AssociativelyPositional< Correlative, Elemental >, const Correlative >

    Description:
    
        Natural:  
            Type of the natural integer node counts.
        Correlative:  
            Type of the node relator key.
        Elemental:  
            Type of the node value element.
        
        Scalar decrement trajection through a linked map function reference 
        table.  Returns references to constant relator keys.


::junction::association::SafeReadRelatorDecrementScale

    Template Parameters:
        typename Natural
        typename Correlative
        typename Elemental

    Type:
        Scalar< const AssocativelyJunctive< Natural, Correlative, Elemental >, AssociativelyPositional< Correlative, Elemental >, const Correlative >

    Description:
    
        Natural:  
            Type of the natural integer node counts.
        Correlative:  
            Type of the node relator key.
        Elemental:  
            Type of the node value element.
        
        Scalar decrement trajection through a linked map function reference 
        table.  Throws exceptions on null pointer locations.  Returns references 
        to constant relator keys.


::junction::association::ReadElementIncrementScale

    Template Parameters:
        typename Natural
        typename Correlative
        typename Elemental

    Type:
        Scalar< const AssocativelyJunctive< Natural, Correlative, Elemental >, AssociativelyPositional< Correlative, Elemental >, const Elemental >

    Description:
    
        Natural:  
            Type of the natural integer node counts.
        Correlative:  
            Type of the node relator key.
        Elemental:  
            Type of the node value element.
        
        Scalar increment trajection through a linked map function reference 
        table.  Returns references to constant value elements.


::junction::association::SafeReadElementIncrementScale

    Template Parameters:
        typename Natural
        typename Correlative
        typename Elemental

    Type:
        Scalar< const AssocativelyJunctive< Natural, Correlative, Elemental >, AssociativelyPositional< Correlative, Elemental >, const Elemental >

    Description:
    
        Natural:  
            Type of the natural integer node counts.
        Correlative:  
            Type of the node relator key.
        Elemental:  
            Type of the node value element.
        
        Scalar increment trajection through a linked map function reference 
        table.  Throws exceptions on null pointer locations.  Returns references 
        to constant value elements.


::junction::association::ReadElementDecrementScale

    Template Parameters:
        typename Natural
        typename Correlative
        typename Elemental

    Type:
        Scalar< const AssocativelyJunctive< Natural, Correlative, Elemental >, AssociativelyPositional< Correlative, Elemental >, const Elemental >

    Description:
    
        Natural:  
            Type of the natural integer node counts.
        Correlative:  
            Type of the node relator key.
        Elemental:  
            Type of the node value element.
        
        Scalar decrement trajection through a linked map function reference 
        table.  Returns references to constant value elements.


::junction::association::SafeReadElementDecrementScale

    Template Parameters:
        typename Natural
        typename Correlative
        typename Elemental

    Type:
        Scalar< const AssocativelyJunctive< Natural, Correlative, Elemental >, AssociativelyPositional< Correlative, Elemental >, const Elemental >

    Description:
    
        Natural:  
            Type of the natural integer node counts.
        Correlative:  
            Type of the node relator key.
        Elemental:  
            Type of the node value element.
        
        Scalar decrement trajection through a linked map function reference 
        table.  Throws exceptions on null pointer locations.  Returns references
        to constant value elements.


::junction::association::WriteElementIncrementScale

    Template Parameters:
        typename Natural
        typename Correlative
        typename Elemental

    Type:
        Scalar< AssocativelyJunctive< Natural, Correlative, Elemental >, AssociativelyPositional< Correlative, Elemental >, Elemental >

    Description:
    
        Natural:  
            Type of the natural integer node counts.
        Correlative:  
            Type of the node relator key.
        Elemental:  
            Type of the node value element.
        
        Scalar increment trajection through a linked map function reference 
        table.  Returns references to value elements.


::junction::association::SafeWriteElementIncrementScale

    Template Parameters:
        typename Natural
        typename Correlative
        typename Elemental

    Type:
        Scalar< AssocativelyJunctive< Natural, Correlative, Elemental >, AssociativelyPositional< Correlative, Elemental >, Elemental >

    Description:
    
        Natural:  
            Type of the natural integer node counts.
        Correlative:  
            Type of the node relator key.
        Elemental:  
            Type of the node value element.
        
        Scalar increment trajection through a linked map function reference 
        table.  Throws exceptions on null pointer locations.  Returns 
        references to value elements.


::junction::association::WriteElementDecrementScale

    Template Parameters:
        typename Natural
        typename Correlative
        typename Elemental

    Type:
        Scalar< AssocativelyJunctive< Natural, Correlative, Elemental >, AssociativelyPositional< Correlative, Elemental >, Elemental >

    Description:
    
        Natural:  
            Type of the natural integer node counts.
        Correlative:  
            Type of the node relator key.
        Elemental:  
            Type of the node value element.
        
        Scalar decrement trajection through a linked map function 
        reference table.  Returns references to value elements.


::junction::association::SafeWriteElementDecrementScale

    Template Parameters:
        typename Natural
        typename Correlative
        typename Elemental

    Type:
        Scalar< AssocativelyJunctive< Natural, Correlative, Elemental >, AssociativelyPositional< Correlative, Elemental >, Elemental >

    Description:
    
        Natural:  
            Type of the natural integer node counts.
        Correlative:  
            Type of the node relator key.
        Elemental:  
            Type of the node value element.
        
        Scalar decrement trajection through a linked map function reference 
        table.  Throws exceptions on null pointer locations.  Returns references 
        to value elements.


::junction::ReadRelatorLiner

    Template Parameters:
        typename Natural
        typename Correlative
        typename Elemental

    Type:
        Lineal< const AssociativelyJunctive< Natural, Correlative, Elemental >, AssociativelyPositional< Correlative, Elemental >, const Correlative >

    Description:
    
        Natural:  
            Type of the natural integer node counts.
        Correlative:  
            Type of the node relator key.
        Elemental:  
            Type of the node value element.
        
        Lineal trajection through a linked map function reference table.  
        Returns references to constant relator keys.


::junction::SafeReadRelatorLiner

    Template Parameters:
        typename Natural
        typename Correlative
        typename Elemental

    Type:
        Lineal< const AssociativelyJunctive< Natural, Correlative, Elemental >, AssociativelyPositional< Correlative, Elemental >, const Correlative >

    Description:
    
        Natural:  
            Type of the natural integer node counts.
        Correlative:  
            Type of the node relator key.
        Elemental:  
            Type of the node value element.
        
        Lineal trajection through a linked map function reference table.  Throws 
        exceptions on null pointer locations.  Returns references to constant 
        relator keys.


::junction::ReadElementLiner

    Template Parameters:
        typename Natural
        typename Correlative
        typename Elemental

    Type:
        Lineal< const AssociativelyJunctive< Natural, Correlative, Elemental >, AssociativelyPositional< Correlative, Elemental >, const Elemental >

    Description:
    
        Natural:  
            Type of the natural integer node counts.
        Correlative:  
            Type of the node relator key.
        Elemental:  
            Type of the node value element.
        
        Lineal trajection through a linked map function reference table.  
        Returns references to constant value elements.


::junction::SafeReadElementLiner

    Template Parameters:
        typename Natural
        typename Correlative
        typename Elemental

    Type:
        Lineal< const AssociativelyJunctive< Natural, Correlative, Elemental >, AssociativelyPositional< Correlative, Elemental >, const Elemental >

    Description:
    
        Natural:  
            Type of the natural integer node counts.
        Correlative:  
            Type of the node relator key.
        Elemental:  
            Type of the node value element.
        
        Lineal trajection through a linked map function reference table.  Throws 
        exceptions on null pointer locations.  Returns references to constant 
        value elements.


::junction::WriteElementLiner

    Template Parameters:
        typename Natural
        typename Correlative
        typename Elemental

    Type:
        Lineal< AssociativelyJunctive< Natural, Correlative, Elemental >, AssociativelyPositional< Correlative, Elemental >, Elemental >

    Description:
    
        Natural:  
            Type of the natural integer node counts.
        Correlative:  
            Type of the node relator key.
        Elemental:  
            Type of the node value element.
        
        Lineal trajection through a linked map function reference table.  
        Returns references to constant value elements.


::junction::SafeWriteElementLiner

    Template Parameters:
        typename Natural
        typename Correlative
        typename Elemental

    Type:
        Lineal< AssociativelyJunctive< Natural, Correlative, Elemental >, AssociativelyPositional< Correlative, Elemental >, Elemental >

    Description:
    
        Natural:  
            Type of the natural integer node counts.
        Correlative:  
            Type of the node relator key.
        Elemental:  
            Type of the node value element.
        
        Lineal trajection through a linked map function reference table.  Throws
        exceptions on null pointer locations.  Returns references to constant 
        value elements.


::junction::association::ReadRelatorIncrementDirection

    Template Parameters:
        typename Natural
        typename Correlative
        typename Elemental

    Type:
        Directional< const AssociativelyJunctive< Natural, Correlative, Elemental >, AssociativelyPositional< Correlative, Elemental >, const Correlative >

    Description:
    
        Natural:  
            Type of the natural integer node counts.
        Correlative:
            Type of the node relator key.
        Elemental:  
            Type of the node value element.
        
        Directional increment trajection through a linked map function reference
        table.  Returns references to constant relator keys. 


::junction::association::SafeReadRelatorIncrementDirection

    Template Parameters:
        typename Natural
        typename Correlative
        typename Elemental

    Type:
        Directional< const AssociativelyJunctive< Natural, Correlative, Elemental >, AssociativelyPositional< Correlative, Elemental >, const Correlative >

    Description:
    
        Natural:  
            Type of the natural integer node counts.
        Correlative:  
            Type of the node relator key.
        Elemental:  
            Type of the node value element.
        
        Directional increment trajection through a linked map function reference 
        table.  Throws exceptions on null pointer locations.  Returns references 
        to constant relator keys.


::junction::association::ReadRelatorDecrementDirection

    Template Parameters:
        typename Natural
        typename Correlative
        typename Elemental

    Type:
        Directional< const AssociativelyJunctive< Natural, Correlative, Elemental >, AssociativelyPositional< Correlative, Elemental >, const Correlative >

    Description:
    
        Natural:  
            Type of the natural integer node counts.
        Correlative:  
            Type of the node relator key.
        Elemental:  
            Type of the node value element.
        
        Directional decrement trajection through a linked map function reference
        table.  Returns references to constant relator keys.


::junction::association::SafeReadRelatorDecrementDirection

    Template Parameters:
        typename Natural
        typename Correlative
        typename Elemental

    Type:
        Directional< const AssociativelyJunctive< Natural, Correlative, Elemental >, AssociativelyPositional< Correlative, Elemental >, const Correlative >

    Description:
    
        Natural:  
            Type of the natural integer node counts.
        Correlative:  
            Type of the node relator key.
        Elemental:  
            Type of the node value element.
        
        Directional decrement trajection through a linked map function reference 
        table.  Throws exceptions on null pointer locations.  Returns references 
        to constant relator keys.


::junction::association::ReadElementIncrementDirection

    Template Parameters:
        typename Natural
        typename Correlative
        typename Elemental

    Type:
        Directional< const AssociativelyJunctive< Natural, Correlative, Elemental >, AssociativelyPositional< Correlative, Elemental >, const Elemental >

    Description:
    
        Natural:  
            Type of the natural integer node counts.
        Correlative:  
            Type of the node relator key.
        Elemental:  
            Type of the node value element.
        
        Directional increment trajection through a linked map function reference 
        table.  Returns references to constant value elements. 


::junction::association::SafeReadElementIncrementDirection

    Template Parameters:
        typename Natural
        typename Correlative
        typename Elemental

    Type:
        Directional< const AssociativelyJunctive< Natural, Correlative, Elemental >, AssociativelyPositional< Correlative, Elemental >, const Elemental >

    Description:
    
        Natural:  
            Type of the natural integer node counts.
        Correlative:  
            Type of the node relator key.
        Elemental:  
            Type of the node value element.
        
        Directional increment trajection through a linked map function reference 
        table.  Throws exceptions on null pointer locations.  Returns references
        to constant value elements.


::junction::association::ReadRelatorDecrementDirection

    Template Parameters:
        typename Natural
        typename Correlative
        typename Elemental

    Type:
        Directional< const AssociativelyJunctive< Natural, Correlative, Elemental >, AssociativelyPositional< Correlative, Elemental >, const Elemental >

    Description:
    
        Natural:  
            Type of the natural integer node counts.
        Correlative:  
            Type of the node relator key.
        Elemental:  
            Type of the node value element.
        
        Directional decrement trajection through a linked map function reference 
        table.  Returns references to constant value elements. 


::junction::association::SafeReadRelatorDecrementDirection

    Template Parameters:
        typename Natural
        typename Correlative
        typename Elemental

    Type:
        Directional< const AssociativelyJunctive< Natural, Correlative, Elemental >, AssociativelyPositional< Correlative, Elemental >, const Elemental >

    Description:
    
        Natural:  
            Type of the natural integer node counts.
        Correlative:  
            Type of the node relator key.
        Elemental:  
            Type of the node value element.
        
        Directional decrement trajection through a linked map function reference 
        table.  Throws exceptions on null pointer locations.  Returns references 
        to constant value elements.


::junction::association::WriteElementIncrementDirection

    Template Parameters:
        typename Natural
        typename Correlative
        typename Elemental

    Type:
        Directional< AssociativelyJunctive< Natural, Correlative, Elemental >, AssociativelyPositional< Correlative, Elemental >, Elemental >

    Description:
    
        Natural:  
            Type of the natural integer node counts.
        Correlative:  
            Type of the node relator key.
        Elemental:  
            Type of the node value element.
        
        Directional increment trajection through a linked map function reference 
        table.  Returns references to value elements.


::junction::association::SafeWriteElementIncrementDirection

    Template Parameters:
        typename Natural
        typename Correlative
        typename Elemental

    Type:
        Directional< AssociativelyJunctive< Natural, Correlative, Elemental >, AssociativelyPositional< Correlative, Elemental >, Elemental >

    Description:
    
        Natural:  
            Type of the natural integer node counts.
        Correlative:
            Type of the node relator key.
        Elemental:  
            Type of the node value element.
        
        Directional increment trajection through a linked map function reference 
        table.  Throws exceptions on null pointer locations.  Returns references
        to value elements.


::junction::association::WriteRelatorDecrementDirection

    Template Parameters:
        typename Natural
        typename Correlative
        typename Elemental

    Type:
        Directional< AssociativelyJunctive< Natural, Correlative, Elemental >, AssociativelyPositional< Correlative, Elemental >, Elemental >

    Description:
    
        Natural:  
            Type of the natural integer node counts.
        Correlative:  
            Type of the node relator key.
        Elemental:  
            Type of the node value element.
        
        Directional decrement trajection through a linked map function reference 
        table.  Returns references to value elements.


::junction::association::SafeWriteRelatorDecrementDirection

    Template Parameters:
        typename Natural
        typename Correlative
        typename Elemental

    Type:
        Directional< AssociativelyJunctive< Natural, Correlative, Elemental >, AssociativelyPositional< Correlative, Elemental >, Elemental >

    Description:
    
        Natural:  
            Type of the natural integer node counts.
        Correlative:  
            Type of the node relator key.
        Elemental:  
            Type of the node value element.
        
        Directional decrement trajection through a linked map function reference 
        table.  Throws exceptions on null pointer locations.  Returns references 
        to value elements.


::junction::association::ReadRelatorAxis

    Template Parameters:
        typename Natural
        typename Correlative
        typename Elemental

    Type:
        Axial< const AssociativelyJunctive< Natural, Correlative, Elemental >, AssociativelyPositional< Correlative, Elemental >, const Correlative >

    Description:
    
        Natural:  
            Type of the natural integer node counts.
        Correlative:  
            Type of the node relator key.
        Elemental:  
            Type of the node value element.
        
        Axial trajection through a linked map function reference table.  Returns
        references to constant relator keys.


::junction::association::SafeReadRelatorAxis

    Template Parameters:
        typename Natural
        typename Correlative
        typename Elemental

    Type:
        Axial< const AssociativelyJunctive< Natural, Correlative, Elemental >, AssociativelyPositional< Correlative, Elemental >, const Correlative >

    Description:
    
        Natural:  
            Type of the natural integer node counts.
        Correlative:  
            Type of the node relator key.
        Elemental:  
            Type of the node value element.
        
        Axial trajection through a linked map function reference table.  Throws 
        exceptions on null pointer locations.  Returns references to constant 
        relator keys.


::junction::association::ReadElementAxis

    Template Parameters:
        typename Natural
        typename Correlative
        typename Elemental

    Type:
        Axial< const AssociativelyJunctive< Natural, Correlative, Elemental >, AssociativelyPositional< Correlative, Elemental >, const Elemental >

    Description:
    
        Natural:
            Type of the natural integer node counts.
        Correlative:  
            Type of the node relator key.
        Elemental:  
            Type of the node value element.
        
        Axial trajection through a linked map function reference table.  Returns
        references to constant value elements.


::junction::association::SafeReadElementAxis

    Template Parameters:
        typename Natural
        typename Correlative
        typename Elemental

    Type:
        Axial< const AssociativelyJunctive< Natural, Correlative, Elemental >, AssociativelyPositional< Correlative, Elemental >, const Elemental >

    Description:
    
        Natural:  
            Type of the natural integer node counts.
        Correlative:  
            Type of the node relator key.
        Elemental:  
            Type of the node value element.
        
        Axial trajection through a linked map function reference table.  Throws 
        exceptions on null pointer locations.  Returns references to constant 
        value elements.


::junction::association::WriteElementAxis

    Template Parameters:
        typename Natural
        typename Correlative
        typename Elemental

    Type:
        Axial< AssociativelyJunctive< Natural, Correlative, Elemental >, AssociativelyPositional< Correlative, Elemental >, Elemental >

    Description:
    
        Natural:  
            Type of the natural integer node counts.
        Correlative:  
            Type of the node relator key.
        Elemental:  
            Type of the node value element.
        
        Axial trajection through a linked map function reference table.  Returns 
        references to value elements.


::junction::association::SafeWriteElementAxis

    Template Parameters:
        typename Natural
        typename Correlative
        typename Elemental

    Type:
        Axial< AssociativelyJunctive< Natural, Correlative, Elemental >, AssociativelyPositional< Correlative, Elemental >, Elemental >

    Description:
    
        Natural:  
            Type of the natural integer node counts.
        Correlative:  
            Type of the node relator key.
        Elemental:  
            Type of the node value element.
        
        Axial trajection through a linked map function reference table.  Throws 
        exceptions on null pointer locations.  Returns references to value 
        elements.


::junction::association::DefaultNewAssociativeAdjunct

    Template Parameters:
        typename Natural
        typename Correlative
        typename Elemental

    Type:
        auto

    Description:
    
        Natural:  
            Type of the natural integer node counts.
        Correlative:  
            Type of the node relator key.
        Elemental:  
            Type of the node value element.
        
        New default constructor nodal allocation function reference table.  
        Supports the pre-allocation of nodes and reuse of unused nodes, however 
        the elemental type must support assignment from a reference to a 
        constant element.  The correlative type does not need to support 
        assignment.


::junction::association::CopyNewAssociativeAdjunct

    Template Parameters:
        typename Natural
        typename Correlative
        typename Elemental

    Type:
        auto

    Description:
    
        Natural:  
            Type of the natural integer node counts.
        Correlative:  
            Type of the node relator key.
        Elemental:  
            Type of the node value element.
        
        New copy constructor nodal allocation function reference table.  Does 
        not support the pre-allocation of nodes, does not reuse unused nodes and
        the elemental type need not support assignment.  The correlative type 
        does not need to support assignment.


                                    NAMESPACE


::junction::association::stdlib

    Linked map stdlib memory management variable templates.  These templates are 
    used to provide stdlib based memory management linked lists.

                               VARIABLE TEMPLATES


::junction::association::stdlib::DefaultMallocAssociativeAdjunct

    Template Parameters:
        typename Natural
        typename Correlative
        typename Elemental

    Type:
        auto

    Description:
    
        Natural:  
            Type of the natural integer node counts.
        Correlative:  
            Type of the node relator key.
        Elemental:  
            Type of the node value element.
        
        Default malloc nodal allocation function reference table.  Supports 
        the pre-allocation of nodes and reuse of unused nodes, however the 
        elemental type must support assignment from a reference to a constant
        element.  The correlative type does not need to support assignment.


::junction::association::stdlib::DefaultCallocAssociativeAdjunct

    Template Parameters:
        typename Natural
        typename Correlative
        typename Elemental

    Type:
        auto

    Description:
    
        Natural:  
            Type of the natural integer node counts.
        Correlative:  
            Type of the node relator key.
        Elemental:  
            Type of the node value element.
        
        Default calloc nodal allocation function reference table.  Supports 
        the pre-allocation of nodes and reuse of unused nodes, however the 
        elemental type must support assignment from a reference to a constant 
        element.  The correlative type does not need to support assignment.


                                    NAMESPACE


::junction::association::selection

    Linked unsorted map function and variable templates.  These templates are 
    used to provide unsorted key operations for linked maps.


                               FUNCTION TEMPLATES


::junction::association::selection::Correspond

    Template Parameters:
		typename Natural
		typename Correlative
		typename Elemental
		Referential< Assortive< Correlative > >
			Equate

    Return Type:
        bool
    
    Parameters:
		Referential< const AssociativelyJunctive< Natural, Correlative, Elemental > >
			map
		Referential< const Correlative >
			relator

	Description:
	
        Natural:  
            Type of the natural integer node counts.
        Correlative:  
            Type of the node relator key.
        Elemental:  
            Type of the node value element.
        Equate:  
            Function which will compare values for equality.
        
        Given a reference to a constant map and a reference to a constant 
        relator key, returns true if relator corresponds in the association.


::junction::association::selection::Associate

    Template Parameters:
		typename Natural
		typename Correlative
		typename Elemental
		Referential< Consequent< Natural, Associational< Correlative, Elemental > > >
			Proceed
		Referential< Assortive< Correlative > >
			Equate

    Return Type:
        bool
    
    Parameters:
		Referential< AssociativelyJunctive< Natural, Correlative, Elemental > >
			map
		Referential< const Correlative >
			relator
		Referential< const Elemental >
			value

	Description:
	
        Natural:  
            Type of the natural integer node counts.
        Correlative:  
            Type of the node relator key.
        Elemental:  
            Type of the node value element.
        Proceed:  
            Function used to suffix a node.
        Equate:  
            Function which will compare values for equality.
        
        Given a reference to a modifiable map, a reference to a constant relator
        key and a reference to a constant value element, returns true if 
        associate was successful.  Returns false if relator already corresponds 
        in the association.


::junction::association::selection::Reassociate

    Template Parameters:
		typename Natural
		typename Correlative
		typename Elemental
		Referential< Consequent< Natural, Associational< Correlative, Elemental > > >
			Proceed
		Referential< Concessive< Natural, Associational< Correlative, Elemental > > >
			Concede
		Referential< Assortive< Correlative > >
			Equate

    Return Type:
        bool
    
    Parameters:
		Referential< AssociativelyJunctive< Natural, Correlative, Elemental > >
			map
		Referential< const Correlative >
			original
		Referential< const Correlative >
			replacement

	Description:
	
        Natural:  
            Type of the natural integer node counts.
        Correlative:  
            Type of the node relator key.
        Elemental:  
            Type of the node value element.
        Concede:  
            Function used to remove a node.
        Equate:  
            Function which will compare values for equality.
        
        Given a reference to a modifiable map, a reference to a constant 
        original key and a reference to a constant replacement key, returns true
        if reassociate was successful.  Returns false if replacement already 
        corresponds in the association.


::junction::association::selection::Disassociate

    Template Parameters:
		typename Natural
		typename Correlative
		typename Elemental
		Referential< Concessive< Natural, Associational< Correlative, Elemental > > >
			Concede
		Referential< Assortive< Correlative > >
			Equate

    Return Type:
        bool
    
    Parameters:
		Referential< AssociativelyJunctive< Natural, Correlative, Elemental > >
			map
		Referential< const Correlative >
			relator

	Description:
	
        Natural:  
            Type of the natural integer node counts.
        Correlative:  
            Type of the node relator key.
        Elemental:  
            Type of the node value element.
        Concede:  
            Function used to remove a node.
        Equate:  
            Function which will compare values for equality.
        
        Given a reference to a modifiable map and a reference to a constant 
        relator key, returns true if disassociate was successful.  Returns false 
        if relator did not correspond in the association.


::junction::association::selection::RelateReadElement

    Template Parameters:
		typename Natural
		typename Correlative
		typename Elemental
		Referential< Assortive< Correlative > >
			Equate

    Return Type:
        Conferential< const Elemental >
    
    Parameters:
		Referential< const AssociativelyJunctive< Natural, Correlative, Elemental > >
			map
		Referential< const Correlative >
			relator

	Description:
	
        Natural:  
            Type of the natural integer node counts.
        Correlative:  
            Type of the node relator key.
        Elemental:  
            Type of the node value element.
        Equate:  
            Function which will compare values for equality.
        
        Given a reference to a constant map and  a reference to a constant 
        relator key, throws relator if it does not correspond in the 
        association.  Returns a conferment reference to the corresponding 
        constant value element.


::junction::association::selection::RelateWriteElement

    Template Parameters:
		typename Natural
		typename Correlative
		typename Elemental
		Referential< Assortive< Correlative > >
			Equate

    Return Type:
        Conferential< Elemental >
    
    Parameters:
		Referential< AssociativelyJunctive< Natural, Correlative, Elemental > >
			map
		Referential< const Correlative >
			relator

	Description:
	
        Natural:  
            Type of the natural integer node counts.
        Correlative:  
            Type of the node relator key.
        Elemental:  
            Type of the node value element.
        Equate:  
            Function which will compare values for equality.
        
        Given a reference to a modifiable map and a reference to a constant 
        relator key, throws relator if it does not correspond in the 
        association.  Returns a conferment reference to the corresponding 
        modifiable value element.


                               VARIABLE TEMPLATES


::junction::association::selection::SearchCorrelation

    Template Parameters:
		typename Natural
		typename Correlative
		typename Elemental
		Referential< Assortive< Correlative > >
			Equate

    Type:
        auto

    Description:
	
        Natural:  
            Type of the natural integer node counts.
        Correlative:  
            Type of the node relator key.
        Elemental:  
            Type of the node value element.
        Equate:  
            Function which will compare values for equality.
        
        Linear search function reference template.  Shortens the template 
        specifier requirements in order to make use of the SearchLinealy 
        function template in the sortation namespace.


::junction::association::selection::RelateReadVector

    Template Parameters:
		typename Natural
		typename Correlative
		typename Elemental
		Referential< Assortive< Correlative > >
			Equate

    Type:
        Vectorial< const AssociativelyJunctive< Natural, Correlative, Elemental >, Correlative, const Elemental >

    Description:
	
        Natural:  
            Type of the natural integer node counts.
        Correlative:  
            Type of the node relator key.
        Elemental:  
            Type of the node value element.
        Equate:
            Function which will compare values for equality.
        
        Vectorial trajection through a linked map function reference table.  
        Positional type is correlative.  Throws exceptions on relators which are
        not found.  Returns references to constant elements.


::junction::association::selection::RelateWriteVector

    Template Parameters:
		typename Natural
		typename Correlative
		typename Elemental
		Referential< Assortive< Correlative > >
			Equate

    Type:
        Vectorial< AssociativelyJunctive< Natural, Correlative, Elemental >, Correlative, Elemental >

    Description:
	
        Natural:  
            Type of the natural integer node counts.
        Correlative:  
            Type of the node relator key.
        Elemental:  
            Type of the node value element.
        Equate:  
            Function which will compare values for equality.
        
        Vectorial trajection through a linked map function reference table.  
        Positional type is correlative.  Throws exceptions on relators which are 
        not found.  Returns references to modifiable elements.


::junction::association::selection::JunctionCorrelator

    Template Parameters:
		typename Natural
		typename Correlative
		typename Elemental
		Referential< const Adjunctive< Natural, Associational< Correlative, Elemental > > >
			Adjunct
		Referential< Assortive< Correlative > >
			Equate

    Type:
        Associative< AssociativelyJunctive< Natural, Correlative, Elemental >, Natural, Correlative, Elemental >

    Description:
	
        Natural:  
            Type of the natural integer node counts.
        Correlative:  
            Type of the node relator key.
        Elemental:  
            Type of the node value element.
        Adjunct:  
            Memory management function table.
        Equate:  
            Function which will compare values for equality.
        
        Linked map associative function reference table.  Implements the generic 
        associative interface for linked list based unsorted maps.  


::junction::association::selection::SafeJunctionCorrelator

    Template Parameters:
		typename Natural
		typename Correlative
		typename Elemental
		Referential< const Adjunctive< Natural, Associational< Correlative, Elemental > > >
			Adjunct
		Referential< Assortive< Correlative > >
			Equate

    Type:
        Associative< AssociativelyJunctive< Natural, Correlative, Elemental >, Natural, Correlative, Elemental >

    Description:
	
        Natural:  
            Type of the natural integer node counts.
        Correlative:  
            Type of the node relator key.
        Elemental:  
            Type of the node value element.
        Adjunct:  
            Memory management function table.
        Equate:  
            Function which will compare values for equality.
        
        Linked map associative function reference table.  Throws exceptions on 
        null pointer locations.  Implements the generic associative interface 
        for linked list based unsorted maps.  


                                    NAMESPACE


::junction::association::collection

    Linked sorted map function and variable templates.  These templates are used
    to provide sorted key operations for linked maps.


                               FUNCTION TEMPLATES


::junction::association::collection::Correspond

    Template Parameters:
		typename Natural
		typename Correlative
		typename Elemental
		Referential< Assortive< Correlative > >
			Equate
		Referential< Assortive< Correlative > >
			Order

    Return Type:
        bool
    
    Parameters:
		Referential< const AssociativelyJunctive< Natural, Correlative, Elemental > >
			map
		Referential< const Correlative >
			relator

	Description:
	
        Natural:  
            Type of the natural integer node counts.
        Correlative:  
            Type of the node relator key.
        Elemental:  
            Type of the node value element.
        Equate:  
            Function which will compare values for equality.
        Order:  
            Function which will compare values for determination of order.
        
        Given a reference to a constant sorted map and a reference to a constant
        relator key, returns true if relator corresponds in the association.


::junction::association::collection::Associate

    Template Parameters:
		typename Natural
		typename Correlative
		typename Elemental
		Referential< Precedent< Natural, Associational< Correlative, Elemental > > >
			Precede
		Referential< Consequent< Natural, Associational< Correlative, Elemental > > >
			Proceed
		Referential< Assortive< Correlative > >
			Equate
		Referential< Assortive< Correlative > >
			Order

    Return Type:
        bool
    
    Parameters:
		Referential< AssociativelyJunctive< Natural, Correlative, Elemental > >
			map
		Referential< const Correlative >
			relator
		Referential< const Elemental >
			value

	Description:
	
        Natural:  
            Type of the natural integer node counts.
        Correlative:  
            Type of the node relator key.
        Elemental:  
            Type of the node value element.
        Precede: 
            Function used to insert a node.
        Proceed:  
            Function used to suffix a node.
        Equate:  
            Function which will compare values for equality.
        Order:  
            Function which will compare values for determination of order.
        
        Given a reference to a modifiable sorted map, a reference to a constant
        relator key and a reference to a constant value element, returns true if 
        associate was successful.  Returns false if relator already corresponds 
        in the association.


::junction::association::collection::Reassociate

    Template Parameters:
		typename Natural
		typename Correlative
		typename Elemental
		Referential< Precedent< Natural, Associational< Correlative, Elemental > > >
			Precede
		Referential< Consequent< Natural, Associational< Correlative, Elemental > > >
			Proceed
		Referential< Concessive< Natural, Associational< Correlative, Elemental > > >
			Concede
		Referential< Assortive< Correlative > >
			Equate
		Referential< Assortive< Correlative > >
			Order

    Return Type:
        bool
    
    Parameters:
		Referential< AssociativelyJunctive< Natural, Correlative, Elemental > >
			map
		Referential< const Correlative >
			original
		Referential< const Correlative >
			replacement

	Description:
	
        Natural:  
            Type of the natural integer node counts.
        Correlative:  
            Type of the node relator key.
        Elemental:  
            Type of the node value element.
        Precede:  
            Function used to insert a node.
        Proceed:  
            Function used to suffix a node.
        Concede:  
            Function used to remove a node.
        Equate:  
            Function which will compare values for equality.
        Order:  
            Function which will compare values for determination of order.
        
        Given a reference to a modifiable sorted map, a reference to a constant 
        original key and a reference to a constant replacement key, returns true
        if reassociate was successful.  Returns false if replacement already 
        corresponds in the association.


::junction::association::collection::Disassociate

    Template Parameters:
		typename Natural
		typename Correlative
		typename Elemental
		Referential< Concessive< Natural, Associational< Correlative, Elemental > > >
			Concede
		Referential< Assortive< Correlative > >
			Equate
		Referential< Assortive< Correlative > >
			Order

    Return Type:
        bool
    
    Parameters:
		Referential< AssociativelyJunctive< Natural, Correlative, Elemental > >
			map
		Referential< const Correlative >
			relator

	Description:
	
        Natural:  
            Type of the natural integer node counts.
        Correlative:  
            Type of the node relator key.
        Elemental:  
            Type of the node value element.
        Concede:  
            Function used to remove a node.
        Equate:  
            Function which will compare values for equality.
        Order:  
            Function which will compare values for determination of order.
        
        Given a reference to a modifiable sorted map and a reference to a 
        constant relator key, returns true if disassociate was successful.  
        Returns false if replacement already corresponds in the association.


::junction::association::collection::RelateReadElement

    Template Parameters:
		typename Natural
		typename Correlative
		typename Elemental
		Referential< Assortive< Correlative > >
			Equate
		Referential< Assortive< Correlative > >
			Order

    Return Type:
        Conferential< const Elemental >
    
    Parameters:
		Referential< const AssociativelyJunctive< Natural, Correlative, Elemental > >
			map
		Referential< const Correlative >
			relator

	Description:
	
        Natural:  
            Type of the natural integer node counts.
        Correlative:
            Type of the node relator key.
        Elemental:  
            Type of the node value element.
        Equate:  
            Function which will compare values for equality.
        Order:  
            Function which will compare values for determination of order.
        
        Given a reference to a sorted map as a constant and a reference to a 
        constant relator key, throws relator if it does not correspond in the 
        association.  Returns a conferment reference to the corresponding 
        constant value element.


::junction::association::collection::RelateWriteElement

    Template Parameters:
		typename Natural
		typename Correlative
		typename Elemental
		Referential< Assortive< Correlative > >
			Equate
		Referential< Assortive< Correlative > >
			Order

    Return Type:
        Conferential< Elemental >
    
    Parameters:
		Referential< AssociativelyJunctive< Natural, Correlative, Elemental > >
			map
		Referential< const Correlative >
			relator

	Description:
	
        Natural:  
            Type of the natural integer node counts.
        Correlative:  
            Type of the node relator key.
        Elemental:  
            Type of the node value element.
        Equate:  
            Function which will compare values for equality.
        Order:  
            Function which will compare values for determination of order.
        
        Given a reference to a sorted map as a constant and a reference to a 
        constant relator key, throws relator if it does not correspond in the 
        association.  Returns a conferment reference to the corresponding 
        modifiable value element.


                               VARIABLE TEMPLATES


::junction::association::collection::SearchAssociation

    Template Parameters:
		typename Natural
		typename Correlative
		typename Elemental
		Referential< Assortive< Correlative > >
			Equate
		Referential< Assortive< Correlative > >
			Order

    Type:
        auto

    Description:
	
        Natural:  
            Type of the natural integer node counts.
        Correlative:  
            Type of the node relator key.
        Elemental:  
            Type of the node value element.
        Equate: 
            Function which will compare values for equality.
        Order:  
            Function which will compare values for determination of order.
        
        Bisection search function reference template.  Shortens the template 
        specifier requirements in order to make use of the SearchLinealy 
        function template in the sortation namespace.


::junction::association::collection::RelateReadVector

    Template Parameters:
		typename Natural
		typename Correlative
		typename Elemental
		Referential< Assortive< Correlative > >
			Equate
		Referential< Assortive< Correlative > >
			Order

    Type:
        Vectorial< const AssociativelyJunctive< Natural, Correlative, Elemental >, Correlative, const Elemental >

    Description:
	
        Natural:  
            Type of the natural integer node counts.
        Correlative:  
            Type of the node relator key.
        Elemental:  
            Type of the node value element.
        Equate:  
            Function which will compare values for equality.
        Order:
            Function which will compare values for determination of order.
        
        Vectorial trajection through a sorted map function reference table.  
        Positional type is correlative.  Throws exceptions on relators which are 
        not found.  Returns references to constant value elements.


::junction::association::collection::RelateWriteVector

    Template Parameters:
		typename Natural
		typename Correlative
		typename Elemental
		Referential< Assortive< Correlative > >
			Equate
		Referential< Assortive< Correlative > >
			Order

    Type:
        Vectorial< AssociativelyJunctive< Natural, Correlative, Elemental >, Correlative, Elemental >

    Description:
	
        Natural:  
            Type of the natural integer node counts.
        Correlative:  
            Type of the node relator key.
        Elemental:  
            Type of the node value element.
        Equate:  
            Function which will compare values for equality.
        Order:  
            Function which will compare values for determination of order.
        
        Vectorial trajection through a sorted map function reference table.  
        Positional type is correlative.  Throws exceptions on relators which are 
        not found.  Returns references to modifiable value elements.


::junction::association::collection::JunctionAssociator

    Template Parameters:
		typename Natural
		typename Correlative
		typename Elemental
		Referential< const Adjunctive< Natural, Associational< Correlative, Elemental > > >
			Adjunct
		Referential< Assortive< Correlative > >
			Equate
		Referential< Assortive< Correlative > >
			Order

    Type:
        Associative< AssociativelyJunctive< Natural, Correlative, Elemental >, Natural, Correlative, Elemental >

    Description:
	
        Natural:  
            Type of the natural integer node counts.
        Correlative:  
            Type of the node relator key.
        Elemental:  
            Type of the node value element.
        Adjunct:  
            Memory management function table.
        Equate:  
            Function which will compare values for equality.
        Order:  
            Function which will compare values for determination of order.
        
        Sorted map associative function reference table.  Implements the generic 
        associative interface for linked list based sorted maps.  


::junction::association::collection::SafeJunctionAssociator

    Template Parameters:
		typename Natural
		typename Correlative
		typename Elemental
		Referential< const Adjunctive< Natural, Associational< Correlative, Elemental > > >
			Adjunct
		Referential< Assortive< Correlative > >
			Equate
		Referential< Assortive< Correlative > >
			Order

    Type:
        Associative< AssociativelyJunctive< Natural, Correlative, Elemental >, Natural, Correlative, Elemental >

    Description:
	
        Natural:  
            Type of the natural integer node counts.
        Correlative:  
            Type of the node relator key.
        Elemental:  
            Type of the node value element.
        Adjunct:  
            Memory management function table.
        Equate:  
            Function which will compare values for equality.
        Order:  
            Function which will compare values for determination of order.
        
        Sorted map associative function reference table.  Throws exceptions on 
        null pointer locations.  Implements the generic associative interface 
        for linked list based sorted maps.  


--------------------------------------------------------------------------------

